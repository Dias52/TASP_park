
TASP_park.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078d4  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08007acc  08007acc  00017acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b48  08007b48  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  08007b48  08007b48  00017b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b50  08007b50  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b50  08007b50  00017b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08007b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000058  08007bb0  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08007bb0  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada4  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037b0  00000000  00000000  0003ae2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003e5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029561  00000000  00000000  00040968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018798  00000000  00000000  00069ec9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9590  00000000  00000000  00082661  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0017bbf1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b9c  00000000  00000000  0017bc44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000058 	.word	0x20000058
 8000214:	00000000 	.word	0x00000000
 8000218:	08007ab4 	.word	0x08007ab4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	2000005c 	.word	0x2000005c
 8000234:	08007ab4 	.word	0x08007ab4

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b96e 	b.w	800052c <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	468c      	mov	ip, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	f040 8083 	bne.w	800037e <__udivmoddi4+0x116>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d947      	bls.n	800030e <__udivmoddi4+0xa6>
 800027e:	fab2 f282 	clz	r2, r2
 8000282:	b142      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000284:	f1c2 0020 	rsb	r0, r2, #32
 8000288:	fa24 f000 	lsr.w	r0, r4, r0
 800028c:	4091      	lsls	r1, r2
 800028e:	4097      	lsls	r7, r2
 8000290:	ea40 0c01 	orr.w	ip, r0, r1
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbbc f6f8 	udiv	r6, ip, r8
 80002a0:	fa1f fe87 	uxth.w	lr, r7
 80002a4:	fb08 c116 	mls	r1, r8, r6, ip
 80002a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ac:	fb06 f10e 	mul.w	r1, r6, lr
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18fb      	adds	r3, r7, r3
 80002b6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ba:	f080 8119 	bcs.w	80004f0 <__udivmoddi4+0x288>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8116 	bls.w	80004f0 <__udivmoddi4+0x288>
 80002c4:	3e02      	subs	r6, #2
 80002c6:	443b      	add	r3, r7
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002d0:	fb08 3310 	mls	r3, r8, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	45a6      	cmp	lr, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	193c      	adds	r4, r7, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8105 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002ea:	45a6      	cmp	lr, r4
 80002ec:	f240 8102 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002f0:	3802      	subs	r0, #2
 80002f2:	443c      	add	r4, r7
 80002f4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f8:	eba4 040e 	sub.w	r4, r4, lr
 80002fc:	2600      	movs	r6, #0
 80002fe:	b11d      	cbz	r5, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c5 4300 	strd	r4, r3, [r5]
 8000308:	4631      	mov	r1, r6
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	b902      	cbnz	r2, 8000312 <__udivmoddi4+0xaa>
 8000310:	deff      	udf	#255	; 0xff
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	2a00      	cmp	r2, #0
 8000318:	d150      	bne.n	80003bc <__udivmoddi4+0x154>
 800031a:	1bcb      	subs	r3, r1, r7
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	fa1f f887 	uxth.w	r8, r7
 8000324:	2601      	movs	r6, #1
 8000326:	fbb3 fcfe 	udiv	ip, r3, lr
 800032a:	0c21      	lsrs	r1, r4, #16
 800032c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000330:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000334:	fb08 f30c 	mul.w	r3, r8, ip
 8000338:	428b      	cmp	r3, r1
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0xe4>
 800033c:	1879      	adds	r1, r7, r1
 800033e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0xe2>
 8000344:	428b      	cmp	r3, r1
 8000346:	f200 80e9 	bhi.w	800051c <__udivmoddi4+0x2b4>
 800034a:	4684      	mov	ip, r0
 800034c:	1ac9      	subs	r1, r1, r3
 800034e:	b2a3      	uxth	r3, r4
 8000350:	fbb1 f0fe 	udiv	r0, r1, lr
 8000354:	fb0e 1110 	mls	r1, lr, r0, r1
 8000358:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800035c:	fb08 f800 	mul.w	r8, r8, r0
 8000360:	45a0      	cmp	r8, r4
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x10c>
 8000364:	193c      	adds	r4, r7, r4
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x10a>
 800036c:	45a0      	cmp	r8, r4
 800036e:	f200 80d9 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 8000372:	4618      	mov	r0, r3
 8000374:	eba4 0408 	sub.w	r4, r4, r8
 8000378:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800037c:	e7bf      	b.n	80002fe <__udivmoddi4+0x96>
 800037e:	428b      	cmp	r3, r1
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x12e>
 8000382:	2d00      	cmp	r5, #0
 8000384:	f000 80b1 	beq.w	80004ea <__udivmoddi4+0x282>
 8000388:	2600      	movs	r6, #0
 800038a:	e9c5 0100 	strd	r0, r1, [r5]
 800038e:	4630      	mov	r0, r6
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	fab3 f683 	clz	r6, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d14a      	bne.n	8000434 <__udivmoddi4+0x1cc>
 800039e:	428b      	cmp	r3, r1
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0x140>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 80b8 	bhi.w	8000518 <__udivmoddi4+0x2b0>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb61 0103 	sbc.w	r1, r1, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	468c      	mov	ip, r1
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0a8      	beq.n	8000308 <__udivmoddi4+0xa0>
 80003b6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ba:	e7a5      	b.n	8000308 <__udivmoddi4+0xa0>
 80003bc:	f1c2 0320 	rsb	r3, r2, #32
 80003c0:	fa20 f603 	lsr.w	r6, r0, r3
 80003c4:	4097      	lsls	r7, r2
 80003c6:	fa01 f002 	lsl.w	r0, r1, r2
 80003ca:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003ce:	40d9      	lsrs	r1, r3
 80003d0:	4330      	orrs	r0, r6
 80003d2:	0c03      	lsrs	r3, r0, #16
 80003d4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	fb0e 1116 	mls	r1, lr, r6, r1
 80003e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e4:	fb06 f108 	mul.w	r1, r6, r8
 80003e8:	4299      	cmp	r1, r3
 80003ea:	fa04 f402 	lsl.w	r4, r4, r2
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x19c>
 80003f0:	18fb      	adds	r3, r7, r3
 80003f2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003f6:	f080 808d 	bcs.w	8000514 <__udivmoddi4+0x2ac>
 80003fa:	4299      	cmp	r1, r3
 80003fc:	f240 808a 	bls.w	8000514 <__udivmoddi4+0x2ac>
 8000400:	3e02      	subs	r6, #2
 8000402:	443b      	add	r3, r7
 8000404:	1a5b      	subs	r3, r3, r1
 8000406:	b281      	uxth	r1, r0
 8000408:	fbb3 f0fe 	udiv	r0, r3, lr
 800040c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000410:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000414:	fb00 f308 	mul.w	r3, r0, r8
 8000418:	428b      	cmp	r3, r1
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x1c4>
 800041c:	1879      	adds	r1, r7, r1
 800041e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000422:	d273      	bcs.n	800050c <__udivmoddi4+0x2a4>
 8000424:	428b      	cmp	r3, r1
 8000426:	d971      	bls.n	800050c <__udivmoddi4+0x2a4>
 8000428:	3802      	subs	r0, #2
 800042a:	4439      	add	r1, r7
 800042c:	1acb      	subs	r3, r1, r3
 800042e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000432:	e778      	b.n	8000326 <__udivmoddi4+0xbe>
 8000434:	f1c6 0c20 	rsb	ip, r6, #32
 8000438:	fa03 f406 	lsl.w	r4, r3, r6
 800043c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000440:	431c      	orrs	r4, r3
 8000442:	fa20 f70c 	lsr.w	r7, r0, ip
 8000446:	fa01 f306 	lsl.w	r3, r1, r6
 800044a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800044e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000452:	431f      	orrs	r7, r3
 8000454:	0c3b      	lsrs	r3, r7, #16
 8000456:	fbb1 f9fe 	udiv	r9, r1, lr
 800045a:	fa1f f884 	uxth.w	r8, r4
 800045e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000462:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000466:	fb09 fa08 	mul.w	sl, r9, r8
 800046a:	458a      	cmp	sl, r1
 800046c:	fa02 f206 	lsl.w	r2, r2, r6
 8000470:	fa00 f306 	lsl.w	r3, r0, r6
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x220>
 8000476:	1861      	adds	r1, r4, r1
 8000478:	f109 30ff 	add.w	r0, r9, #4294967295
 800047c:	d248      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 800047e:	458a      	cmp	sl, r1
 8000480:	d946      	bls.n	8000510 <__udivmoddi4+0x2a8>
 8000482:	f1a9 0902 	sub.w	r9, r9, #2
 8000486:	4421      	add	r1, r4
 8000488:	eba1 010a 	sub.w	r1, r1, sl
 800048c:	b2bf      	uxth	r7, r7
 800048e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000492:	fb0e 1110 	mls	r1, lr, r0, r1
 8000496:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800049a:	fb00 f808 	mul.w	r8, r0, r8
 800049e:	45b8      	cmp	r8, r7
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x24a>
 80004a2:	19e7      	adds	r7, r4, r7
 80004a4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004a8:	d22e      	bcs.n	8000508 <__udivmoddi4+0x2a0>
 80004aa:	45b8      	cmp	r8, r7
 80004ac:	d92c      	bls.n	8000508 <__udivmoddi4+0x2a0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4427      	add	r7, r4
 80004b2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b6:	eba7 0708 	sub.w	r7, r7, r8
 80004ba:	fba0 8902 	umull	r8, r9, r0, r2
 80004be:	454f      	cmp	r7, r9
 80004c0:	46c6      	mov	lr, r8
 80004c2:	4649      	mov	r1, r9
 80004c4:	d31a      	bcc.n	80004fc <__udivmoddi4+0x294>
 80004c6:	d017      	beq.n	80004f8 <__udivmoddi4+0x290>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x27a>
 80004ca:	ebb3 020e 	subs.w	r2, r3, lr
 80004ce:	eb67 0701 	sbc.w	r7, r7, r1
 80004d2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004d6:	40f2      	lsrs	r2, r6
 80004d8:	ea4c 0202 	orr.w	r2, ip, r2
 80004dc:	40f7      	lsrs	r7, r6
 80004de:	e9c5 2700 	strd	r2, r7, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	462e      	mov	r6, r5
 80004ec:	4628      	mov	r0, r5
 80004ee:	e70b      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f0:	4606      	mov	r6, r0
 80004f2:	e6e9      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f4:	4618      	mov	r0, r3
 80004f6:	e6fd      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004f8:	4543      	cmp	r3, r8
 80004fa:	d2e5      	bcs.n	80004c8 <__udivmoddi4+0x260>
 80004fc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000500:	eb69 0104 	sbc.w	r1, r9, r4
 8000504:	3801      	subs	r0, #1
 8000506:	e7df      	b.n	80004c8 <__udivmoddi4+0x260>
 8000508:	4608      	mov	r0, r1
 800050a:	e7d2      	b.n	80004b2 <__udivmoddi4+0x24a>
 800050c:	4660      	mov	r0, ip
 800050e:	e78d      	b.n	800042c <__udivmoddi4+0x1c4>
 8000510:	4681      	mov	r9, r0
 8000512:	e7b9      	b.n	8000488 <__udivmoddi4+0x220>
 8000514:	4666      	mov	r6, ip
 8000516:	e775      	b.n	8000404 <__udivmoddi4+0x19c>
 8000518:	4630      	mov	r0, r6
 800051a:	e74a      	b.n	80003b2 <__udivmoddi4+0x14a>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	4439      	add	r1, r7
 8000522:	e713      	b.n	800034c <__udivmoddi4+0xe4>
 8000524:	3802      	subs	r0, #2
 8000526:	443c      	add	r4, r7
 8000528:	e724      	b.n	8000374 <__udivmoddi4+0x10c>
 800052a:	bf00      	nop

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <setNextState>:
void MTR_Rotation(int i);

typedef void (*arrayfunc)(void);
arrayfunc selectState[] = {proc_IDLE, proc_OPEN, proc_HOLD, proc_CLOSE};

void setNextState(e_states tmp){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	nextState = tmp;
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <setNextState+0x1c>)
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	7013      	strb	r3, [r2, #0]
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	20000015 	.word	0x20000015

08000550 <getState>:

e_states getState(){
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	return state;
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <getState+0x14>)
 8000556:	781b      	ldrb	r3, [r3, #0]
}
 8000558:	4618      	mov	r0, r3
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000014 	.word	0x20000014

08000568 <encodeFSM>:

void encodeFSM(){
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	if (state != nextState)
 800056c:	4b0a      	ldr	r3, [pc, #40]	; (8000598 <encodeFSM+0x30>)
 800056e:	781a      	ldrb	r2, [r3, #0]
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <encodeFSM+0x34>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	429a      	cmp	r2, r3
 8000576:	d002      	beq.n	800057e <encodeFSM+0x16>
		stateSetup = false;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <encodeFSM+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	701a      	strb	r2, [r3, #0]
	state = nextState;
 800057e:	4b07      	ldr	r3, [pc, #28]	; (800059c <encodeFSM+0x34>)
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4b05      	ldr	r3, [pc, #20]	; (8000598 <encodeFSM+0x30>)
 8000584:	701a      	strb	r2, [r3, #0]
	selectState[state]();
 8000586:	4b04      	ldr	r3, [pc, #16]	; (8000598 <encodeFSM+0x30>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	461a      	mov	r2, r3
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <encodeFSM+0x3c>)
 800058e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000592:	4798      	blx	r3
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	20000014 	.word	0x20000014
 800059c:	20000015 	.word	0x20000015
 80005a0:	20000074 	.word	0x20000074
 80005a4:	20000018 	.word	0x20000018

080005a8 <proc_IDLE>:

void proc_IDLE(){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	if (stateSetup == false){
 80005ac:	4b37      	ldr	r3, [pc, #220]	; (800068c <proc_IDLE+0xe4>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	f083 0301 	eor.w	r3, r3, #1
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d020      	beq.n	80005fc <proc_IDLE+0x54>
		lcd_write_pos(0, 2, clear);
 80005ba:	4a35      	ldr	r2, [pc, #212]	; (8000690 <proc_IDLE+0xe8>)
 80005bc:	2102      	movs	r1, #2
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fe48 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(0, 0, clear);
 80005c4:	4a32      	ldr	r2, [pc, #200]	; (8000690 <proc_IDLE+0xe8>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	2000      	movs	r0, #0
 80005ca:	f000 fe43 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(15, 3, clear);
 80005ce:	4a30      	ldr	r2, [pc, #192]	; (8000690 <proc_IDLE+0xe8>)
 80005d0:	2103      	movs	r1, #3
 80005d2:	200f      	movs	r0, #15
 80005d4:	f000 fe3e 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(0, 0, "WELCOME!");
 80005d8:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <proc_IDLE+0xec>)
 80005da:	2100      	movs	r1, #0
 80005dc:	2000      	movs	r0, #0
 80005de:	f000 fe39 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(15, 3, "IDLE");
 80005e2:	4a2d      	ldr	r2, [pc, #180]	; (8000698 <proc_IDLE+0xf0>)
 80005e4:	2103      	movs	r1, #3
 80005e6:	200f      	movs	r0, #15
 80005e8:	f000 fe34 	bl	8001254 <lcd_write_pos>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2101      	movs	r1, #1
 80005f0:	482a      	ldr	r0, [pc, #168]	; (800069c <proc_IDLE+0xf4>)
 80005f2:	f002 fd81 	bl	80030f8 <HAL_GPIO_WritePin>
		stateSetup = true;
 80005f6:	4b25      	ldr	r3, [pc, #148]	; (800068c <proc_IDLE+0xe4>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	701a      	strb	r2, [r3, #0]
	}
	if (checkTagPresence() == MI_OK){
 80005fc:	f000 fa94 	bl	8000b28 <checkTagPresence>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d13f      	bne.n	8000686 <proc_IDLE+0xde>
		lcd_write_pos(0, 1, clear);
 8000606:	4a22      	ldr	r2, [pc, #136]	; (8000690 <proc_IDLE+0xe8>)
 8000608:	2101      	movs	r1, #1
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fe22 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(0,2, clear);
 8000610:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <proc_IDLE+0xe8>)
 8000612:	2102      	movs	r1, #2
 8000614:	2000      	movs	r0, #0
 8000616:	f000 fe1d 	bl	8001254 <lcd_write_pos>
		if (checkTagAccess() == MI_OK){
 800061a:	f000 faa7 	bl	8000b6c <checkTagAccess>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d12b      	bne.n	800067c <proc_IDLE+0xd4>
			updateSpaces();
 8000624:	f000 f93a 	bl	800089c <updateSpaces>
			if (checkSpaces(getTag()) == p_ok){
 8000628:	f000 fb62 	bl	8000cf0 <getTag>
 800062c:	4603      	mov	r3, r0
 800062e:	4618      	mov	r0, r3
 8000630:	f000 f968 	bl	8000904 <checkSpaces>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10e      	bne.n	8000658 <proc_IDLE+0xb0>
				if (addSpace(getTag()) == p_full)
 800063a:	f000 fb59 	bl	8000cf0 <getTag>
 800063e:	4603      	mov	r3, r0
 8000640:	4618      	mov	r0, r3
 8000642:	f000 f9b7 	bl	80009b4 <addSpace>
 8000646:	4603      	mov	r3, r0
 8000648:	2b02      	cmp	r3, #2
 800064a:	d10b      	bne.n	8000664 <proc_IDLE+0xbc>
					lcd_write_pos(0, 1, "Park is full");
 800064c:	4a14      	ldr	r2, [pc, #80]	; (80006a0 <proc_IDLE+0xf8>)
 800064e:	2101      	movs	r1, #1
 8000650:	2000      	movs	r0, #0
 8000652:	f000 fdff 	bl	8001254 <lcd_write_pos>
 8000656:	e005      	b.n	8000664 <proc_IDLE+0xbc>
			}
			else{
				freeSpace(getTag());
 8000658:	f000 fb4a 	bl	8000cf0 <getTag>
 800065c:	4603      	mov	r3, r0
 800065e:	4618      	mov	r0, r3
 8000660:	f000 f978 	bl	8000954 <freeSpace>
			}
			lcd_write_pos(0, 2, readName());
 8000664:	f000 fb38 	bl	8000cd8 <readName>
 8000668:	4603      	mov	r3, r0
 800066a:	461a      	mov	r2, r3
 800066c:	2102      	movs	r1, #2
 800066e:	2000      	movs	r0, #0
 8000670:	f000 fdf0 	bl	8001254 <lcd_write_pos>
			setNextState(OPEN);
 8000674:	2001      	movs	r0, #1
 8000676:	f7ff ff5b 	bl	8000530 <setNextState>
		}
		else {
			lcd_write_pos(0, 2, "ACCESS DENIED");
		}
	}
}
 800067a:	e004      	b.n	8000686 <proc_IDLE+0xde>
			lcd_write_pos(0, 2, "ACCESS DENIED");
 800067c:	4a09      	ldr	r2, [pc, #36]	; (80006a4 <proc_IDLE+0xfc>)
 800067e:	2102      	movs	r1, #2
 8000680:	2000      	movs	r0, #0
 8000682:	f000 fde7 	bl	8001254 <lcd_write_pos>
}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	20000074 	.word	0x20000074
 8000690:	20000000 	.word	0x20000000
 8000694:	08007acc 	.word	0x08007acc
 8000698:	08007ad8 	.word	0x08007ad8
 800069c:	40021800 	.word	0x40021800
 80006a0:	08007ae0 	.word	0x08007ae0
 80006a4:	08007af0 	.word	0x08007af0

080006a8 <proc_OPEN>:

void proc_OPEN(){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	if (stateSetup == false){
 80006ac:	4b15      	ldr	r3, [pc, #84]	; (8000704 <proc_OPEN+0x5c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d022      	beq.n	8000700 <proc_OPEN+0x58>
		lcd_write_pos(0, 0, clear);
 80006ba:	4a13      	ldr	r2, [pc, #76]	; (8000708 <proc_OPEN+0x60>)
 80006bc:	2100      	movs	r1, #0
 80006be:	2000      	movs	r0, #0
 80006c0:	f000 fdc8 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(15, 3, clear);
 80006c4:	4a10      	ldr	r2, [pc, #64]	; (8000708 <proc_OPEN+0x60>)
 80006c6:	2103      	movs	r1, #3
 80006c8:	200f      	movs	r0, #15
 80006ca:	f000 fdc3 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(0, 0, "OPENING!");
 80006ce:	4a0f      	ldr	r2, [pc, #60]	; (800070c <proc_OPEN+0x64>)
 80006d0:	2100      	movs	r1, #0
 80006d2:	2000      	movs	r0, #0
 80006d4:	f000 fdbe 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(15, 3, "OPEN");
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <proc_OPEN+0x68>)
 80006da:	2103      	movs	r1, #3
 80006dc:	200f      	movs	r0, #15
 80006de:	f000 fdb9 	bl	8001254 <lcd_write_pos>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 80006e2:	2201      	movs	r2, #1
 80006e4:	2101      	movs	r1, #1
 80006e6:	480b      	ldr	r0, [pc, #44]	; (8000714 <proc_OPEN+0x6c>)
 80006e8:	f002 fd06 	bl	80030f8 <HAL_GPIO_WritePin>
		MTR_Rotation(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f000 f889 	bl	8000804 <MTR_Rotation>
		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006f2:	2100      	movs	r1, #0
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <proc_OPEN+0x70>)
 80006f6:	f006 f829 	bl	800674c <HAL_TIM_PWM_Start>
		stateSetup = true;
 80006fa:	4b02      	ldr	r3, [pc, #8]	; (8000704 <proc_OPEN+0x5c>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
		//IFC_O implementado
	}
}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000074 	.word	0x20000074
 8000708:	20000000 	.word	0x20000000
 800070c:	08007b00 	.word	0x08007b00
 8000710:	08007b0c 	.word	0x08007b0c
 8000714:	40021800 	.word	0x40021800
 8000718:	20000260 	.word	0x20000260

0800071c <proc_HOLD>:

void proc_HOLD(){
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	if (stateSetup == false){
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <proc_HOLD+0x4c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	f083 0301 	eor.w	r3, r3, #1
 8000728:	b2db      	uxtb	r3, r3
 800072a:	2b00      	cmp	r3, #0
 800072c:	d019      	beq.n	8000762 <proc_HOLD+0x46>
		lcd_write_pos(0, 0, clear);
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <proc_HOLD+0x50>)
 8000730:	2100      	movs	r1, #0
 8000732:	2000      	movs	r0, #0
 8000734:	f000 fd8e 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(15, 3, clear);
 8000738:	4a0c      	ldr	r2, [pc, #48]	; (800076c <proc_HOLD+0x50>)
 800073a:	2103      	movs	r1, #3
 800073c:	200f      	movs	r0, #15
 800073e:	f000 fd89 	bl	8001254 <lcd_write_pos>
		lcd_write_pos(15, 3, "HOLD");
 8000742:	4a0b      	ldr	r2, [pc, #44]	; (8000770 <proc_HOLD+0x54>)
 8000744:	2103      	movs	r1, #3
 8000746:	200f      	movs	r0, #15
 8000748:	f000 fd84 	bl	8001254 <lcd_write_pos>
		HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 800074c:	2201      	movs	r2, #1
 800074e:	2101      	movs	r1, #1
 8000750:	4808      	ldr	r0, [pc, #32]	; (8000774 <proc_HOLD+0x58>)
 8000752:	f002 fcd1 	bl	80030f8 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim2);
 8000756:	4808      	ldr	r0, [pc, #32]	; (8000778 <proc_HOLD+0x5c>)
 8000758:	f005 fef0 	bl	800653c <HAL_TIM_Base_Start_IT>
		stateSetup = true;
 800075c:	4b02      	ldr	r3, [pc, #8]	; (8000768 <proc_HOLD+0x4c>)
 800075e:	2201      	movs	r2, #1
 8000760:	701a      	strb	r2, [r3, #0]
	}
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000074 	.word	0x20000074
 800076c:	20000000 	.word	0x20000000
 8000770:	08007b14 	.word	0x08007b14
 8000774:	40021800 	.word	0x40021800
 8000778:	200002ac 	.word	0x200002ac

0800077c <proc_CLOSE>:

void proc_CLOSE(){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	if (stateSetup == false){
 8000780:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <proc_CLOSE+0x6c>)
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	f083 0301 	eor.w	r3, r3, #1
 8000788:	b2db      	uxtb	r3, r3
 800078a:	2b00      	cmp	r3, #0
 800078c:	d029      	beq.n	80007e2 <proc_CLOSE+0x66>
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11) == 1){
 800078e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000792:	4816      	ldr	r0, [pc, #88]	; (80007ec <proc_CLOSE+0x70>)
 8000794:	f002 fc98 	bl	80030c8 <HAL_GPIO_ReadPin>
 8000798:	4603      	mov	r3, r0
 800079a:	2b01      	cmp	r3, #1
 800079c:	d11e      	bne.n	80007dc <proc_CLOSE+0x60>
			lcd_write_pos(15, 3, clear);
 800079e:	4a14      	ldr	r2, [pc, #80]	; (80007f0 <proc_CLOSE+0x74>)
 80007a0:	2103      	movs	r1, #3
 80007a2:	200f      	movs	r0, #15
 80007a4:	f000 fd56 	bl	8001254 <lcd_write_pos>
			lcd_write_pos(0, 0, "CLOSING!");
 80007a8:	4a12      	ldr	r2, [pc, #72]	; (80007f4 <proc_CLOSE+0x78>)
 80007aa:	2100      	movs	r1, #0
 80007ac:	2000      	movs	r0, #0
 80007ae:	f000 fd51 	bl	8001254 <lcd_write_pos>
			lcd_write_pos(15, 3, "CLOSE");
 80007b2:	4a11      	ldr	r2, [pc, #68]	; (80007f8 <proc_CLOSE+0x7c>)
 80007b4:	2103      	movs	r1, #3
 80007b6:	200f      	movs	r0, #15
 80007b8:	f000 fd4c 	bl	8001254 <lcd_write_pos>
			HAL_GPIO_WritePin(GPIOG, GPIO_PIN_0, 1);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	480e      	ldr	r0, [pc, #56]	; (80007fc <proc_CLOSE+0x80>)
 80007c2:	f002 fc99 	bl	80030f8 <HAL_GPIO_WritePin>
			MTR_Rotation(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f000 f81c 	bl	8000804 <MTR_Rotation>
			HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007cc:	2100      	movs	r1, #0
 80007ce:	480c      	ldr	r0, [pc, #48]	; (8000800 <proc_CLOSE+0x84>)
 80007d0:	f005 ffbc 	bl	800674c <HAL_TIM_PWM_Start>
			stateSetup = true;
 80007d4:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <proc_CLOSE+0x6c>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	701a      	strb	r2, [r3, #0]
		}
		else
			setNextState(IDLE);
	}
	//IFC_C implementado e IV;
}
 80007da:	e002      	b.n	80007e2 <proc_CLOSE+0x66>
			setNextState(IDLE);
 80007dc:	2000      	movs	r0, #0
 80007de:	f7ff fea7 	bl	8000530 <setNextState>
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	20000074 	.word	0x20000074
 80007ec:	40020400 	.word	0x40020400
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08007b1c 	.word	0x08007b1c
 80007f8:	08007b28 	.word	0x08007b28
 80007fc:	40021800 	.word	0x40021800
 8000800:	20000260 	.word	0x20000260

08000804 <MTR_Rotation>:

void MTR_Rotation(int i){
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	if (i == 0){
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	d10c      	bne.n	800082c <MTR_Rotation+0x28>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 0);
 8000812:	2200      	movs	r2, #0
 8000814:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000818:	480c      	ldr	r0, [pc, #48]	; (800084c <MTR_Rotation+0x48>)
 800081a:	f002 fc6d 	bl	80030f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 1);
 800081e:	2201      	movs	r2, #1
 8000820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000824:	4809      	ldr	r0, [pc, #36]	; (800084c <MTR_Rotation+0x48>)
 8000826:	f002 fc67 	bl	80030f8 <HAL_GPIO_WritePin>
	}
	else{
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
	}
}
 800082a:	e00b      	b.n	8000844 <MTR_Rotation+0x40>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, 0);
 800082c:	2200      	movs	r2, #0
 800082e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MTR_Rotation+0x48>)
 8000834:	f002 fc60 	bl	80030f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, 1);
 8000838:	2201      	movs	r2, #1
 800083a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800083e:	4803      	ldr	r0, [pc, #12]	; (800084c <MTR_Rotation+0x48>)
 8000840:	f002 fc5a 	bl	80030f8 <HAL_GPIO_WritePin>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40021000 	.word	0x40021000

08000850 <cmpKeyCard>:
struct space spaces[4] = {{false, NULL},
						  {false, NULL},
						  {false, NULL},
						  {false, NULL}};

int cmpKeyCard(struct Tag *x, struct Tag *y){
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
	int tmp = 1;
 800085a:	2301      	movs	r3, #1
 800085c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 6; i++){
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	e010      	b.n	8000886 <cmpKeyCard+0x36>
		if (x->keyCard[i] != y->keyCard[i])
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	4413      	add	r3, r2
 800086a:	3310      	adds	r3, #16
 800086c:	781a      	ldrb	r2, [r3, #0]
 800086e:	6839      	ldr	r1, [r7, #0]
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	440b      	add	r3, r1
 8000874:	3310      	adds	r3, #16
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	429a      	cmp	r2, r3
 800087a:	d001      	beq.n	8000880 <cmpKeyCard+0x30>
			tmp = 0;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 6; i++){
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	3301      	adds	r3, #1
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	2b05      	cmp	r3, #5
 800088a:	ddeb      	ble.n	8000864 <cmpKeyCard+0x14>
	}
	return tmp;
 800088c:	68fb      	ldr	r3, [r7, #12]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3714      	adds	r7, #20
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <updateSpaces>:

void updateSpaces(){
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	if (!HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_8))
 80008a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008a4:	4814      	ldr	r0, [pc, #80]	; (80008f8 <updateSpaces+0x5c>)
 80008a6:	f002 fc0f 	bl	80030c8 <HAL_GPIO_ReadPin>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d102      	bne.n	80008b6 <updateSpaces+0x1a>
		spaces[0].occupied = true;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <updateSpaces+0x60>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
	if (!HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_7))
 80008b6:	2180      	movs	r1, #128	; 0x80
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <updateSpaces+0x5c>)
 80008ba:	f002 fc05 	bl	80030c8 <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d102      	bne.n	80008ca <updateSpaces+0x2e>
			spaces[1].occupied = true;
 80008c4:	4b0d      	ldr	r3, [pc, #52]	; (80008fc <updateSpaces+0x60>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	721a      	strb	r2, [r3, #8]
	if (!HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_9))
 80008ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008ce:	480a      	ldr	r0, [pc, #40]	; (80008f8 <updateSpaces+0x5c>)
 80008d0:	f002 fbfa 	bl	80030c8 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <updateSpaces+0x44>
			spaces[2].occupied = true;
 80008da:	4b08      	ldr	r3, [pc, #32]	; (80008fc <updateSpaces+0x60>)
 80008dc:	2201      	movs	r2, #1
 80008de:	741a      	strb	r2, [r3, #16]
	if (!HAL_GPIO_ReadPin(GPIOG, GPIO_PIN_1))
 80008e0:	2102      	movs	r1, #2
 80008e2:	4807      	ldr	r0, [pc, #28]	; (8000900 <updateSpaces+0x64>)
 80008e4:	f002 fbf0 	bl	80030c8 <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d102      	bne.n	80008f4 <updateSpaces+0x58>
			spaces[3].occupied = true;
 80008ee:	4b03      	ldr	r3, [pc, #12]	; (80008fc <updateSpaces+0x60>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	761a      	strb	r2, [r3, #24]
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021400 	.word	0x40021400
 80008fc:	20000078 	.word	0x20000078
 8000900:	40021800 	.word	0x40021800

08000904 <checkSpaces>:

int checkSpaces(struct Tag *p){
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	e016      	b.n	8000940 <checkSpaces+0x3c>
		if (spaces[i].occupied == true && cmpKeyCard(spaces[i].user, p) == 1)
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <checkSpaces+0x4c>)
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00d      	beq.n	800093a <checkSpaces+0x36>
 800091e:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <checkSpaces+0x4c>)
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	00db      	lsls	r3, r3, #3
 8000924:	4413      	add	r3, r2
 8000926:	685b      	ldr	r3, [r3, #4]
 8000928:	6879      	ldr	r1, [r7, #4]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff90 	bl	8000850 <cmpKeyCard>
 8000930:	4603      	mov	r3, r0
 8000932:	2b01      	cmp	r3, #1
 8000934:	d101      	bne.n	800093a <checkSpaces+0x36>
			return p_alocated;
 8000936:	2301      	movs	r3, #1
 8000938:	e006      	b.n	8000948 <checkSpaces+0x44>
	for (int i = 0; i < 4; i++){
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	3301      	adds	r3, #1
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b03      	cmp	r3, #3
 8000944:	dde5      	ble.n	8000912 <checkSpaces+0xe>
	}
	return p_ok;
 8000946:	2300      	movs	r3, #0
}
 8000948:	4618      	mov	r0, r3
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000078 	.word	0x20000078

08000954 <freeSpace>:

int freeSpace(struct Tag *p){
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	e01a      	b.n	8000998 <freeSpace+0x44>
		if (cmpKeyCard(spaces[i].user, p) == 1){
 8000962:	4a11      	ldr	r2, [pc, #68]	; (80009a8 <freeSpace+0x54>)
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	00db      	lsls	r3, r3, #3
 8000968:	4413      	add	r3, r2
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff6e 	bl	8000850 <cmpKeyCard>
 8000974:	4603      	mov	r3, r0
 8000976:	2b01      	cmp	r3, #1
 8000978:	d10b      	bne.n	8000992 <freeSpace+0x3e>
			spaces[i].user = NULL;
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <freeSpace+0x54>)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	00db      	lsls	r3, r3, #3
 8000980:	4413      	add	r3, r2
 8000982:	2200      	movs	r2, #0
 8000984:	605a      	str	r2, [r3, #4]
			tmp = p;
 8000986:	4a09      	ldr	r2, [pc, #36]	; (80009ac <freeSpace+0x58>)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	6013      	str	r3, [r2, #0]
			pick = 0;
 800098c:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <freeSpace+0x5c>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 4; i++){
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	3301      	adds	r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	2b03      	cmp	r3, #3
 800099c:	dde1      	ble.n	8000962 <freeSpace+0xe>
		}
	}
	return p_ok;
 800099e:	2300      	movs	r3, #0
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3710      	adds	r7, #16
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000078 	.word	0x20000078
 80009ac:	200000a0 	.word	0x200000a0
 80009b0:	200000a4 	.word	0x200000a4

080009b4 <addSpace>:

int addSpace(struct Tag *p){
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 4; i++){
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	e019      	b.n	80009f6 <addSpace+0x42>
		if(spaces[i].occupied == false){
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <addSpace+0x58>)
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80009ca:	f083 0301 	eor.w	r3, r3, #1
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d00d      	beq.n	80009f0 <addSpace+0x3c>
			spaces[i].user = p;
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <addSpace+0x58>)
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	4413      	add	r3, r2
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	605a      	str	r2, [r3, #4]
			tmp = p;
 80009e0:	4a0b      	ldr	r2, [pc, #44]	; (8000a10 <addSpace+0x5c>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	6013      	str	r3, [r2, #0]
			pick = 1;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <addSpace+0x60>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	701a      	strb	r2, [r3, #0]
			return p_ok;
 80009ec:	2300      	movs	r3, #0
 80009ee:	e006      	b.n	80009fe <addSpace+0x4a>
	for (int i = 0; i < 4; i++){
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3301      	adds	r3, #1
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	dde2      	ble.n	80009c2 <addSpace+0xe>
		}
	}
	return p_full;
 80009fc:	2302      	movs	r3, #2
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3714      	adds	r7, #20
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000078 	.word	0x20000078
 8000a10:	200000a0 	.word	0x200000a0
 8000a14:	200000a4 	.word	0x200000a4

08000a18 <callRobot>:

void callRobot(){
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

	}
	else{

	}
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
	...

08000a28 <addTag>:

uint8_t test;
uint8_t W[16];
uint8_t R[16];

void addTag(struct Tag* tag){
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
	if (head == NULL){
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <addTag+0x6c>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d103      	bne.n	8000a40 <addTag+0x18>
		head = tag;
 8000a38:	4a16      	ldr	r2, [pc, #88]	; (8000a94 <addTag+0x6c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
 8000a3e:	e012      	b.n	8000a66 <addTag+0x3e>
	}
	else{
		current = head;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <addTag+0x6c>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a14      	ldr	r2, [pc, #80]	; (8000a98 <addTag+0x70>)
 8000a46:	6013      	str	r3, [r2, #0]
		while(current->next != NULL)
 8000a48:	e004      	b.n	8000a54 <addTag+0x2c>
			current = current->next;
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <addTag+0x70>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <addTag+0x70>)
 8000a52:	6013      	str	r3, [r2, #0]
		while(current->next != NULL)
 8000a54:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <addTag+0x70>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6a1b      	ldr	r3, [r3, #32]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f5      	bne.n	8000a4a <addTag+0x22>
		current->next = tag;
 8000a5e:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <addTag+0x70>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	621a      	str	r2, [r3, #32]
	}
	if (tag->setUp == false){
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	7f1b      	ldrb	r3, [r3, #28]
 8000a6a:	f083 0301 	eor.w	r3, r3, #1
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d00b      	beq.n	8000a8c <addTag+0x64>
		p = tag;
 8000a74:	4a09      	ldr	r2, [pc, #36]	; (8000a9c <addTag+0x74>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
		setupTag(tag);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f000 f810 	bl	8000aa0 <setupTag>
		tag->setUp = true;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	2201      	movs	r2, #1
 8000a84:	771a      	strb	r2, [r3, #28]
		p = NULL;
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <addTag+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000098 	.word	0x20000098
 8000a98:	200000b4 	.word	0x200000b4
 8000a9c:	200000a8 	.word	0x200000a8

08000aa0 <setupTag>:

uint8_t setupTag(struct Tag* tag){
 8000aa0:	b590      	push	{r4, r7, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	while(checkTagPresence() != MI_OK && (serNum[0] != tag->keyCard[0] || serNum[1] != tag->keyCard[1] || serNum[2] != tag->keyCard[2] || serNum[3] != tag->keyCard[3] || serNum[4] != tag->keyCard[4]));
 8000aa8:	bf00      	nop
 8000aaa:	f000 f83d 	bl	8000b28 <checkTagPresence>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d01d      	beq.n	8000af0 <setupTag+0x50>
 8000ab4:	4b1a      	ldr	r3, [pc, #104]	; (8000b20 <setupTag+0x80>)
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	7c1b      	ldrb	r3, [r3, #16]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d1f4      	bne.n	8000aaa <setupTag+0xa>
 8000ac0:	4b17      	ldr	r3, [pc, #92]	; (8000b20 <setupTag+0x80>)
 8000ac2:	785a      	ldrb	r2, [r3, #1]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	7c5b      	ldrb	r3, [r3, #17]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d1ee      	bne.n	8000aaa <setupTag+0xa>
 8000acc:	4b14      	ldr	r3, [pc, #80]	; (8000b20 <setupTag+0x80>)
 8000ace:	789a      	ldrb	r2, [r3, #2]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	7c9b      	ldrb	r3, [r3, #18]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d1e8      	bne.n	8000aaa <setupTag+0xa>
 8000ad8:	4b11      	ldr	r3, [pc, #68]	; (8000b20 <setupTag+0x80>)
 8000ada:	78da      	ldrb	r2, [r3, #3]
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	7cdb      	ldrb	r3, [r3, #19]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d1e2      	bne.n	8000aaa <setupTag+0xa>
 8000ae4:	4b0e      	ldr	r3, [pc, #56]	; (8000b20 <setupTag+0x80>)
 8000ae6:	791a      	ldrb	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	7d1b      	ldrb	r3, [r3, #20]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d1dc      	bne.n	8000aaa <setupTag+0xa>
	authenticate(4);
 8000af0:	2004      	movs	r0, #4
 8000af2:	f000 f881 	bl	8000bf8 <authenticate>
	memcpy(W, tag->name, 16);
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <setupTag+0x84>)
 8000afa:	6814      	ldr	r4, [r2, #0]
 8000afc:	6850      	ldr	r0, [r2, #4]
 8000afe:	6891      	ldr	r1, [r2, #8]
 8000b00:	68d2      	ldr	r2, [r2, #12]
 8000b02:	601c      	str	r4, [r3, #0]
 8000b04:	6058      	str	r0, [r3, #4]
 8000b06:	6099      	str	r1, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
	writeTag(4);
 8000b0a:	2004      	movs	r0, #4
 8000b0c:	f000 f8c2 	bl	8000c94 <writeTag>
	readTag(4);
 8000b10:	2004      	movs	r0, #4
 8000b12:	f000 f89d 	bl	8000c50 <readTag>
	return MI_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd90      	pop	{r4, r7, pc}
 8000b20:	200000ac 	.word	0x200000ac
 8000b24:	200000b8 	.word	0x200000b8

08000b28 <checkTagPresence>:

uint8_t checkTagPresence(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	status = MFRC522_Request(PICC_REQIDL, str);
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <checkTagPresence+0x38>)
 8000b2e:	2026      	movs	r0, #38	; 0x26
 8000b30:	f000 ff2d 	bl	800198e <MFRC522_Request>
 8000b34:	4603      	mov	r3, r0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <checkTagPresence+0x3c>)
 8000b3a:	701a      	strb	r2, [r3, #0]
	status = MFRC522_Anticoll(str);
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <checkTagPresence+0x38>)
 8000b3e:	f000 ff4b 	bl	80019d8 <MFRC522_Anticoll>
 8000b42:	4603      	mov	r3, r0
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <checkTagPresence+0x3c>)
 8000b48:	701a      	strb	r2, [r3, #0]
	memcpy(serNum, str, 5);
 8000b4a:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <checkTagPresence+0x40>)
 8000b4c:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <checkTagPresence+0x38>)
 8000b4e:	6811      	ldr	r1, [r2, #0]
 8000b50:	6019      	str	r1, [r3, #0]
 8000b52:	7912      	ldrb	r2, [r2, #4]
 8000b54:	711a      	strb	r2, [r3, #4]
	return status;
 8000b56:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <checkTagPresence+0x3c>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200000dc 	.word	0x200000dc
 8000b64:	200000ec 	.word	0x200000ec
 8000b68:	200000ac 	.word	0x200000ac

08000b6c <checkTagAccess>:

uint8_t checkTagAccess(){
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
	int flag = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	607b      	str	r3, [r7, #4]
	current = head;
 8000b76:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <checkTagAccess+0x7c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a1c      	ldr	r2, [pc, #112]	; (8000bec <checkTagAccess+0x80>)
 8000b7c:	6013      	str	r3, [r2, #0]
	while(current != NULL){
 8000b7e:	e027      	b.n	8000bd0 <checkTagAccess+0x64>
		for (int i = 0; i < 5; i++){
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	e010      	b.n	8000ba8 <checkTagAccess+0x3c>
			if (serNum[i] != current->keyCard[i])
 8000b86:	4a1a      	ldr	r2, [pc, #104]	; (8000bf0 <checkTagAccess+0x84>)
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	781a      	ldrb	r2, [r3, #0]
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <checkTagAccess+0x80>)
 8000b90:	6819      	ldr	r1, [r3, #0]
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	440b      	add	r3, r1
 8000b96:	3310      	adds	r3, #16
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d001      	beq.n	8000ba2 <checkTagAccess+0x36>
				flag = 1;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	607b      	str	r3, [r7, #4]
		for (int i = 0; i < 5; i++){
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	2b04      	cmp	r3, #4
 8000bac:	ddeb      	ble.n	8000b86 <checkTagAccess+0x1a>
		}
		if (flag == 1){
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d107      	bne.n	8000bc4 <checkTagAccess+0x58>
			current = current->next;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <checkTagAccess+0x80>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	6a1b      	ldr	r3, [r3, #32]
 8000bba:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <checkTagAccess+0x80>)
 8000bbc:	6013      	str	r3, [r2, #0]
			flag = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	e005      	b.n	8000bd0 <checkTagAccess+0x64>
		}
		else {
			p = current;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <checkTagAccess+0x80>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <checkTagAccess+0x88>)
 8000bca:	6013      	str	r3, [r2, #0]
			return MI_OK;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	e004      	b.n	8000bda <checkTagAccess+0x6e>
	while(current != NULL){
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <checkTagAccess+0x80>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d1d3      	bne.n	8000b80 <checkTagAccess+0x14>
		}
	}
	return MI_NOTAGERR;
 8000bd8:	2301      	movs	r3, #1
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000098 	.word	0x20000098
 8000bec:	200000b4 	.word	0x200000b4
 8000bf0:	200000ac 	.word	0x200000ac
 8000bf4:	200000a8 	.word	0x200000a8

08000bf8 <authenticate>:

uint8_t authenticate(uint8_t bAddr){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	MFRC522_SelectTag(str);
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <authenticate+0x48>)
 8000c04:	f000 ff6e 	bl	8001ae4 <MFRC522_SelectTag>
	test = MFRC522_Auth(PICC_AUTHENT1A, bAddr, p->KEY, serNum);
 8000c08:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <authenticate+0x4c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f103 0215 	add.w	r2, r3, #21
 8000c10:	79f9      	ldrb	r1, [r7, #7]
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <authenticate+0x50>)
 8000c14:	2060      	movs	r0, #96	; 0x60
 8000c16:	f000 ffa8 	bl	8001b6a <MFRC522_Auth>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <authenticate+0x54>)
 8000c20:	701a      	strb	r2, [r3, #0]
	if (test == MI_OK){
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <authenticate+0x54>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d105      	bne.n	8000c36 <authenticate+0x3e>
		p->auth = true;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <authenticate+0x4c>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	76da      	strb	r2, [r3, #27]
		return MI_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <authenticate+0x40>
	}
	return MI_ERR;
 8000c36:	2302      	movs	r3, #2
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	200000dc 	.word	0x200000dc
 8000c44:	200000a8 	.word	0x200000a8
 8000c48:	200000ac 	.word	0x200000ac
 8000c4c:	200000b1 	.word	0x200000b1

08000c50 <readTag>:

uint8_t readTag(uint8_t bAddr){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	71fb      	strb	r3, [r7, #7]
	if (p->auth == true){
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <readTag+0x38>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	7edb      	ldrb	r3, [r3, #27]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d00b      	beq.n	8000c7c <readTag+0x2c>
		status = MFRC522_Read(bAddr, R);
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	4909      	ldr	r1, [pc, #36]	; (8000c8c <readTag+0x3c>)
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 ffe3 	bl	8001c34 <MFRC522_Read>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b07      	ldr	r3, [pc, #28]	; (8000c90 <readTag+0x40>)
 8000c74:	701a      	strb	r2, [r3, #0]
		return status;
 8000c76:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <readTag+0x40>)
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	e000      	b.n	8000c7e <readTag+0x2e>
	}
	return MI_ERR;
 8000c7c:	2302      	movs	r3, #2
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000a8 	.word	0x200000a8
 8000c8c:	200000cc 	.word	0x200000cc
 8000c90:	200000ec 	.word	0x200000ec

08000c94 <writeTag>:

uint8_t writeTag(uint8_t bAddr){
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
	if (p->auth == true){
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <writeTag+0x38>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	7edb      	ldrb	r3, [r3, #27]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d00b      	beq.n	8000cc0 <writeTag+0x2c>
		status = MFRC522_Write(bAddr, W);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	4909      	ldr	r1, [pc, #36]	; (8000cd0 <writeTag+0x3c>)
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 ffed 	bl	8001c8c <MFRC522_Write>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <writeTag+0x40>)
 8000cb8:	701a      	strb	r2, [r3, #0]
		return status;
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <writeTag+0x40>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	e000      	b.n	8000cc2 <writeTag+0x2e>
	}
	return MI_ERR;
 8000cc0:	2302      	movs	r3, #2
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000a8 	.word	0x200000a8
 8000cd0:	200000b8 	.word	0x200000b8
 8000cd4:	200000ec 	.word	0x200000ec

08000cd8 <readName>:

char* readName(){
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
	return &p->name;
 8000cdc:	4b03      	ldr	r3, [pc, #12]	; (8000cec <readName+0x14>)
 8000cde:	681b      	ldr	r3, [r3, #0]
	/*authenticate(4);
	MFRC522_Read(4, R);
	return &R;*/
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	200000a8 	.word	0x200000a8

08000cf0 <getTag>:

struct Tag* getTag(){
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
	return p;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <getTag+0x14>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	200000a8 	.word	0x200000a8

08000d08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_DMA_Init+0x48>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <MX_DMA_Init+0x48>)
 8000d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_DMA_Init+0x48>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	200b      	movs	r0, #11
 8000d2c:	f001 fc35 	bl	800259a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d30:	200b      	movs	r0, #11
 8000d32:	f001 fc4e 	bl	80025d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000d36:	2200      	movs	r2, #0
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2011      	movs	r0, #17
 8000d3c:	f001 fc2d 	bl	800259a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d40:	2011      	movs	r0, #17
 8000d42:	f001 fc46 	bl	80025d2 <HAL_NVIC_EnableIRQ>

}
 8000d46:	bf00      	nop
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
 8000d66:	60da      	str	r2, [r3, #12]
 8000d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d6a:	4b7d      	ldr	r3, [pc, #500]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a7c      	ldr	r2, [pc, #496]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000d70:	f043 0304 	orr.w	r3, r3, #4
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b7a      	ldr	r3, [pc, #488]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0304 	and.w	r3, r3, #4
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d82:	4b77      	ldr	r3, [pc, #476]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a76      	ldr	r2, [pc, #472]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000d88:	f043 0320 	orr.w	r3, r3, #32
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b74      	ldr	r3, [pc, #464]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	617b      	str	r3, [r7, #20]
 8000d98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9a:	4b71      	ldr	r3, [pc, #452]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a70      	ldr	r2, [pc, #448]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b6e      	ldr	r3, [pc, #440]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	613b      	str	r3, [r7, #16]
 8000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db2:	4b6b      	ldr	r3, [pc, #428]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	4a6a      	ldr	r2, [pc, #424]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000db8:	f043 0302 	orr.w	r3, r3, #2
 8000dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbe:	4b68      	ldr	r3, [pc, #416]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	f003 0302 	and.w	r3, r3, #2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a64      	ldr	r2, [pc, #400]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000de2:	4b5f      	ldr	r3, [pc, #380]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a5e      	ldr	r2, [pc, #376]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000de8:	f043 0310 	orr.w	r3, r3, #16
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b5c      	ldr	r3, [pc, #368]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0310 	and.w	r3, r3, #16
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	4b59      	ldr	r3, [pc, #356]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a58      	ldr	r2, [pc, #352]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000e00:	f043 0308 	orr.w	r3, r3, #8
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b56      	ldr	r3, [pc, #344]	; (8000f60 <MX_GPIO_Init+0x20c>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0308 	and.w	r3, r3, #8
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	2101      	movs	r1, #1
 8000e16:	4853      	ldr	r0, [pc, #332]	; (8000f64 <MX_GPIO_Init+0x210>)
 8000e18:	f002 f96e 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Rele_GPIO_Port, Rele_Pin, GPIO_PIN_RESET);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4851      	ldr	r0, [pc, #324]	; (8000f68 <MX_GPIO_Init+0x214>)
 8000e22:	f002 f969 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Rotate_R_Pin|Rotate_L_Pin, GPIO_PIN_RESET);
 8000e26:	2200      	movs	r2, #0
 8000e28:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000e2c:	484f      	ldr	r0, [pc, #316]	; (8000f6c <MX_GPIO_Init+0x218>)
 8000e2e:	f002 f963 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RFID_Reset_Pin|RFID_CS_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8000e38:	484d      	ldr	r0, [pc, #308]	; (8000f70 <MX_GPIO_Init+0x21c>)
 8000e3a:	f002 f95d 	bl	80030f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e44:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000e4e:	f107 031c 	add.w	r3, r7, #28
 8000e52:	4619      	mov	r1, r3
 8000e54:	4847      	ldr	r0, [pc, #284]	; (8000f74 <MX_GPIO_Init+0x220>)
 8000e56:	f001 ff8b 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = P1_Pin|P0_Pin|P2_Pin;
 8000e5a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000e5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e68:	f107 031c 	add.w	r3, r7, #28
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4842      	ldr	r0, [pc, #264]	; (8000f78 <MX_GPIO_Init+0x224>)
 8000e70:	f001 ff7e 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e74:	2301      	movs	r3, #1
 8000e76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4836      	ldr	r0, [pc, #216]	; (8000f64 <MX_GPIO_Init+0x210>)
 8000e8c:	f001 ff70 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Rele_Pin;
 8000e90:	2301      	movs	r3, #1
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Rele_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4830      	ldr	r0, [pc, #192]	; (8000f68 <MX_GPIO_Init+0x214>)
 8000ea8:	f001 ff62 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = P3_Pin;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(P3_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	482a      	ldr	r0, [pc, #168]	; (8000f68 <MX_GPIO_Init+0x214>)
 8000ec0:	f001 ff56 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = Rotate_R_Pin|Rotate_L_Pin;
 8000ec4:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed6:	f107 031c 	add.w	r3, r7, #28
 8000eda:	4619      	mov	r1, r3
 8000edc:	4823      	ldr	r0, [pc, #140]	; (8000f6c <MX_GPIO_Init+0x218>)
 8000ede:	f001 ff47 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = IFC_O_Pin|IFC_C_Pin;
 8000ee2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ee6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000eec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 031c 	add.w	r3, r7, #28
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	481a      	ldr	r0, [pc, #104]	; (8000f64 <MX_GPIO_Init+0x210>)
 8000efa:	f001 ff39 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RFID_Reset_Pin|RFID_CS_Pin;
 8000efe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f10:	f107 031c 	add.w	r3, r7, #28
 8000f14:	4619      	mov	r1, r3
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <MX_GPIO_Init+0x21c>)
 8000f18:	f001 ff2a 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IV_Pin;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(IV_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <MX_GPIO_Init+0x218>)
 8000f32:	f001 ff1d 	bl	8002d70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	2006      	movs	r0, #6
 8000f3c:	f001 fb2d 	bl	800259a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f40:	2006      	movs	r0, #6
 8000f42:	f001 fb46 	bl	80025d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2028      	movs	r0, #40	; 0x28
 8000f4c:	f001 fb25 	bl	800259a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f50:	2028      	movs	r0, #40	; 0x28
 8000f52:	f001 fb3e 	bl	80025d2 <HAL_NVIC_EnableIRQ>

}
 8000f56:	bf00      	nop
 8000f58:	3730      	adds	r7, #48	; 0x30
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40020400 	.word	0x40020400
 8000f68:	40021800 	.word	0x40021800
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40020c00 	.word	0x40020c00
 8000f74:	40020800 	.word	0x40020800
 8000f78:	40021400 	.word	0x40021400

08000f7c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f80:	4b1b      	ldr	r3, [pc, #108]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000f82:	4a1c      	ldr	r2, [pc, #112]	; (8000ff4 <MX_I2C1_Init+0x78>)
 8000f84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000f88:	4a1b      	ldr	r2, [pc, #108]	; (8000ff8 <MX_I2C1_Init+0x7c>)
 8000f8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8c:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b14      	ldr	r3, [pc, #80]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa4:	4b12      	ldr	r3, [pc, #72]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb6:	480e      	ldr	r0, [pc, #56]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000fb8:	f002 f8d0 	bl	800315c <HAL_I2C_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fc2:	f000 faaf 	bl	8001524 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4809      	ldr	r0, [pc, #36]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000fca:	f003 fcb9 	bl	8004940 <HAL_I2CEx_ConfigAnalogFilter>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d001      	beq.n	8000fd8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fd4:	f000 faa6 	bl	8001524 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <MX_I2C1_Init+0x74>)
 8000fdc:	f003 fcfb 	bl	80049d6 <HAL_I2CEx_ConfigDigitalFilter>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fe6:	f000 fa9d 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000150 	.word	0x20000150
 8000ff4:	40005400 	.word	0x40005400
 8000ff8:	20404768 	.word	0x20404768

08000ffc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b0ae      	sub	sp, #184	; 0xb8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2290      	movs	r2, #144	; 0x90
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f006 fd41 	bl	8007aa4 <memset>
  if(i2cHandle->Instance==I2C1)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a54      	ldr	r2, [pc, #336]	; (8001178 <HAL_I2C_MspInit+0x17c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	f040 80a1 	bne.w	8001170 <HAL_I2C_MspInit+0x174>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800102e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001032:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001038:	f107 0314 	add.w	r3, r7, #20
 800103c:	4618      	mov	r0, r3
 800103e:	f004 f9b7 	bl	80053b0 <HAL_RCCEx_PeriphCLKConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8001048:	f000 fa6c 	bl	8001524 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800104c:	4b4b      	ldr	r3, [pc, #300]	; (800117c <HAL_I2C_MspInit+0x180>)
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4a4a      	ldr	r2, [pc, #296]	; (800117c <HAL_I2C_MspInit+0x180>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	6313      	str	r3, [r2, #48]	; 0x30
 8001058:	4b48      	ldr	r3, [pc, #288]	; (800117c <HAL_I2C_MspInit+0x180>)
 800105a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105c:	f003 0302 	and.w	r3, r3, #2
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800106c:	2312      	movs	r3, #18
 800106e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001072:	2301      	movs	r3, #1
 8001074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001078:	2303      	movs	r3, #3
 800107a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800107e:	2304      	movs	r3, #4
 8001080:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001088:	4619      	mov	r1, r3
 800108a:	483d      	ldr	r0, [pc, #244]	; (8001180 <HAL_I2C_MspInit+0x184>)
 800108c:	f001 fe70 	bl	8002d70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001090:	4b3a      	ldr	r3, [pc, #232]	; (800117c <HAL_I2C_MspInit+0x180>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a39      	ldr	r2, [pc, #228]	; (800117c <HAL_I2C_MspInit+0x180>)
 8001096:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <HAL_I2C_MspInit+0x180>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 80010a8:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010aa:	4a37      	ldr	r2, [pc, #220]	; (8001188 <HAL_I2C_MspInit+0x18c>)
 80010ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80010ae:	4b35      	ldr	r3, [pc, #212]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80010b4:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010b6:	4b33      	ldr	r3, [pc, #204]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010bc:	4b31      	ldr	r3, [pc, #196]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010be:	2200      	movs	r2, #0
 80010c0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80010c2:	4b30      	ldr	r3, [pc, #192]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010c8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010ca:	4b2e      	ldr	r3, [pc, #184]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010d0:	4b2c      	ldr	r3, [pc, #176]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010d8:	2200      	movs	r2, #0
 80010da:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010dc:	4b29      	ldr	r3, [pc, #164]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010de:	2200      	movs	r2, #0
 80010e0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80010e8:	4826      	ldr	r0, [pc, #152]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010ea:	f001 fa8d 	bl	8002608 <HAL_DMA_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80010f4:	f000 fa16 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a22      	ldr	r2, [pc, #136]	; (8001184 <HAL_I2C_MspInit+0x188>)
 80010fc:	63da      	str	r2, [r3, #60]	; 0x3c
 80010fe:	4a21      	ldr	r2, [pc, #132]	; (8001184 <HAL_I2C_MspInit+0x188>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001104:	4b21      	ldr	r3, [pc, #132]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001106:	4a22      	ldr	r2, [pc, #136]	; (8001190 <HAL_I2C_MspInit+0x194>)
 8001108:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 800110a:	4b20      	ldr	r3, [pc, #128]	; (800118c <HAL_I2C_MspInit+0x190>)
 800110c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001110:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001112:	4b1e      	ldr	r3, [pc, #120]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001114:	2240      	movs	r2, #64	; 0x40
 8001116:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_I2C_MspInit+0x190>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001120:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001124:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001126:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001128:	2200      	movs	r2, #0
 800112a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800112c:	4b17      	ldr	r3, [pc, #92]	; (800118c <HAL_I2C_MspInit+0x190>)
 800112e:	2200      	movs	r2, #0
 8001130:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001132:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001134:	2200      	movs	r2, #0
 8001136:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <HAL_I2C_MspInit+0x190>)
 800113a:	2200      	movs	r2, #0
 800113c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001140:	2200      	movs	r2, #0
 8001142:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001144:	4811      	ldr	r0, [pc, #68]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001146:	f001 fa5f 	bl	8002608 <HAL_DMA_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_I2C_MspInit+0x158>
    {
      Error_Handler();
 8001150:	f000 f9e8 	bl	8001524 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a0d      	ldr	r2, [pc, #52]	; (800118c <HAL_I2C_MspInit+0x190>)
 8001158:	639a      	str	r2, [r3, #56]	; 0x38
 800115a:	4a0c      	ldr	r2, [pc, #48]	; (800118c <HAL_I2C_MspInit+0x190>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001160:	2200      	movs	r2, #0
 8001162:	2100      	movs	r1, #0
 8001164:	201f      	movs	r0, #31
 8001166:	f001 fa18 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800116a:	201f      	movs	r0, #31
 800116c:	f001 fa31 	bl	80025d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001170:	bf00      	nop
 8001172:	37b8      	adds	r7, #184	; 0xb8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40005400 	.word	0x40005400
 800117c:	40023800 	.word	0x40023800
 8001180:	40020400 	.word	0x40020400
 8001184:	2000019c 	.word	0x2000019c
 8001188:	40026010 	.word	0x40026010
 800118c:	200000f0 	.word	0x200000f0
 8001190:	400260a0 	.word	0x400260a0

08001194 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 1 */
bool i2ctxcplt = false;

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c1)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
	i2ctxcplt = true;
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_I2C_MasterTxCpltCallback+0x1c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	2000009c 	.word	0x2000009c

080011b4 <geti2ctxcplt>:

bool geti2ctxcplt(){ return i2ctxcplt; }
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <geti2ctxcplt+0x14>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	2000009c 	.word	0x2000009c

080011cc <reseti2ctxcplt>:

void reseti2ctxcplt(){ i2ctxcplt = false; }
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4b03      	ldr	r3, [pc, #12]	; (80011e0 <reseti2ctxcplt+0x14>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	701a      	strb	r2, [r3, #0]
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	2000009c 	.word	0x2000009c

080011e4 <lcd_send_cmd>:
// change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f023 030f 	bic.w	r3, r3, #15
 80011f4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	f043 030c 	orr.w	r3, r3, #12
 8001202:	b2db      	uxtb	r3, r3
 8001204:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f043 0308 	orr.w	r3, r3, #8
 800120c:	b2db      	uxtb	r3, r3
 800120e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	f043 030c 	orr.w	r3, r3, #12
 8001216:	b2db      	uxtb	r3, r3
 8001218:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800121a:	7bbb      	ldrb	r3, [r7, #14]
 800121c:	f043 0308 	orr.w	r3, r3, #8
 8001220:	b2db      	uxtb	r3, r3
 8001222:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 8001224:	f107 0208 	add.w	r2, r7, #8
 8001228:	2304      	movs	r3, #4
 800122a:	214e      	movs	r1, #78	; 0x4e
 800122c:	4808      	ldr	r0, [pc, #32]	; (8001250 <lcd_send_cmd+0x6c>)
 800122e:	f002 f825 	bl	800327c <HAL_I2C_Master_Transmit_DMA>

	while(geti2ctxcplt() == false);
 8001232:	bf00      	nop
 8001234:	f7ff ffbe 	bl	80011b4 <geti2ctxcplt>
 8001238:	4603      	mov	r3, r0
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f7      	bne.n	8001234 <lcd_send_cmd+0x50>

	reseti2ctxcplt();
 8001244:	f7ff ffc2 	bl	80011cc <reseti2ctxcplt>
}
 8001248:	bf00      	nop
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000150 	.word	0x20000150

08001254 <lcd_write_pos>:

void lcd_write_pos(int x, int y, void *prtstr)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	lcd_put_cur(y, x);
 8001260:	68f9      	ldr	r1, [r7, #12]
 8001262:	68b8      	ldr	r0, [r7, #8]
 8001264:	f000 f840 	bl	80012e8 <lcd_put_cur>

	lcd_send_string(prtstr);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f8b2 	bl	80013d2 <lcd_send_string>
}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	f023 030f 	bic.w	r3, r3, #15
 8001288:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001290:	7bfb      	ldrb	r3, [r7, #15]
 8001292:	f043 030d 	orr.w	r3, r3, #13
 8001296:	b2db      	uxtb	r3, r3
 8001298:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800129a:	7bfb      	ldrb	r3, [r7, #15]
 800129c:	f043 0309 	orr.w	r3, r3, #9
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	f043 030d 	orr.w	r3, r3, #13
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80012ae:	7bbb      	ldrb	r3, [r7, #14]
 80012b0:	f043 0309 	orr.w	r3, r3, #9
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit_DMA(&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4);
 80012b8:	f107 0208 	add.w	r2, r7, #8
 80012bc:	2304      	movs	r3, #4
 80012be:	214e      	movs	r1, #78	; 0x4e
 80012c0:	4808      	ldr	r0, [pc, #32]	; (80012e4 <lcd_send_data+0x6c>)
 80012c2:	f001 ffdb 	bl	800327c <HAL_I2C_Master_Transmit_DMA>
	while(geti2ctxcplt() == false);
 80012c6:	bf00      	nop
 80012c8:	f7ff ff74 	bl	80011b4 <geti2ctxcplt>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f083 0301 	eor.w	r3, r3, #1
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d1f7      	bne.n	80012c8 <lcd_send_data+0x50>
	reseti2ctxcplt();
 80012d8:	f7ff ff78 	bl	80011cc <reseti2ctxcplt>
}
 80012dc:	bf00      	nop
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20000150 	.word	0x20000150

080012e8 <lcd_put_cur>:
	}
	lcd_put_cur(0, 0);
}

void lcd_put_cur(int row, int col)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
 80012f0:	6039      	str	r1, [r7, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b03      	cmp	r3, #3
 80012f6:	d825      	bhi.n	8001344 <lcd_put_cur+0x5c>
 80012f8:	a201      	add	r2, pc, #4	; (adr r2, 8001300 <lcd_put_cur+0x18>)
 80012fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fe:	bf00      	nop
 8001300:	08001311 	.word	0x08001311
 8001304:	0800131b 	.word	0x0800131b
 8001308:	08001325 	.word	0x08001325
 800130c:	08001335 	.word	0x08001335
    switch (row)
    {
        case 0:
            col |= 0x80;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001316:	603b      	str	r3, [r7, #0]
            break;
 8001318:	e014      	b.n	8001344 <lcd_put_cur+0x5c>
        case 1:
            col |= 0xC0;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001320:	603b      	str	r3, [r7, #0]
            break;
 8001322:	e00f      	b.n	8001344 <lcd_put_cur+0x5c>
        case 2:
        	col |= 0x80;
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800132a:	603b      	str	r3, [r7, #0]
        	col += 0x14;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	3314      	adds	r3, #20
 8001330:	603b      	str	r3, [r7, #0]
        	break;
 8001332:	e007      	b.n	8001344 <lcd_put_cur+0x5c>
        case 3:
        	col |= 0xC0;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800133a:	603b      	str	r3, [r7, #0]
        	col += 0x14;
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3314      	adds	r3, #20
 8001340:	603b      	str	r3, [r7, #0]
        	break;
 8001342:	bf00      	nop
    }

    lcd_send_cmd (col);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2db      	uxtb	r3, r3
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff ff4b 	bl	80011e4 <lcd_send_cmd>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop

08001358 <lcd_init>:

void lcd_init (void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800135c:	2032      	movs	r0, #50	; 0x32
 800135e:	f001 f81d 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x30);
 8001362:	2030      	movs	r0, #48	; 0x30
 8001364:	f7ff ff3e 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001368:	2005      	movs	r0, #5
 800136a:	f001 f817 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x30);
 800136e:	2030      	movs	r0, #48	; 0x30
 8001370:	f7ff ff38 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001374:	2001      	movs	r0, #1
 8001376:	f001 f811 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x30);
 800137a:	2030      	movs	r0, #48	; 0x30
 800137c:	f7ff ff32 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(10);
 8001380:	200a      	movs	r0, #10
 8001382:	f001 f80b 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001386:	2020      	movs	r0, #32
 8001388:	f7ff ff2c 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(10);
 800138c:	200a      	movs	r0, #10
 800138e:	f001 f805 	bl	800239c <HAL_Delay>

  // display initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001392:	2028      	movs	r0, #40	; 0x28
 8001394:	f7ff ff26 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(1);
 8001398:	2001      	movs	r0, #1
 800139a:	f000 ffff 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800139e:	2008      	movs	r0, #8
 80013a0:	f7ff ff20 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(1);
 80013a4:	2001      	movs	r0, #1
 80013a6:	f000 fff9 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80013aa:	2001      	movs	r0, #1
 80013ac:	f7ff ff1a 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(1);
 80013b0:	2001      	movs	r0, #1
 80013b2:	f000 fff3 	bl	800239c <HAL_Delay>
	HAL_Delay(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f000 fff0 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80013bc:	2006      	movs	r0, #6
 80013be:	f7ff ff11 	bl	80011e4 <lcd_send_cmd>
	HAL_Delay(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f000 ffea 	bl	800239c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80013c8:	200c      	movs	r0, #12
 80013ca:	f7ff ff0b 	bl	80011e4 <lcd_send_cmd>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <lcd_send_string>:

void lcd_send_string (char *str)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80013da:	e006      	b.n	80013ea <lcd_send_string+0x18>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	1c5a      	adds	r2, r3, #1
 80013e0:	607a      	str	r2, [r7, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ff47 	bl	8001278 <lcd_send_data>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f4      	bne.n	80013dc <lcd_send_string+0xa>
}
 80013f2:	bf00      	nop
 80013f4:	bf00      	nop
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}

080013fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001400:	f000 ff6f 	bl	80022e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001404:	f000 f81e 	bl	8001444 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001408:	f7ff fca4 	bl	8000d54 <MX_GPIO_Init>
  MX_TIM1_Init();
 800140c:	f000 fdbc 	bl	8001f88 <MX_TIM1_Init>
  MX_SPI1_Init();
 8001410:	f000 f88e 	bl	8001530 <MX_SPI1_Init>
  MX_DMA_Init();
 8001414:	f7ff fc78 	bl	8000d08 <MX_DMA_Init>
  MX_I2C1_Init();
 8001418:	f7ff fdb0 	bl	8000f7c <MX_I2C1_Init>
  MX_TIM2_Init();
 800141c:	f000 fe60 	bl	80020e0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001420:	4806      	ldr	r0, [pc, #24]	; (800143c <main+0x40>)
 8001422:	f005 f88b 	bl	800653c <HAL_TIM_Base_Start_IT>
  MFRC522_Init();
 8001426:	f000 f9bb 	bl	80017a0 <MFRC522_Init>
  addTag(&tag1);
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <main+0x44>)
 800142c:	f7ff fafc 	bl	8000a28 <addTag>
  //addTag(&tag2);
  lcd_init();
 8001430:	f7ff ff92 	bl	8001358 <lcd_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  encodeFSM();
 8001434:	f7ff f898 	bl	8000568 <encodeFSM>
 8001438:	e7fc      	b.n	8001434 <main+0x38>
 800143a:	bf00      	nop
 800143c:	200002ac 	.word	0x200002ac
 8001440:	20000028 	.word	0x20000028

08001444 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	; 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	2234      	movs	r2, #52	; 0x34
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f006 fb26 	bl	8007aa4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001468:	4b2c      	ldr	r3, [pc, #176]	; (800151c <SystemClock_Config+0xd8>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a2b      	ldr	r2, [pc, #172]	; (800151c <SystemClock_Config+0xd8>)
 800146e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b29      	ldr	r3, [pc, #164]	; (800151c <SystemClock_Config+0xd8>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	4b27      	ldr	r3, [pc, #156]	; (8001520 <SystemClock_Config+0xdc>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a26      	ldr	r2, [pc, #152]	; (8001520 <SystemClock_Config+0xdc>)
 8001486:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800148a:	6013      	str	r3, [r2, #0]
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <SystemClock_Config+0xdc>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001498:	2302      	movs	r3, #2
 800149a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149c:	2301      	movs	r3, #1
 800149e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a0:	2310      	movs	r3, #16
 80014a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a8:	2300      	movs	r3, #0
 80014aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80014ac:	2310      	movs	r3, #16
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 80014b0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80014b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b6:	2302      	movs	r3, #2
 80014b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014ba:	2302      	movs	r3, #2
 80014bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014be:	2302      	movs	r3, #2
 80014c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 fb22 	bl	8004b10 <HAL_RCC_OscConfig>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80014d2:	f000 f827 	bl	8001524 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014d6:	f003 facb 	bl	8004a70 <HAL_PWREx_EnableOverDrive>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80014e0:	f000 f820 	bl	8001524 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e4:	230f      	movs	r3, #15
 80014e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e8:	2302      	movs	r3, #2
 80014ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014fa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	2107      	movs	r1, #7
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fdb2 	bl	800506c <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800150e:	f000 f809 	bl	8001524 <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	; 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40023800 	.word	0x40023800
 8001520:	40007000 	.word	0x40007000

08001524 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001528:	b672      	cpsid	i
}
 800152a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800152c:	e7fe      	b.n	800152c <Error_Handler+0x8>
	...

08001530 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001534:	4b1b      	ldr	r3, [pc, #108]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001536:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <MX_SPI1_Init+0x78>)
 8001538:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153a:	4b1a      	ldr	r3, [pc, #104]	; (80015a4 <MX_SPI1_Init+0x74>)
 800153c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001540:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001542:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001548:	4b16      	ldr	r3, [pc, #88]	; (80015a4 <MX_SPI1_Init+0x74>)
 800154a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800154e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001556:	4b13      	ldr	r3, [pc, #76]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155c:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <MX_SPI1_Init+0x74>)
 800155e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001562:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001566:	2220      	movs	r2, #32
 8001568:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156a:	4b0e      	ldr	r3, [pc, #56]	; (80015a4 <MX_SPI1_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001572:	2200      	movs	r2, #0
 8001574:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001578:	2200      	movs	r2, #0
 800157a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800157c:	4b09      	ldr	r3, [pc, #36]	; (80015a4 <MX_SPI1_Init+0x74>)
 800157e:	2207      	movs	r2, #7
 8001580:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001584:	2200      	movs	r2, #0
 8001586:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <MX_SPI1_Init+0x74>)
 800158a:	2208      	movs	r2, #8
 800158c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	; (80015a4 <MX_SPI1_Init+0x74>)
 8001590:	f004 fb36 	bl	8005c00 <HAL_SPI_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800159a:	f7ff ffc3 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	200001fc 	.word	0x200001fc
 80015a8:	40013000 	.word	0x40013000

080015ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b08a      	sub	sp, #40	; 0x28
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_SPI_MspInit+0x7c>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d127      	bne.n	800161e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015ce:	4b17      	ldr	r3, [pc, #92]	; (800162c <HAL_SPI_MspInit+0x80>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a16      	ldr	r2, [pc, #88]	; (800162c <HAL_SPI_MspInit+0x80>)
 80015d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b14      	ldr	r3, [pc, #80]	; (800162c <HAL_SPI_MspInit+0x80>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_SPI_MspInit+0x80>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a10      	ldr	r2, [pc, #64]	; (800162c <HAL_SPI_MspInit+0x80>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <HAL_SPI_MspInit+0x80>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015fe:	23e0      	movs	r3, #224	; 0xe0
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800160e:	2305      	movs	r3, #5
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001612:	f107 0314 	add.w	r3, r7, #20
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	; (8001630 <HAL_SPI_MspInit+0x84>)
 800161a:	f001 fba9 	bl	8002d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	; 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40013000 	.word	0x40013000
 800162c:	40023800 	.word	0x40023800
 8001630:	40020000 	.word	0x40020000

08001634 <RC522_SPI_Transfer>:
 * Chuc nang: wait 1 byte is stored in register MFRC522
 * Input:addr-> I just wrote down, val-> Value to record
 * Check: No
 */
uint8_t RC522_SPI_Transfer(uint8_t data)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af02      	add	r7, sp, #8
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	uint8_t rx_data;
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,100);
 800163e:	f107 020f 	add.w	r2, r7, #15
 8001642:	1df9      	adds	r1, r7, #7
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	2301      	movs	r3, #1
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <RC522_SPI_Transfer+0x28>)
 800164c:	f004 fb83 	bl	8005d56 <HAL_SPI_TransmitReceive>
	/*while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_TXE)==RESET);
	SPI_I2S_SendData(MFRC522_SPI,data);

	while(SPI_I2S_GetFlagStatus(MFRC522_SPI, SPI_I2S_FLAG_RXNE)==RESET);
	return SPI_I2S_ReceiveData(MFRC522_SPI);*/
	return rx_data;
 8001650:	7bfb      	ldrb	r3, [r7, #15]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3710      	adds	r7, #16
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200001fc 	.word	0x200001fc

08001660 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	460a      	mov	r2, r1
 800166a:	71fb      	strb	r3, [r7, #7]
 800166c:	4613      	mov	r3, r2
 800166e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 8001670:	2200      	movs	r2, #0
 8001672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <Write_MFRC522+0x4c>)
 8001678:	f001 fd3e 	bl	80030f8 <HAL_GPIO_WritePin>
	//The address is located:0XXXXXX0
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	b2db      	uxtb	r3, r3
 8001682:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001686:	b2db      	uxtb	r3, r3
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ffd3 	bl	8001634 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 800168e:	79bb      	ldrb	r3, [r7, #6]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ffcf 	bl	8001634 <RC522_SPI_Transfer>
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 8001696:	2201      	movs	r2, #1
 8001698:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800169c:	4803      	ldr	r0, [pc, #12]	; (80016ac <Write_MFRC522+0x4c>)
 800169e:	f001 fd2b 	bl	80030f8 <HAL_GPIO_WritePin>
}
 80016a2:	bf00      	nop
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40020c00 	.word	0x40020c00

080016b0 <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4603      	mov	r3, r0
 80016b8:	71fb      	strb	r3, [r7, #7]
	uint8_t val;

	/* CS LOW */
	//GPIO_ResetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_RESET);
 80016ba:	2200      	movs	r2, #0
 80016bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <Read_MFRC522+0x50>)
 80016c2:	f001 fd19 	bl	80030f8 <HAL_GPIO_WritePin>

	//The address is located:1XXXXXX0
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	b25b      	sxtb	r3, r3
 80016cc:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80016d0:	b25b      	sxtb	r3, r3
 80016d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80016d6:	b25b      	sxtb	r3, r3
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f7ff ffaa 	bl	8001634 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffa7 	bl	8001634 <RC522_SPI_Transfer>
 80016e6:	4603      	mov	r3, r0
 80016e8:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	//GPIO_SetBits(MFRC522_CS_GPIO, MFRC522_CS_PIN);
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 80016ea:	2201      	movs	r2, #1
 80016ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016f0:	4803      	ldr	r0, [pc, #12]	; (8001700 <Read_MFRC522+0x50>)
 80016f2:	f001 fd01 	bl	80030f8 <HAL_GPIO_WritePin>
	return val;	
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
	
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020c00 	.word	0x40020c00

08001704 <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)  
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	460a      	mov	r2, r1
 800170e:	71fb      	strb	r3, [r7, #7]
 8001710:	4613      	mov	r3, r2
 8001712:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	4618      	mov	r0, r3
 8001718:	f7ff ffca 	bl	80016b0 <Read_MFRC522>
 800171c:	4603      	mov	r3, r0
 800171e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001720:	7bfa      	ldrb	r2, [r7, #15]
 8001722:	79bb      	ldrb	r3, [r7, #6]
 8001724:	4313      	orrs	r3, r2
 8001726:	b2da      	uxtb	r2, r3
 8001728:	79fb      	ldrb	r3, [r7, #7]
 800172a:	4611      	mov	r1, r2
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff ff97 	bl	8001660 <Write_MFRC522>
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)  
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	4603      	mov	r3, r0
 8001742:	460a      	mov	r2, r1
 8001744:	71fb      	strb	r3, [r7, #7]
 8001746:	4613      	mov	r3, r2
 8001748:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4618      	mov	r0, r3
 800174e:	f7ff ffaf 	bl	80016b0 <Read_MFRC522>
 8001752:	4603      	mov	r3, r0
 8001754:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001756:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800175a:	43db      	mvns	r3, r3
 800175c:	b25a      	sxtb	r2, r3
 800175e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001762:	4013      	ands	r3, r2
 8001764:	b25b      	sxtb	r3, r3
 8001766:	b2da      	uxtb	r2, r3
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff77 	bl	8001660 <Write_MFRC522>
} 
 8001772:	bf00      	nop
 8001774:	3710      	adds	r7, #16
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
	

Read_MFRC522(TxControlReg);
 800177e:	2014      	movs	r0, #20
 8001780:	f7ff ff96 	bl	80016b0 <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 8001784:	2103      	movs	r1, #3
 8001786:	2014      	movs	r0, #20
 8001788:	f7ff ffbc 	bl	8001704 <SetBitMask>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001794:	210f      	movs	r1, #15
 8001796:	2001      	movs	r0, #1
 8001798:	f7ff ff62 	bl	8001660 <Write_MFRC522>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}

080017a0 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_14,GPIO_PIN_SET);
 80017a4:	2201      	movs	r2, #1
 80017a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017aa:	4813      	ldr	r0, [pc, #76]	; (80017f8 <MFRC522_Init+0x58>)
 80017ac:	f001 fca4 	bl	80030f8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD,GPIO_PIN_15,GPIO_PIN_SET);
 80017b0:	2201      	movs	r2, #1
 80017b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017b6:	4810      	ldr	r0, [pc, #64]	; (80017f8 <MFRC522_Init+0x58>)
 80017b8:	f001 fc9e 	bl	80030f8 <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();
	
	MFRC522_Reset();
 80017bc:	f7ff ffe8 	bl	8001790 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 80017c0:	218d      	movs	r1, #141	; 0x8d
 80017c2:	202a      	movs	r0, #42	; 0x2a
 80017c4:	f7ff ff4c 	bl	8001660 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80017c8:	213e      	movs	r1, #62	; 0x3e
 80017ca:	202b      	movs	r0, #43	; 0x2b
 80017cc:	f7ff ff48 	bl	8001660 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 80017d0:	211e      	movs	r1, #30
 80017d2:	202d      	movs	r0, #45	; 0x2d
 80017d4:	f7ff ff44 	bl	8001660 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80017d8:	2100      	movs	r1, #0
 80017da:	202c      	movs	r0, #44	; 0x2c
 80017dc:	f7ff ff40 	bl	8001660 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 80017e0:	2140      	movs	r1, #64	; 0x40
 80017e2:	2015      	movs	r0, #21
 80017e4:	f7ff ff3c 	bl	8001660 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 80017e8:	213d      	movs	r1, #61	; 0x3d
 80017ea:	2011      	movs	r0, #17
 80017ec:	f7ff ff38 	bl	8001660 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 80017f0:	f7ff ffc3 	bl	800177a <AntennaOn>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40020c00 	.word	0x40020c00

080017fc <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 80017fc:	b590      	push	{r4, r7, lr}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60b9      	str	r1, [r7, #8]
 8001804:	607b      	str	r3, [r7, #4]
 8001806:	4603      	mov	r3, r0
 8001808:	73fb      	strb	r3, [r7, #15]
 800180a:	4613      	mov	r3, r2
 800180c:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 800180e:	2302      	movs	r3, #2
 8001810:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8001812:	2300      	movs	r3, #0
 8001814:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8001816:	2300      	movs	r3, #0
 8001818:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2b0c      	cmp	r3, #12
 800181e:	d006      	beq.n	800182e <MFRC522_ToCard+0x32>
 8001820:	2b0e      	cmp	r3, #14
 8001822:	d109      	bne.n	8001838 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8001824:	2312      	movs	r3, #18
 8001826:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8001828:	2310      	movs	r3, #16
 800182a:	777b      	strb	r3, [r7, #29]
			break;
 800182c:	e005      	b.n	800183a <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 800182e:	2377      	movs	r3, #119	; 0x77
 8001830:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8001832:	2330      	movs	r3, #48	; 0x30
 8001834:	777b      	strb	r3, [r7, #29]
			break;
 8001836:	e000      	b.n	800183a <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8001838:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 800183a:	7fbb      	ldrb	r3, [r7, #30]
 800183c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4619      	mov	r1, r3
 8001844:	2002      	movs	r0, #2
 8001846:	f7ff ff0b 	bl	8001660 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 800184a:	2180      	movs	r1, #128	; 0x80
 800184c:	2004      	movs	r0, #4
 800184e:	f7ff ff74 	bl	800173a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	200a      	movs	r0, #10
 8001856:	f7ff ff55 	bl	8001704 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 800185a:	2100      	movs	r1, #0
 800185c:	2001      	movs	r0, #1
 800185e:	f7ff feff 	bl	8001660 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 8001862:	2300      	movs	r3, #0
 8001864:	61bb      	str	r3, [r7, #24]
 8001866:	e00a      	b.n	800187e <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8001868:	68ba      	ldr	r2, [r7, #8]
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4413      	add	r3, r2
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	4619      	mov	r1, r3
 8001872:	2009      	movs	r0, #9
 8001874:	f7ff fef4 	bl	8001660 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8001878:	69bb      	ldr	r3, [r7, #24]
 800187a:	3301      	adds	r3, #1
 800187c:	61bb      	str	r3, [r7, #24]
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	429a      	cmp	r2, r3
 8001884:	d3f0      	bcc.n	8001868 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4619      	mov	r1, r3
 800188a:	2001      	movs	r0, #1
 800188c:	f7ff fee8 	bl	8001660 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001890:	7bfb      	ldrb	r3, [r7, #15]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d103      	bne.n	800189e <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts  
 8001896:	2180      	movs	r1, #128	; 0x80
 8001898:	200d      	movs	r0, #13
 800189a:	f7ff ff33 	bl	8001704 <SetBitMask>
	}   
    
	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 800189e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80018a2:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 80018a4:	2004      	movs	r0, #4
 80018a6:	f7ff ff03 	bl	80016b0 <Read_MFRC522>
 80018aa:	4603      	mov	r3, r0
 80018ac:	773b      	strb	r3, [r7, #28]
        i--;
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <MFRC522_ToCard+0xd4>
 80018ba:	7f3b      	ldrb	r3, [r7, #28]
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d105      	bne.n	80018d0 <MFRC522_ToCard+0xd4>
 80018c4:	7f3a      	ldrb	r2, [r7, #28]
 80018c6:	7f7b      	ldrb	r3, [r7, #29]
 80018c8:	4013      	ands	r3, r2
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0e9      	beq.n	80018a4 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 80018d0:	2180      	movs	r1, #128	; 0x80
 80018d2:	200d      	movs	r0, #13
 80018d4:	f7ff ff31 	bl	800173a <ClearBitMask>
	
    if (i != 0)
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d052      	beq.n	8001984 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 80018de:	2006      	movs	r0, #6
 80018e0:	f7ff fee6 	bl	80016b0 <Read_MFRC522>
 80018e4:	4603      	mov	r3, r0
 80018e6:	f003 031b 	and.w	r3, r3, #27
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d148      	bne.n	8001980 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 80018f2:	7f3a      	ldrb	r2, [r7, #28]
 80018f4:	7fbb      	ldrb	r3, [r7, #30]
 80018f6:	4013      	ands	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;			//??   
 8001902:	2301      	movs	r3, #1
 8001904:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001906:	7bfb      	ldrb	r3, [r7, #15]
 8001908:	2b0c      	cmp	r3, #12
 800190a:	d13b      	bne.n	8001984 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800190c:	200a      	movs	r0, #10
 800190e:	f7ff fecf 	bl	80016b0 <Read_MFRC522>
 8001912:	4603      	mov	r3, r0
 8001914:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001916:	200c      	movs	r0, #12
 8001918:	f7ff feca 	bl	80016b0 <Read_MFRC522>
 800191c:	4603      	mov	r3, r0
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d008      	beq.n	800193c <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 800192a:	7f3b      	ldrb	r3, [r7, #28]
 800192c:	3b01      	subs	r3, #1
 800192e:	00da      	lsls	r2, r3, #3
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	4413      	add	r3, r2
 8001934:	461a      	mov	r2, r3
 8001936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	e004      	b.n	8001946 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 800193c:	7f3b      	ldrb	r3, [r7, #28]
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	461a      	mov	r2, r3
 8001942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001944:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8001946:	7f3b      	ldrb	r3, [r7, #28]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d101      	bne.n	8001950 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 800194c:	2301      	movs	r3, #1
 800194e:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8001950:	7f3b      	ldrb	r3, [r7, #28]
 8001952:	2b10      	cmp	r3, #16
 8001954:	d901      	bls.n	800195a <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 8001956:	2310      	movs	r3, #16
 8001958:	773b      	strb	r3, [r7, #28]
				}
				
				//FIFO doc in the received data
                for (i=0; i<n; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	61bb      	str	r3, [r7, #24]
 800195e:	e00a      	b.n	8001976 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	69bb      	ldr	r3, [r7, #24]
 8001964:	18d4      	adds	r4, r2, r3
 8001966:	2009      	movs	r0, #9
 8001968:	f7ff fea2 	bl	80016b0 <Read_MFRC522>
 800196c:	4603      	mov	r3, r0
 800196e:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	3301      	adds	r3, #1
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	7f3b      	ldrb	r3, [r7, #28]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	429a      	cmp	r2, r3
 800197c:	d3f0      	bcc.n	8001960 <MFRC522_ToCard+0x164>
 800197e:	e001      	b.n	8001984 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8001980:	2302      	movs	r3, #2
 8001982:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8001984:	7ffb      	ldrb	r3, [r7, #31]
}
 8001986:	4618      	mov	r0, r3
 8001988:	3724      	adds	r7, #36	; 0x24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd90      	pop	{r4, r7, pc}

0800198e <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b086      	sub	sp, #24
 8001992:	af02      	add	r7, sp, #8
 8001994:	4603      	mov	r3, r0
 8001996:	6039      	str	r1, [r7, #0]
 8001998:	71fb      	strb	r3, [r7, #7]
	uint8_t status;  
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800199a:	2107      	movs	r1, #7
 800199c:	200d      	movs	r0, #13
 800199e:	f7ff fe5f 	bl	8001660 <Write_MFRC522>
	
	TagType[0] = reqMode;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	79fa      	ldrb	r2, [r7, #7]
 80019a6:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 80019a8:	f107 0308 	add.w	r3, r7, #8
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	2201      	movs	r2, #1
 80019b2:	6839      	ldr	r1, [r7, #0]
 80019b4:	200c      	movs	r0, #12
 80019b6:	f7ff ff21 	bl	80017fc <MFRC522_ToCard>
 80019ba:	4603      	mov	r3, r0
 80019bc:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 80019be:	7bfb      	ldrb	r3, [r7, #15]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d102      	bne.n	80019ca <MFRC522_Request+0x3c>
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2b10      	cmp	r3, #16
 80019c8:	d001      	beq.n	80019ce <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 80019ca:	2302      	movs	r3, #2
 80019cc:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af02      	add	r7, sp, #8
 80019de:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	737b      	strb	r3, [r7, #13]
    uint unLen;
    

    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 80019e4:	2100      	movs	r1, #0
 80019e6:	200d      	movs	r0, #13
 80019e8:	f7ff fe3a 	bl	8001660 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2293      	movs	r2, #147	; 0x93
 80019f0:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3301      	adds	r3, #1
 80019f6:	2220      	movs	r2, #32
 80019f8:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 80019fa:	f107 0308 	add.w	r3, r7, #8
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2202      	movs	r2, #2
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	200c      	movs	r0, #12
 8001a08:	f7ff fef8 	bl	80017fc <MFRC522_ToCard>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d118      	bne.n	8001a48 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	73bb      	strb	r3, [r7, #14]
 8001a1a:	e009      	b.n	8001a30 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 8001a1c:	7bbb      	ldrb	r3, [r7, #14]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	4413      	add	r3, r2
 8001a22:	781a      	ldrb	r2, [r3, #0]
 8001a24:	7b7b      	ldrb	r3, [r7, #13]
 8001a26:	4053      	eors	r3, r2
 8001a28:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8001a2a:	7bbb      	ldrb	r3, [r7, #14]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	73bb      	strb	r3, [r7, #14]
 8001a30:	7bbb      	ldrb	r3, [r7, #14]
 8001a32:	2b03      	cmp	r3, #3
 8001a34:	d9f2      	bls.n	8001a1c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8001a36:	7bbb      	ldrb	r3, [r7, #14]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	7b7a      	ldrb	r2, [r7, #13]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d001      	beq.n	8001a48 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 8001a44:	2302      	movs	r3, #2
 8001a46:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
} 
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <CalulateCRC>:
 * MFRC522 is a formula of RC522
 * Input: pIndata - Data CRC into calculator, wool - Data data, pOutData - CRC calculation
 * Check: No
 */
void CalulateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
 8001a52:	b590      	push	{r4, r7, lr}
 8001a54:	b087      	sub	sp, #28
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	72fb      	strb	r3, [r7, #11]
    uint8_t i, n;

    ClearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
 8001a60:	2104      	movs	r1, #4
 8001a62:	2005      	movs	r0, #5
 8001a64:	f7ff fe69 	bl	800173a <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//Con tro FIFO
 8001a68:	2180      	movs	r1, #128	; 0x80
 8001a6a:	200a      	movs	r0, #10
 8001a6c:	f7ff fe4a 	bl	8001704 <SetBitMask>
    //Write_MFRC522(CommandReg, PCD_IDLE);

	//Record in FIFO
    for (i=0; i<len; i++)
 8001a70:	2300      	movs	r3, #0
 8001a72:	75fb      	strb	r3, [r7, #23]
 8001a74:	e00a      	b.n	8001a8c <CalulateCRC+0x3a>
    {   
		Write_MFRC522(FIFODataReg, *(pIndata+i));   
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	2009      	movs	r0, #9
 8001a82:	f7ff fded 	bl	8001660 <Write_MFRC522>
    for (i=0; i<len; i++)
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	75fb      	strb	r3, [r7, #23]
 8001a8c:	7dfa      	ldrb	r2, [r7, #23]
 8001a8e:	7afb      	ldrb	r3, [r7, #11]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d3f0      	bcc.n	8001a76 <CalulateCRC+0x24>
	}
    Write_MFRC522(CommandReg, PCD_CALCCRC);
 8001a94:	2103      	movs	r1, #3
 8001a96:	2001      	movs	r0, #1
 8001a98:	f7ff fde2 	bl	8001660 <Write_MFRC522>

	// Let the CRC computer complete
    i = 0xFF;
 8001a9c:	23ff      	movs	r3, #255	; 0xff
 8001a9e:	75fb      	strb	r3, [r7, #23]
    do 
    {
        n = Read_MFRC522(DivIrqReg);
 8001aa0:	2005      	movs	r0, #5
 8001aa2:	f7ff fe05 	bl	80016b0 <Read_MFRC522>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	75bb      	strb	r3, [r7, #22]
        i--;
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	75fb      	strb	r3, [r7, #23]
    }
    while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 8001ab0:	7dfb      	ldrb	r3, [r7, #23]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d004      	beq.n	8001ac0 <CalulateCRC+0x6e>
 8001ab6:	7dbb      	ldrb	r3, [r7, #22]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ef      	beq.n	8001aa0 <CalulateCRC+0x4e>

	//Doc results in CRC calculation
    pOutData[0] = Read_MFRC522(CRCResultRegL);
 8001ac0:	2022      	movs	r0, #34	; 0x22
 8001ac2:	f7ff fdf5 	bl	80016b0 <Read_MFRC522>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	701a      	strb	r2, [r3, #0]
    pOutData[1] = Read_MFRC522(CRCResultRegM);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	1c5c      	adds	r4, r3, #1
 8001ad2:	2021      	movs	r0, #33	; 0x21
 8001ad4:	f7ff fdec 	bl	80016b0 <Read_MFRC522>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	7023      	strb	r3, [r4, #0]
}
 8001adc:	bf00      	nop
 8001ade:	371c      	adds	r7, #28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd90      	pop	{r4, r7, pc}

08001ae4 <MFRC522_SelectTag>:
 * read the right way
 * Input:serNum--So serial the
 * Check: Use the same amount of inspection
 */
uint8_t MFRC522_SelectTag(uint8_t *serNum)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b08a      	sub	sp, #40	; 0x28
 8001ae8:	af02      	add	r7, sp, #8
 8001aea:	6078      	str	r0, [r7, #4]
	uint recvBits;
	uint8_t buffer[9]; 

	//ClearBitMask(Status2Reg, 0x08);			//MFCrypto1On=0

    buffer[0] = PICC_SElECTTAG;
 8001aec:	2393      	movs	r3, #147	; 0x93
 8001aee:	733b      	strb	r3, [r7, #12]
    buffer[1] = 0x70;
 8001af0:	2370      	movs	r3, #112	; 0x70
 8001af2:	737b      	strb	r3, [r7, #13]
    for (i=0; i<5; i++)
 8001af4:	2300      	movs	r3, #0
 8001af6:	77fb      	strb	r3, [r7, #31]
 8001af8:	e00d      	b.n	8001b16 <MFRC522_SelectTag+0x32>
    {
    	buffer[i+2] = *(serNum+i);
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	441a      	add	r2, r3
 8001b00:	7ffb      	ldrb	r3, [r7, #31]
 8001b02:	3302      	adds	r3, #2
 8001b04:	7812      	ldrb	r2, [r2, #0]
 8001b06:	f107 0120 	add.w	r1, r7, #32
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<5; i++)
 8001b10:	7ffb      	ldrb	r3, [r7, #31]
 8001b12:	3301      	adds	r3, #1
 8001b14:	77fb      	strb	r3, [r7, #31]
 8001b16:	7ffb      	ldrb	r3, [r7, #31]
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d9ee      	bls.n	8001afa <MFRC522_SelectTag+0x16>
    }
	CalulateCRC(buffer, 7, &buffer[7]);		//??
 8001b1c:	f107 030c 	add.w	r3, r7, #12
 8001b20:	1dda      	adds	r2, r3, #7
 8001b22:	f107 030c 	add.w	r3, r7, #12
 8001b26:	2107      	movs	r1, #7
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff92 	bl	8001a52 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, buffer, &recvBits);
 8001b2e:	f107 020c 	add.w	r2, r7, #12
 8001b32:	f107 010c 	add.w	r1, r7, #12
 8001b36:	f107 0318 	add.w	r3, r7, #24
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	2209      	movs	r2, #9
 8001b40:	200c      	movs	r0, #12
 8001b42:	f7ff fe5b 	bl	80017fc <MFRC522_ToCard>
 8001b46:	4603      	mov	r3, r0
 8001b48:	777b      	strb	r3, [r7, #29]
    
    if ((status == MI_OK) && (recvBits == 0x18))
 8001b4a:	7f7b      	ldrb	r3, [r7, #29]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d105      	bne.n	8001b5c <MFRC522_SelectTag+0x78>
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	2b18      	cmp	r3, #24
 8001b54:	d102      	bne.n	8001b5c <MFRC522_SelectTag+0x78>
    {   
		size = buffer[0]; 
 8001b56:	7b3b      	ldrb	r3, [r7, #12]
 8001b58:	77bb      	strb	r3, [r7, #30]
 8001b5a:	e001      	b.n	8001b60 <MFRC522_SelectTag+0x7c>
	}
    else
    {   
		size = 0;    
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	77bb      	strb	r3, [r7, #30]
	}

    return size;
 8001b60:	7fbb      	ldrb	r3, [r7, #30]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <MFRC522_Auth>:
             Sectorkey - The shadow area
             serNum - So serial the, 4 bytes
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Auth(uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b08c      	sub	sp, #48	; 0x30
 8001b6e:	af02      	add	r7, sp, #8
 8001b70:	60ba      	str	r2, [r7, #8]
 8001b72:	607b      	str	r3, [r7, #4]
 8001b74:	4603      	mov	r3, r0
 8001b76:	73fb      	strb	r3, [r7, #15]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	73bb      	strb	r3, [r7, #14]
    uint recvBits;
    uint8_t i;
	uint8_t buff[12]; 

	//Confirmation + Address + password + quick number
    buff[0] = authMode;
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	753b      	strb	r3, [r7, #20]
    buff[1] = BlockAddr;
 8001b80:	7bbb      	ldrb	r3, [r7, #14]
 8001b82:	757b      	strb	r3, [r7, #21]
    for (i=0; i<6; i++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001b8a:	e011      	b.n	8001bb0 <MFRC522_Auth+0x46>
    {    
		buff[i+2] = *(Sectorkey+i);   
 8001b8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b90:	68ba      	ldr	r2, [r7, #8]
 8001b92:	441a      	add	r2, r3
 8001b94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001b98:	3302      	adds	r3, #2
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001ba0:	440b      	add	r3, r1
 8001ba2:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<6; i++)
 8001ba6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001baa:	3301      	adds	r3, #1
 8001bac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bb4:	2b05      	cmp	r3, #5
 8001bb6:	d9e9      	bls.n	8001b8c <MFRC522_Auth+0x22>
	}
    for (i=0; i<4; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001bbe:	e011      	b.n	8001be4 <MFRC522_Auth+0x7a>
    {    
		buff[i+8] = *(serNum+i);   
 8001bc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	441a      	add	r2, r3
 8001bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bcc:	3308      	adds	r3, #8
 8001bce:	7812      	ldrb	r2, [r2, #0]
 8001bd0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f803 2c14 	strb.w	r2, [r3, #-20]
    for (i=0; i<4; i++)
 8001bda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001bde:	3301      	adds	r3, #1
 8001be0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001be4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001be8:	2b03      	cmp	r3, #3
 8001bea:	d9e9      	bls.n	8001bc0 <MFRC522_Auth+0x56>
	}
    status = MFRC522_ToCard(PCD_AUTHENT, buff, 12, buff, &recvBits);
 8001bec:	f107 0214 	add.w	r2, r7, #20
 8001bf0:	f107 0114 	add.w	r1, r7, #20
 8001bf4:	f107 0320 	add.w	r3, r7, #32
 8001bf8:	9300      	str	r3, [sp, #0]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	220c      	movs	r2, #12
 8001bfe:	200e      	movs	r0, #14
 8001c00:	f7ff fdfc 	bl	80017fc <MFRC522_ToCard>
 8001c04:	4603      	mov	r3, r0
 8001c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK) || (!(Read_MFRC522(Status2Reg) & 0x08)))
 8001c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d107      	bne.n	8001c22 <MFRC522_Auth+0xb8>
 8001c12:	2008      	movs	r0, #8
 8001c14:	f7ff fd4c 	bl	80016b0 <Read_MFRC522>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d102      	bne.n	8001c28 <MFRC522_Auth+0xbe>
    {   
		status = MI_ERR;   
 8001c22:	2302      	movs	r3, #2
 8001c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    
    return status;
 8001c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3728      	adds	r7, #40	; 0x28
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <MFRC522_Read>:
 * Doc with data
 * Input: blockAddr - Address location; recvData - Retrieve document output
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Read(uint8_t blockAddr, uint8_t *recvData)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af02      	add	r7, sp, #8
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint unLen;

    recvData[0] = PICC_READ;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2230      	movs	r2, #48	; 0x30
 8001c44:	701a      	strb	r2, [r3, #0]
    recvData[1] = blockAddr;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	79fa      	ldrb	r2, [r7, #7]
 8001c4c:	701a      	strb	r2, [r3, #0]
    CalulateCRC(recvData,2, &recvData[2]);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	3302      	adds	r3, #2
 8001c52:	461a      	mov	r2, r3
 8001c54:	2102      	movs	r1, #2
 8001c56:	6838      	ldr	r0, [r7, #0]
 8001c58:	f7ff fefb 	bl	8001a52 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, recvData, 4, recvData, &unLen);
 8001c5c:	f107 0308 	add.w	r3, r7, #8
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	2204      	movs	r2, #4
 8001c66:	6839      	ldr	r1, [r7, #0]
 8001c68:	200c      	movs	r0, #12
 8001c6a:	f7ff fdc7 	bl	80017fc <MFRC522_ToCard>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	73fb      	strb	r3, [r7, #15]

    if ((status != MI_OK) || (unLen != 0x90))
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d102      	bne.n	8001c7e <MFRC522_Read+0x4a>
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b90      	cmp	r3, #144	; 0x90
 8001c7c:	d001      	beq.n	8001c82 <MFRC522_Read+0x4e>
    {
        status = MI_ERR;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	73fb      	strb	r3, [r7, #15]
    }
    
    return status;
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <MFRC522_Write>:
 * wait repeats data
 * Input: blockAddr - locations; writeData - write data
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Write(uint8_t blockAddr, uint8_t *writeData)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b08c      	sub	sp, #48	; 0x30
 8001c90:	af02      	add	r7, sp, #8
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    uint recvBits;
    uint8_t i;
	uint8_t buff[18]; 
    
    buff[0] = PICC_WRITE;
 8001c98:	23a0      	movs	r3, #160	; 0xa0
 8001c9a:	733b      	strb	r3, [r7, #12]
    buff[1] = blockAddr;
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	737b      	strb	r3, [r7, #13]
    CalulateCRC(buff, 2, &buff[2]);
 8001ca0:	f107 030c 	add.w	r3, r7, #12
 8001ca4:	1c9a      	adds	r2, r3, #2
 8001ca6:	f107 030c 	add.w	r3, r7, #12
 8001caa:	2102      	movs	r1, #2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fed0 	bl	8001a52 <CalulateCRC>
    status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &recvBits);
 8001cb2:	f107 020c 	add.w	r2, r7, #12
 8001cb6:	f107 010c 	add.w	r1, r7, #12
 8001cba:	f107 0320 	add.w	r3, r7, #32
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	4613      	mov	r3, r2
 8001cc2:	2204      	movs	r2, #4
 8001cc4:	200c      	movs	r0, #12
 8001cc6:	f7ff fd99 	bl	80017fc <MFRC522_ToCard>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8001cd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <MFRC522_Write+0x5c>
 8001cd8:	6a3b      	ldr	r3, [r7, #32]
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d104      	bne.n	8001ce8 <MFRC522_Write+0x5c>
 8001cde:	7b3b      	ldrb	r3, [r7, #12]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	2b0a      	cmp	r3, #10
 8001ce6:	d002      	beq.n	8001cee <MFRC522_Write+0x62>
    {   
		status = MI_ERR;   
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
        
    if (status == MI_OK)
 8001cee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d140      	bne.n	8001d78 <MFRC522_Write+0xec>
    {
        for (i=0; i<16; i++)		//16 FIFO bytes recorded
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001cfc:	e010      	b.n	8001d20 <MFRC522_Write+0x94>
        {    
        	buff[i] = *(writeData+i);   
 8001cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	441a      	add	r2, r3
 8001d06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d0a:	7812      	ldrb	r2, [r2, #0]
 8001d0c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001d10:	440b      	add	r3, r1
 8001d12:	f803 2c1c 	strb.w	r2, [r3, #-28]
        for (i=0; i<16; i++)		//16 FIFO bytes recorded
 8001d16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001d20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d9ea      	bls.n	8001cfe <MFRC522_Write+0x72>
        }
        CalulateCRC(buff, 16, &buff[16]);
 8001d28:	f107 030c 	add.w	r3, r7, #12
 8001d2c:	f103 0210 	add.w	r2, r3, #16
 8001d30:	f107 030c 	add.w	r3, r7, #12
 8001d34:	2110      	movs	r1, #16
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fe8b 	bl	8001a52 <CalulateCRC>
        status = MFRC522_ToCard(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);
 8001d3c:	f107 020c 	add.w	r2, r7, #12
 8001d40:	f107 010c 	add.w	r1, r7, #12
 8001d44:	f107 0320 	add.w	r3, r7, #32
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	2212      	movs	r2, #18
 8001d4e:	200c      	movs	r0, #12
 8001d50:	f7ff fd54 	bl	80017fc <MFRC522_ToCard>
 8001d54:	4603      	mov	r3, r0
 8001d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        
		if ((status != MI_OK) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
 8001d5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d107      	bne.n	8001d72 <MFRC522_Write+0xe6>
 8001d62:	6a3b      	ldr	r3, [r7, #32]
 8001d64:	2b04      	cmp	r3, #4
 8001d66:	d104      	bne.n	8001d72 <MFRC522_Write+0xe6>
 8001d68:	7b3b      	ldrb	r3, [r7, #12]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	2b0a      	cmp	r3, #10
 8001d70:	d002      	beq.n	8001d78 <MFRC522_Write+0xec>
        {   
			status = MI_ERR;   
 8001d72:	2302      	movs	r3, #2
 8001d74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}
    }
    
    return status;
 8001d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3728      	adds	r7, #40	; 0x28
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	4a0e      	ldr	r2, [pc, #56]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d94:	6413      	str	r3, [r2, #64]	; 0x40
 8001d96:	4b0c      	ldr	r3, [pc, #48]	; (8001dc8 <HAL_MspInit+0x44>)
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da2:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	4a08      	ldr	r2, [pc, #32]	; (8001dc8 <HAL_MspInit+0x44>)
 8001da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dac:	6453      	str	r3, [r2, #68]	; 0x44
 8001dae:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <HAL_MspInit+0x44>)
 8001db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db6:	603b      	str	r3, [r7, #0]
 8001db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd6:	e7fe      	b.n	8001dd6 <HardFault_Handler+0x4>

08001dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ddc:	e7fe      	b.n	8001ddc <MemManage_Handler+0x4>

08001dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dde:	b480      	push	{r7}
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de2:	e7fe      	b.n	8001de2 <BusFault_Handler+0x4>

08001de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001de8:	e7fe      	b.n	8001de8 <UsageFault_Handler+0x4>

08001dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr

08001e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e18:	f000 faa0 	bl	800235c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Rele_Pin);
 8001e24:	2001      	movs	r0, #1
 8001e26:	f001 f981 	bl	800312c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <DMA1_Stream0_IRQHandler+0x10>)
 8001e36:	f000 fd17 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	2000019c 	.word	0x2000019c

08001e44 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <DMA1_Stream6_IRQHandler+0x10>)
 8001e4a:	f000 fd0d 	bl	8002868 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	200000f0 	.word	0x200000f0

08001e58 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e5c:	4802      	ldr	r0, [pc, #8]	; (8001e68 <TIM2_IRQHandler+0x10>)
 8001e5e:	f004 fdef 	bl	8006a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	200002ac 	.word	0x200002ac

08001e6c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e70:	4802      	ldr	r0, [pc, #8]	; (8001e7c <I2C1_EV_IRQHandler+0x10>)
 8001e72:	f001 faf3 	bl	800345c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	20000150 	.word	0x20000150

08001e80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IFC_O_Pin);
 8001e84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e88:	f001 f950 	bl	800312c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IFC_C_Pin);
 8001e8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e90:	f001 f94c 	bl	800312c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8001e94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e98:	f001 f948 	bl	800312c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 1 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_0 && getState() == CLOSE){ //IV
 8001eaa:	88fb      	ldrh	r3, [r7, #6]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d10b      	bne.n	8001ec8 <HAL_GPIO_EXTI_Callback+0x28>
 8001eb0:	f7fe fb4e 	bl	8000550 <getState>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d106      	bne.n	8001ec8 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4826      	ldr	r0, [pc, #152]	; (8001f58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001ebe:	f004 fd3f 	bl	8006940 <HAL_TIM_PWM_Stop>
		setNextState(OPEN);
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f7fe fb34 	bl	8000530 <setNextState>
	}
	if (GPIO_Pin == GPIO_PIN_0 && getState() == HOLD){ //IV
 8001ec8:	88fb      	ldrh	r3, [r7, #6]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d116      	bne.n	8001efc <HAL_GPIO_EXTI_Callback+0x5c>
 8001ece:	f7fe fb3f 	bl	8000550 <getState>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d111      	bne.n	8001efc <HAL_GPIO_EXTI_Callback+0x5c>
			HAL_TIM_Base_Stop_IT(&htim2);
 8001ed8:	4820      	ldr	r0, [pc, #128]	; (8001f5c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001eda:	f004 fba7 	bl	800662c <HAL_TIM_Base_Stop_IT>
			while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_0) == 0);
 8001ede:	bf00      	nop
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	481f      	ldr	r0, [pc, #124]	; (8001f60 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ee4:	f001 f8f0 	bl	80030c8 <HAL_GPIO_ReadPin>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d0f8      	beq.n	8001ee0 <HAL_GPIO_EXTI_Callback+0x40>
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_Base_Start_IT(&htim2);
 8001ef6:	4819      	ldr	r0, [pc, #100]	; (8001f5c <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ef8:	f004 fb20 	bl	800653c <HAL_TIM_Base_Start_IT>
	}
	if (GPIO_Pin == GPIO_PIN_10 && getState() == OPEN){ //IFC_O
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f02:	d10b      	bne.n	8001f1c <HAL_GPIO_EXTI_Callback+0x7c>
 8001f04:	f7fe fb24 	bl	8000550 <getState>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d106      	bne.n	8001f1c <HAL_GPIO_EXTI_Callback+0x7c>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001f0e:	2100      	movs	r1, #0
 8001f10:	4811      	ldr	r0, [pc, #68]	; (8001f58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001f12:	f004 fd15 	bl	8006940 <HAL_TIM_PWM_Stop>
		setNextState(HOLD);
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7fe fb0a 	bl	8000530 <setNextState>
	}
	if (GPIO_Pin == GPIO_PIN_11 && getState() == CLOSE){ //IFC_C
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f22:	d10d      	bne.n	8001f40 <HAL_GPIO_EXTI_Callback+0xa0>
 8001f24:	f7fe fb14 	bl	8000550 <getState>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b03      	cmp	r3, #3
 8001f2c:	d108      	bne.n	8001f40 <HAL_GPIO_EXTI_Callback+0xa0>
		HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001f2e:	2100      	movs	r1, #0
 8001f30:	4809      	ldr	r0, [pc, #36]	; (8001f58 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001f32:	f004 fd05 	bl	8006940 <HAL_TIM_PWM_Stop>
		callRobot();
 8001f36:	f7fe fd6f 	bl	8000a18 <callRobot>
		setNextState(IDLE);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f7fe faf8 	bl	8000530 <setNextState>
	}
	if (GPIO_Pin == GPIO_PIN_13){ //BTN
 8001f40:	88fb      	ldrh	r3, [r7, #6]
 8001f42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f46:	d102      	bne.n	8001f4e <HAL_GPIO_EXTI_Callback+0xae>
		setNextState(OPEN);
 8001f48:	2001      	movs	r0, #1
 8001f4a:	f7fe faf1 	bl	8000530 <setNextState>
	}
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20000260 	.word	0x20000260
 8001f5c:	200002ac 	.word	0x200002ac
 8001f60:	40021000 	.word	0x40021000

08001f64 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <SystemInit+0x20>)
 8001f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <SystemInit+0x20>)
 8001f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b09a      	sub	sp, #104	; 0x68
 8001f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f8e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fa8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001fac:	2200      	movs	r2, #0
 8001fae:	601a      	str	r2, [r3, #0]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	609a      	str	r2, [r3, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	615a      	str	r2, [r3, #20]
 8001fba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	222c      	movs	r2, #44	; 0x2c
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f005 fd6e 	bl	8007aa4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001fc8:	4b43      	ldr	r3, [pc, #268]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001fca:	4a44      	ldr	r2, [pc, #272]	; (80020dc <MX_TIM1_Init+0x154>)
 8001fcc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000;
 8001fce:	4b42      	ldr	r3, [pc, #264]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001fd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fd4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fd6:	4b40      	ldr	r3, [pc, #256]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 216;
 8001fdc:	4b3e      	ldr	r3, [pc, #248]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001fde:	22d8      	movs	r2, #216	; 0xd8
 8001fe0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001fe8:	4b3b      	ldr	r3, [pc, #236]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001fee:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001ff0:	2280      	movs	r2, #128	; 0x80
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ff4:	4838      	ldr	r0, [pc, #224]	; (80020d8 <MX_TIM1_Init+0x150>)
 8001ff6:	f004 fa49 	bl	800648c <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002000:	f7ff fa90 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800200e:	4619      	mov	r1, r3
 8002010:	4831      	ldr	r0, [pc, #196]	; (80020d8 <MX_TIM1_Init+0x150>)
 8002012:	f004 ff49 	bl	8006ea8 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800201c:	f7ff fa82 	bl	8001524 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002020:	482d      	ldr	r0, [pc, #180]	; (80020d8 <MX_TIM1_Init+0x150>)
 8002022:	f004 fb32 	bl	800668a <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800202c:	f7ff fa7a 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002034:	2300      	movs	r3, #0
 8002036:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002038:	2300      	movs	r3, #0
 800203a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800203c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002040:	4619      	mov	r1, r3
 8002042:	4825      	ldr	r0, [pc, #148]	; (80020d8 <MX_TIM1_Init+0x150>)
 8002044:	f005 fbe0 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800204e:	f7ff fa69 	bl	8001524 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002052:	2360      	movs	r3, #96	; 0x60
 8002054:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 76;
 8002056:	234c      	movs	r3, #76	; 0x4c
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205a:	2300      	movs	r3, #0
 800205c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800205e:	2300      	movs	r3, #0
 8002060:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002066:	2300      	movs	r3, #0
 8002068:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800206e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002072:	2200      	movs	r2, #0
 8002074:	4619      	mov	r1, r3
 8002076:	4818      	ldr	r0, [pc, #96]	; (80020d8 <MX_TIM1_Init+0x150>)
 8002078:	f004 fe02 	bl	8006c80 <HAL_TIM_PWM_ConfigChannel>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002082:	f7ff fa4f 	bl	8001524 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002086:	2300      	movs	r3, #0
 8002088:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800208a:	2300      	movs	r3, #0
 800208c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800208e:	2300      	movs	r3, #0
 8002090:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800209a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800209e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020a0:	2300      	movs	r3, #0
 80020a2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020ac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020b6:	1d3b      	adds	r3, r7, #4
 80020b8:	4619      	mov	r1, r3
 80020ba:	4807      	ldr	r0, [pc, #28]	; (80020d8 <MX_TIM1_Init+0x150>)
 80020bc:	f005 fc32 	bl	8007924 <HAL_TIMEx_ConfigBreakDeadTime>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80020c6:	f7ff fa2d 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020ca:	4803      	ldr	r0, [pc, #12]	; (80020d8 <MX_TIM1_Init+0x150>)
 80020cc:	f000 f88e 	bl	80021ec <HAL_TIM_MspPostInit>

}
 80020d0:	bf00      	nop
 80020d2:	3768      	adds	r7, #104	; 0x68
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000260 	.word	0x20000260
 80020dc:	40010000 	.word	0x40010000

080020e0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e6:	f107 0310 	add.w	r3, r7, #16
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]
 80020f0:	609a      	str	r2, [r3, #8]
 80020f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	2200      	movs	r2, #0
 80020f8:	601a      	str	r2, [r3, #0]
 80020fa:	605a      	str	r2, [r3, #4]
 80020fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80020fe:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_TIM2_Init+0x94>)
 8002100:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002104:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8002106:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <MX_TIM2_Init+0x94>)
 8002108:	220a      	movs	r2, #10
 800210a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <MX_TIM2_Init+0x94>)
 800210e:	2200      	movs	r2, #0
 8002110:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 108000000;
 8002112:	4b18      	ldr	r3, [pc, #96]	; (8002174 <MX_TIM2_Init+0x94>)
 8002114:	4a18      	ldr	r2, [pc, #96]	; (8002178 <MX_TIM2_Init+0x98>)
 8002116:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002118:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_TIM2_Init+0x94>)
 800211a:	2200      	movs	r2, #0
 800211c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800211e:	4b15      	ldr	r3, [pc, #84]	; (8002174 <MX_TIM2_Init+0x94>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002124:	4813      	ldr	r0, [pc, #76]	; (8002174 <MX_TIM2_Init+0x94>)
 8002126:	f004 f9b1 	bl	800648c <HAL_TIM_Base_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002130:	f7ff f9f8 	bl	8001524 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002134:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002138:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800213a:	f107 0310 	add.w	r3, r7, #16
 800213e:	4619      	mov	r1, r3
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <MX_TIM2_Init+0x94>)
 8002142:	f004 feb1 	bl	8006ea8 <HAL_TIM_ConfigClockSource>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800214c:	f7ff f9ea 	bl	8001524 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_TIM2_Init+0x94>)
 800215e:	f005 fb53 	bl	8007808 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002168:	f7ff f9dc 	bl	8001524 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800216c:	bf00      	nop
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200002ac 	.word	0x200002ac
 8002178:	066ff300 	.word	0x066ff300

0800217c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_TIM_Base_MspInit+0x68>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10c      	bne.n	80021a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218e:	4b16      	ldr	r3, [pc, #88]	; (80021e8 <HAL_TIM_Base_MspInit+0x6c>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	4a15      	ldr	r2, [pc, #84]	; (80021e8 <HAL_TIM_Base_MspInit+0x6c>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	6453      	str	r3, [r2, #68]	; 0x44
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <HAL_TIM_Base_MspInit+0x6c>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021a6:	e018      	b.n	80021da <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM2)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b0:	d113      	bne.n	80021da <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b2:	4b0d      	ldr	r3, [pc, #52]	; (80021e8 <HAL_TIM_Base_MspInit+0x6c>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_TIM_Base_MspInit+0x6c>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b0a      	ldr	r3, [pc, #40]	; (80021e8 <HAL_TIM_Base_MspInit+0x6c>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021ca:	2200      	movs	r2, #0
 80021cc:	2100      	movs	r1, #0
 80021ce:	201c      	movs	r0, #28
 80021d0:	f000 f9e3 	bl	800259a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021d4:	201c      	movs	r0, #28
 80021d6:	f000 f9fc 	bl	80025d2 <HAL_NVIC_EnableIRQ>
}
 80021da:	bf00      	nop
 80021dc:	3710      	adds	r7, #16
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40010000 	.word	0x40010000
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b088      	sub	sp, #32
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a11      	ldr	r2, [pc, #68]	; (8002250 <HAL_TIM_MspPostInit+0x64>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d11c      	bne.n	8002248 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800220e:	4b11      	ldr	r3, [pc, #68]	; (8002254 <HAL_TIM_MspPostInit+0x68>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a10      	ldr	r2, [pc, #64]	; (8002254 <HAL_TIM_MspPostInit+0x68>)
 8002214:	f043 0310 	orr.w	r3, r3, #16
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <HAL_TIM_MspPostInit+0x68>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0310 	and.w	r3, r3, #16
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800222a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222c:	2302      	movs	r3, #2
 800222e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002238:	2301      	movs	r3, #1
 800223a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800223c:	f107 030c 	add.w	r3, r7, #12
 8002240:	4619      	mov	r1, r3
 8002242:	4805      	ldr	r0, [pc, #20]	; (8002258 <HAL_TIM_MspPostInit+0x6c>)
 8002244:	f000 fd94 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3720      	adds	r7, #32
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40010000 	.word	0x40010000
 8002254:	40023800 	.word	0x40023800
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_TIM_PeriodElapsedCallback>:
  }
}

/* USER CODE BEGIN 1 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
	if (htim == &htim2 && getState() == HOLD){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	4a09      	ldr	r2, [pc, #36]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d10a      	bne.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x26>
 800226c:	f7fe f970 	bl	8000550 <getState>
 8002270:	4603      	mov	r3, r0
 8002272:	2b02      	cmp	r3, #2
 8002274:	d105      	bne.n	8002282 <HAL_TIM_PeriodElapsedCallback+0x26>
		setNextState(CLOSE);
 8002276:	2003      	movs	r0, #3
 8002278:	f7fe f95a 	bl	8000530 <setNextState>
		HAL_TIM_Base_Stop_IT(&htim2);
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x30>)
 800227e:	f004 f9d5 	bl	800662c <HAL_TIM_Base_Stop_IT>
	}
}
 8002282:	bf00      	nop
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	200002ac 	.word	0x200002ac

08002290 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
ldr   sp, =_estack      /* set stack pointer */
 8002290:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002294:	480d      	ldr	r0, [pc, #52]	; (80022cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002296:	490e      	ldr	r1, [pc, #56]	; (80022d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002298:	4a0e      	ldr	r2, [pc, #56]	; (80022d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800229c:	e002      	b.n	80022a4 <LoopCopyDataInit>

0800229e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022a2:	3304      	adds	r3, #4

080022a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a8:	d3f9      	bcc.n	800229e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022aa:	4a0b      	ldr	r2, [pc, #44]	; (80022d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022ac:	4c0b      	ldr	r4, [pc, #44]	; (80022dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022b0:	e001      	b.n	80022b6 <LoopFillZerobss>

080022b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b4:	3204      	adds	r2, #4

080022b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b8:	d3fb      	bcc.n	80022b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022ba:	f7ff fe53 	bl	8001f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022be:	f005 fbcd 	bl	8007a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022c2:	f7ff f89b 	bl	80013fc <main>
  bx  lr    
 80022c6:	4770      	bx	lr
ldr   sp, =_estack      /* set stack pointer */
 80022c8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80022cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022d0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80022d4:	08007b58 	.word	0x08007b58
  ldr r2, =_sbss
 80022d8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80022dc:	200002fc 	.word	0x200002fc

080022e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e0:	e7fe      	b.n	80022e0 <ADC_IRQHandler>

080022e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022e6:	2003      	movs	r0, #3
 80022e8:	f000 f94c 	bl	8002584 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ec:	200f      	movs	r0, #15
 80022ee:	f000 f805 	bl	80022fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022f2:	f7ff fd47 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022f6:	2300      	movs	r3, #0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_InitTick+0x54>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_InitTick+0x58>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	4619      	mov	r1, r3
 800230e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002312:	fbb3 f3f1 	udiv	r3, r3, r1
 8002316:	fbb2 f3f3 	udiv	r3, r2, r3
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f967 	bl	80025ee <HAL_SYSTICK_Config>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00e      	b.n	8002348 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b0f      	cmp	r3, #15
 800232e:	d80a      	bhi.n	8002346 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002330:	2200      	movs	r2, #0
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f000 f92f 	bl	800259a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800233c:	4a06      	ldr	r2, [pc, #24]	; (8002358 <HAL_InitTick+0x5c>)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002342:	2300      	movs	r3, #0
 8002344:	e000      	b.n	8002348 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
}
 8002348:	4618      	mov	r0, r3
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	2000004c 	.word	0x2000004c
 8002354:	20000054 	.word	0x20000054
 8002358:	20000050 	.word	0x20000050

0800235c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002360:	4b06      	ldr	r3, [pc, #24]	; (800237c <HAL_IncTick+0x20>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	461a      	mov	r2, r3
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_IncTick+0x24>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4413      	add	r3, r2
 800236c:	4a04      	ldr	r2, [pc, #16]	; (8002380 <HAL_IncTick+0x24>)
 800236e:	6013      	str	r3, [r2, #0]
}
 8002370:	bf00      	nop
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	20000054 	.word	0x20000054
 8002380:	200002f8 	.word	0x200002f8

08002384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return uwTick;
 8002388:	4b03      	ldr	r3, [pc, #12]	; (8002398 <HAL_GetTick+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	200002f8 	.word	0x200002f8

0800239c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023a4:	f7ff ffee 	bl	8002384 <HAL_GetTick>
 80023a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023b4:	d005      	beq.n	80023c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_Delay+0x44>)
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	4413      	add	r3, r2
 80023c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023c2:	bf00      	nop
 80023c4:	f7ff ffde 	bl	8002384 <HAL_GetTick>
 80023c8:	4602      	mov	r2, r0
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	68fa      	ldr	r2, [r7, #12]
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d8f7      	bhi.n	80023c4 <HAL_Delay+0x28>
  {
  }
}
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	20000054 	.word	0x20000054

080023e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <__NVIC_SetPriorityGrouping+0x40>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002400:	4013      	ands	r3, r2
 8002402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <__NVIC_SetPriorityGrouping+0x44>)
 800240e:	4313      	orrs	r3, r2
 8002410:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002412:	4a04      	ldr	r2, [pc, #16]	; (8002424 <__NVIC_SetPriorityGrouping+0x40>)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	60d3      	str	r3, [r2, #12]
}
 8002418:	bf00      	nop
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00
 8002428:	05fa0000 	.word	0x05fa0000

0800242c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002430:	4b04      	ldr	r3, [pc, #16]	; (8002444 <__NVIC_GetPriorityGrouping+0x18>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 0307 	and.w	r3, r3, #7
}
 800243a:	4618      	mov	r0, r3
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	2b00      	cmp	r3, #0
 8002458:	db0b      	blt.n	8002472 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800245a:	79fb      	ldrb	r3, [r7, #7]
 800245c:	f003 021f 	and.w	r2, r3, #31
 8002460:	4907      	ldr	r1, [pc, #28]	; (8002480 <__NVIC_EnableIRQ+0x38>)
 8002462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002466:	095b      	lsrs	r3, r3, #5
 8002468:	2001      	movs	r0, #1
 800246a:	fa00 f202 	lsl.w	r2, r0, r2
 800246e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002472:	bf00      	nop
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000e100 	.word	0xe000e100

08002484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	6039      	str	r1, [r7, #0]
 800248e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002494:	2b00      	cmp	r3, #0
 8002496:	db0a      	blt.n	80024ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	b2da      	uxtb	r2, r3
 800249c:	490c      	ldr	r1, [pc, #48]	; (80024d0 <__NVIC_SetPriority+0x4c>)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	0112      	lsls	r2, r2, #4
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	440b      	add	r3, r1
 80024a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024ac:	e00a      	b.n	80024c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	4908      	ldr	r1, [pc, #32]	; (80024d4 <__NVIC_SetPriority+0x50>)
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	f003 030f 	and.w	r3, r3, #15
 80024ba:	3b04      	subs	r3, #4
 80024bc:	0112      	lsls	r2, r2, #4
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	440b      	add	r3, r1
 80024c2:	761a      	strb	r2, [r3, #24]
}
 80024c4:	bf00      	nop
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	e000e100 	.word	0xe000e100
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f1c3 0307 	rsb	r3, r3, #7
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	bf28      	it	cs
 80024f6:	2304      	movcs	r3, #4
 80024f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3304      	adds	r3, #4
 80024fe:	2b06      	cmp	r3, #6
 8002500:	d902      	bls.n	8002508 <NVIC_EncodePriority+0x30>
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	3b03      	subs	r3, #3
 8002506:	e000      	b.n	800250a <NVIC_EncodePriority+0x32>
 8002508:	2300      	movs	r3, #0
 800250a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800250c:	f04f 32ff 	mov.w	r2, #4294967295
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	fa02 f303 	lsl.w	r3, r2, r3
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	401a      	ands	r2, r3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002520:	f04f 31ff 	mov.w	r1, #4294967295
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	fa01 f303 	lsl.w	r3, r1, r3
 800252a:	43d9      	mvns	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	4313      	orrs	r3, r2
         );
}
 8002532:	4618      	mov	r0, r3
 8002534:	3724      	adds	r7, #36	; 0x24
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
	...

08002540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3b01      	subs	r3, #1
 800254c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002550:	d301      	bcc.n	8002556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002552:	2301      	movs	r3, #1
 8002554:	e00f      	b.n	8002576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002556:	4a0a      	ldr	r2, [pc, #40]	; (8002580 <SysTick_Config+0x40>)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3b01      	subs	r3, #1
 800255c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800255e:	210f      	movs	r1, #15
 8002560:	f04f 30ff 	mov.w	r0, #4294967295
 8002564:	f7ff ff8e 	bl	8002484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <SysTick_Config+0x40>)
 800256a:	2200      	movs	r2, #0
 800256c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800256e:	4b04      	ldr	r3, [pc, #16]	; (8002580 <SysTick_Config+0x40>)
 8002570:	2207      	movs	r2, #7
 8002572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	e000e010 	.word	0xe000e010

08002584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff29 	bl	80023e4 <__NVIC_SetPriorityGrouping>
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800259a:	b580      	push	{r7, lr}
 800259c:	b086      	sub	sp, #24
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025ac:	f7ff ff3e 	bl	800242c <__NVIC_GetPriorityGrouping>
 80025b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	6978      	ldr	r0, [r7, #20]
 80025b8:	f7ff ff8e 	bl	80024d8 <NVIC_EncodePriority>
 80025bc:	4602      	mov	r2, r0
 80025be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff5d 	bl	8002484 <__NVIC_SetPriority>
}
 80025ca:	bf00      	nop
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d2:	b580      	push	{r7, lr}
 80025d4:	b082      	sub	sp, #8
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	4603      	mov	r3, r0
 80025da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7ff ff31 	bl	8002448 <__NVIC_EnableIRQ>
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b082      	sub	sp, #8
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ffa2 	bl	8002540 <SysTick_Config>
 80025fc:	4603      	mov	r3, r0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
	...

08002608 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b086      	sub	sp, #24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002614:	f7ff feb6 	bl	8002384 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d101      	bne.n	8002624 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e099      	b.n	8002758 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2202      	movs	r2, #2
 8002628:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2200      	movs	r2, #0
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0201 	bic.w	r2, r2, #1
 8002642:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002644:	e00f      	b.n	8002666 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002646:	f7ff fe9d 	bl	8002384 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	2b05      	cmp	r3, #5
 8002652:	d908      	bls.n	8002666 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2220      	movs	r2, #32
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e078      	b.n	8002758 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1e8      	bne.n	8002646 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	4b38      	ldr	r3, [pc, #224]	; (8002760 <HAL_DMA_Init+0x158>)
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002692:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a1b      	ldr	r3, [r3, #32]
 80026b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d107      	bne.n	80026d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	4313      	orrs	r3, r2
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0307 	bic.w	r3, r3, #7
 80026e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d117      	bne.n	800272a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fe:	697a      	ldr	r2, [r7, #20]
 8002700:	4313      	orrs	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00e      	beq.n	800272a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f000 fab3 	bl	8002c78 <DMA_CheckFifoParam>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2240      	movs	r2, #64	; 0x40
 800271c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002726:	2301      	movs	r3, #1
 8002728:	e016      	b.n	8002758 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 fa6a 	bl	8002c0c <DMA_CalcBaseAndBitshift>
 8002738:	4603      	mov	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	223f      	movs	r2, #63	; 0x3f
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	e010803f 	.word	0xe010803f

08002764 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_DMA_Start_IT+0x26>
 8002786:	2302      	movs	r3, #2
 8002788:	e048      	b.n	800281c <HAL_DMA_Start_IT+0xb8>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002798:	b2db      	uxtb	r3, r3
 800279a:	2b01      	cmp	r3, #1
 800279c:	d137      	bne.n	800280e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f9fc 	bl	8002bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027bc:	223f      	movs	r2, #63	; 0x3f
 80027be:	409a      	lsls	r2, r3
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f042 0216 	orr.w	r2, r2, #22
 80027d2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027e2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0208 	orr.w	r2, r2, #8
 80027fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f042 0201 	orr.w	r2, r2, #1
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	e005      	b.n	800281a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800281a:	7dfb      	ldrb	r3, [r7, #23]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3718      	adds	r7, #24
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d004      	beq.n	8002842 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2280      	movs	r2, #128	; 0x80
 800283c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e00c      	b.n	800285c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2205      	movs	r2, #5
 8002846:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f022 0201 	bic.w	r2, r2, #1
 8002858:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800285a:	2300      	movs	r3, #0
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002870:	2300      	movs	r3, #0
 8002872:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002874:	4b92      	ldr	r3, [pc, #584]	; (8002ac0 <HAL_DMA_IRQHandler+0x258>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a92      	ldr	r2, [pc, #584]	; (8002ac4 <HAL_DMA_IRQHandler+0x25c>)
 800287a:	fba2 2303 	umull	r2, r3, r2, r3
 800287e:	0a9b      	lsrs	r3, r3, #10
 8002880:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	2208      	movs	r2, #8
 8002894:	409a      	lsls	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4013      	ands	r3, r2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d01a      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d013      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f022 0204 	bic.w	r2, r2, #4
 80028ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c0:	2208      	movs	r2, #8
 80028c2:	409a      	lsls	r2, r3
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028cc:	f043 0201 	orr.w	r2, r3, #1
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d8:	2201      	movs	r2, #1
 80028da:	409a      	lsls	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4013      	ands	r3, r2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2201      	movs	r2, #1
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002902:	f043 0202 	orr.w	r2, r3, #2
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2204      	movs	r2, #4
 8002910:	409a      	lsls	r2, r3
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d012      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0302 	and.w	r3, r3, #2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00b      	beq.n	8002940 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	2204      	movs	r2, #4
 800292e:	409a      	lsls	r2, r3
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002938:	f043 0204 	orr.w	r2, r3, #4
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002944:	2210      	movs	r2, #16
 8002946:	409a      	lsls	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4013      	ands	r3, r2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d043      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0308 	and.w	r3, r3, #8
 800295a:	2b00      	cmp	r3, #0
 800295c:	d03c      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002962:	2210      	movs	r2, #16
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d018      	beq.n	80029aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d108      	bne.n	8002998 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	2b00      	cmp	r3, #0
 800298c:	d024      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	4798      	blx	r3
 8002996:	e01f      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	4798      	blx	r3
 80029a8:	e016      	b.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0208 	bic.w	r2, r2, #8
 80029c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029dc:	2220      	movs	r2, #32
 80029de:	409a      	lsls	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	f000 808e 	beq.w	8002b06 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0310 	and.w	r3, r3, #16
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 8086 	beq.w	8002b06 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029fe:	2220      	movs	r2, #32
 8002a00:	409a      	lsls	r2, r3
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d136      	bne.n	8002a80 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0216 	bic.w	r2, r2, #22
 8002a20:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695a      	ldr	r2, [r3, #20]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a30:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d103      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x1da>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0208 	bic.w	r2, r2, #8
 8002a50:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a56:	223f      	movs	r2, #63	; 0x3f
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d07d      	beq.n	8002b72 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
        }
        return;
 8002a7e:	e078      	b.n	8002b72 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01c      	beq.n	8002ac8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d108      	bne.n	8002aae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d030      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
 8002aac:	e02b      	b.n	8002b06 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d027      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
 8002abe:	e022      	b.n	8002b06 <HAL_DMA_IRQHandler+0x29e>
 8002ac0:	2000004c 	.word	0x2000004c
 8002ac4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10f      	bne.n	8002af6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 0210 	bic.w	r2, r2, #16
 8002ae4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d032      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d022      	beq.n	8002b60 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2205      	movs	r2, #5
 8002b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	3301      	adds	r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d307      	bcc.n	8002b4e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1f2      	bne.n	8002b32 <HAL_DMA_IRQHandler+0x2ca>
 8002b4c:	e000      	b.n	8002b50 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b4e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d005      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	4798      	blx	r3
 8002b70:	e000      	b.n	8002b74 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002b72:	bf00      	nop
    }
  }
}
 8002b74:	3718      	adds	r7, #24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop

08002b7c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	370c      	adds	r7, #12
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bae:	4770      	bx	lr

08002bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60f8      	str	r0, [r7, #12]
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	2b40      	cmp	r3, #64	; 0x40
 8002bdc:	d108      	bne.n	8002bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bee:	e007      	b.n	8002c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	60da      	str	r2, [r3, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	3b10      	subs	r3, #16
 8002c1c:	4a13      	ldr	r2, [pc, #76]	; (8002c6c <DMA_CalcBaseAndBitshift+0x60>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	091b      	lsrs	r3, r3, #4
 8002c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c26:	4a12      	ldr	r2, [pc, #72]	; (8002c70 <DMA_CalcBaseAndBitshift+0x64>)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4413      	add	r3, r2
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d908      	bls.n	8002c4c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <DMA_CalcBaseAndBitshift+0x68>)
 8002c42:	4013      	ands	r3, r2
 8002c44:	1d1a      	adds	r2, r3, #4
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	659a      	str	r2, [r3, #88]	; 0x58
 8002c4a:	e006      	b.n	8002c5a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <DMA_CalcBaseAndBitshift+0x68>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	aaaaaaab 	.word	0xaaaaaaab
 8002c70:	08007b40 	.word	0x08007b40
 8002c74:	fffffc00 	.word	0xfffffc00

08002c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d11f      	bne.n	8002cd2 <DMA_CheckFifoParam+0x5a>
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d856      	bhi.n	8002d46 <DMA_CheckFifoParam+0xce>
 8002c98:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <DMA_CheckFifoParam+0x28>)
 8002c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c9e:	bf00      	nop
 8002ca0:	08002cb1 	.word	0x08002cb1
 8002ca4:	08002cc3 	.word	0x08002cc3
 8002ca8:	08002cb1 	.word	0x08002cb1
 8002cac:	08002d47 	.word	0x08002d47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d046      	beq.n	8002d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cc0:	e043      	b.n	8002d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cca:	d140      	bne.n	8002d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e03d      	b.n	8002d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cda:	d121      	bne.n	8002d20 <DMA_CheckFifoParam+0xa8>
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d837      	bhi.n	8002d52 <DMA_CheckFifoParam+0xda>
 8002ce2:	a201      	add	r2, pc, #4	; (adr r2, 8002ce8 <DMA_CheckFifoParam+0x70>)
 8002ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce8:	08002cf9 	.word	0x08002cf9
 8002cec:	08002cff 	.word	0x08002cff
 8002cf0:	08002cf9 	.word	0x08002cf9
 8002cf4:	08002d11 	.word	0x08002d11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002cfc:	e030      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d025      	beq.n	8002d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0e:	e022      	b.n	8002d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d18:	d11f      	bne.n	8002d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d1e:	e01c      	b.n	8002d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d903      	bls.n	8002d2e <DMA_CheckFifoParam+0xb6>
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d003      	beq.n	8002d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d2c:	e018      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	73fb      	strb	r3, [r7, #15]
      break;
 8002d32:	e015      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	73fb      	strb	r3, [r7, #15]
      break;
 8002d44:	e00b      	b.n	8002d5e <DMA_CheckFifoParam+0xe6>
      break;
 8002d46:	bf00      	nop
 8002d48:	e00a      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4a:	bf00      	nop
 8002d4c:	e008      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d4e:	bf00      	nop
 8002d50:	e006      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d52:	bf00      	nop
 8002d54:	e004      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d56:	bf00      	nop
 8002d58:	e002      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	61fb      	str	r3, [r7, #28]
 8002d8e:	e175      	b.n	800307c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d90:	2201      	movs	r2, #1
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	fa02 f303 	lsl.w	r3, r2, r3
 8002d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	4013      	ands	r3, r2
 8002da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	f040 8164 	bne.w	8003076 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d005      	beq.n	8002dc6 <HAL_GPIO_Init+0x56>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f003 0303 	and.w	r3, r3, #3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d130      	bne.n	8002e28 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	2203      	movs	r2, #3
 8002dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd6:	43db      	mvns	r3, r3
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 0201 	and.w	r2, r3, #1
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d017      	beq.n	8002e64 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 0303 	and.w	r3, r3, #3
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d123      	bne.n	8002eb8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	08da      	lsrs	r2, r3, #3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3208      	adds	r2, #8
 8002e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	220f      	movs	r2, #15
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4013      	ands	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	691a      	ldr	r2, [r3, #16]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	3208      	adds	r2, #8
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	2203      	movs	r2, #3
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	69ba      	ldr	r2, [r7, #24]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0203 	and.w	r2, r3, #3
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	005b      	lsls	r3, r3, #1
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f000 80be 	beq.w	8003076 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002efa:	4b66      	ldr	r3, [pc, #408]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a65      	ldr	r2, [pc, #404]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b63      	ldr	r3, [pc, #396]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f12:	4a61      	ldr	r2, [pc, #388]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a58      	ldr	r2, [pc, #352]	; (800309c <HAL_GPIO_Init+0x32c>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d037      	beq.n	8002fae <HAL_GPIO_Init+0x23e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a57      	ldr	r2, [pc, #348]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d031      	beq.n	8002faa <HAL_GPIO_Init+0x23a>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a56      	ldr	r2, [pc, #344]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_GPIO_Init+0x236>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a55      	ldr	r2, [pc, #340]	; (80030a8 <HAL_GPIO_Init+0x338>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d025      	beq.n	8002fa2 <HAL_GPIO_Init+0x232>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a54      	ldr	r2, [pc, #336]	; (80030ac <HAL_GPIO_Init+0x33c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <HAL_GPIO_Init+0x22e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a53      	ldr	r2, [pc, #332]	; (80030b0 <HAL_GPIO_Init+0x340>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x22a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x344>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x348>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x34c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x350>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f86:	2309      	movs	r3, #9
 8002f88:	e012      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8a:	230a      	movs	r3, #10
 8002f8c:	e010      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f8e:	2308      	movs	r3, #8
 8002f90:	e00e      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f92:	2307      	movs	r3, #7
 8002f94:	e00c      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f96:	2306      	movs	r3, #6
 8002f98:	e00a      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9a:	2305      	movs	r3, #5
 8002f9c:	e008      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002f9e:	2304      	movs	r3, #4
 8002fa0:	e006      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e004      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e002      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002faa:	2301      	movs	r3, #1
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x240>
 8002fae:	2300      	movs	r3, #0
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	f002 0203 	and.w	r2, r2, #3
 8002fb6:	0092      	lsls	r2, r2, #2
 8002fb8:	4093      	lsls	r3, r2
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002fc0:	4935      	ldr	r1, [pc, #212]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	089b      	lsrs	r3, r3, #2
 8002fc6:	3302      	adds	r3, #2
 8002fc8:	69ba      	ldr	r2, [r7, #24]
 8002fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fce:	4b3d      	ldr	r3, [pc, #244]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ff8:	4b32      	ldr	r3, [pc, #200]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	43db      	mvns	r3, r3
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	4013      	ands	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800301c:	4a29      	ldr	r2, [pc, #164]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003022:	4b28      	ldr	r3, [pc, #160]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	43db      	mvns	r3, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4013      	ands	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800304c:	4b1d      	ldr	r3, [pc, #116]	; (80030c4 <HAL_GPIO_Init+0x354>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003070:	4a14      	ldr	r2, [pc, #80]	; (80030c4 <HAL_GPIO_Init+0x354>)
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	3301      	adds	r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0f      	cmp	r3, #15
 8003080:	f67f ae86 	bls.w	8002d90 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3724      	adds	r7, #36	; 0x24
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	40013800 	.word	0x40013800
 800309c:	40020000 	.word	0x40020000
 80030a0:	40020400 	.word	0x40020400
 80030a4:	40020800 	.word	0x40020800
 80030a8:	40020c00 	.word	0x40020c00
 80030ac:	40021000 	.word	0x40021000
 80030b0:	40021400 	.word	0x40021400
 80030b4:	40021800 	.word	0x40021800
 80030b8:	40021c00 	.word	0x40021c00
 80030bc:	40022000 	.word	0x40022000
 80030c0:	40022400 	.word	0x40022400
 80030c4:	40013c00 	.word	0x40013c00

080030c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	887b      	ldrh	r3, [r7, #2]
 80030da:	4013      	ands	r3, r2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d002      	beq.n	80030e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030e0:	2301      	movs	r3, #1
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e001      	b.n	80030ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	460b      	mov	r3, r1
 8003102:	807b      	strh	r3, [r7, #2]
 8003104:	4613      	mov	r3, r2
 8003106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003108:	787b      	ldrb	r3, [r7, #1]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003114:	e003      	b.n	800311e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003116:	887b      	ldrh	r3, [r7, #2]
 8003118:	041a      	lsls	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	619a      	str	r2, [r3, #24]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	4603      	mov	r3, r0
 8003134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003136:	4b08      	ldr	r3, [pc, #32]	; (8003158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003138:	695a      	ldr	r2, [r3, #20]
 800313a:	88fb      	ldrh	r3, [r7, #6]
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d006      	beq.n	8003150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003142:	4a05      	ldr	r2, [pc, #20]	; (8003158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003144:	88fb      	ldrh	r3, [r7, #6]
 8003146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	4618      	mov	r0, r3
 800314c:	f7fe fea8 	bl	8001ea0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003150:	bf00      	nop
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40013c00 	.word	0x40013c00

0800315c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e07f      	b.n	800326e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d106      	bne.n	8003188 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7fd ff3a 	bl	8000ffc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2224      	movs	r2, #36	; 0x24
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0201 	bic.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031ac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689a      	ldr	r2, [r3, #8]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031bc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d107      	bne.n	80031d6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031d2:	609a      	str	r2, [r3, #8]
 80031d4:	e006      	b.n	80031e4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031e2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d104      	bne.n	80031f6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_I2C_Init+0x11c>)
 8003202:	430b      	orrs	r3, r1
 8003204:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003214:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	691a      	ldr	r2, [r3, #16]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	69d9      	ldr	r1, [r3, #28]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a1a      	ldr	r2, [r3, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f042 0201 	orr.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800326c:	2300      	movs	r3, #0
}
 800326e:	4618      	mov	r0, r3
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	02008000 	.word	0x02008000

0800327c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af02      	add	r7, sp, #8
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	461a      	mov	r2, r3
 8003288:	460b      	mov	r3, r1
 800328a:	817b      	strh	r3, [r7, #10]
 800328c:	4613      	mov	r3, r2
 800328e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b20      	cmp	r3, #32
 800329a:	f040 80cd 	bne.w	8003438 <HAL_I2C_Master_Transmit_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032ac:	d101      	bne.n	80032b2 <HAL_I2C_Master_Transmit_DMA+0x36>
    {
      return HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	e0c3      	b.n	800343a <HAL_I2C_Master_Transmit_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2C_Master_Transmit_DMA+0x44>
 80032bc:	2302      	movs	r3, #2
 80032be:	e0bc      	b.n	800343a <HAL_I2C_Master_Transmit_DMA+0x1be>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2221      	movs	r2, #33	; 0x21
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2210      	movs	r2, #16
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	893a      	ldrh	r2, [r7, #8]
 80032e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4a55      	ldr	r2, [pc, #340]	; (8003444 <HAL_I2C_Master_Transmit_DMA+0x1c8>)
 80032ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	4a55      	ldr	r2, [pc, #340]	; (8003448 <HAL_I2C_Master_Transmit_DMA+0x1cc>)
 80032f4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2bff      	cmp	r3, #255	; 0xff
 80032fe:	d906      	bls.n	800330e <HAL_I2C_Master_Transmit_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	22ff      	movs	r2, #255	; 0xff
 8003304:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003306:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800330a:	617b      	str	r3, [r7, #20]
 800330c:	e007      	b.n	800331e <HAL_I2C_Master_Transmit_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003318:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800331c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003322:	2b00      	cmp	r3, #0
 8003324:	d070      	beq.n	8003408 <HAL_I2C_Master_Transmit_DMA+0x18c>
    {
      if (hi2c->hdmatx != NULL)
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332a:	2b00      	cmp	r3, #0
 800332c:	d020      	beq.n	8003370 <HAL_I2C_Master_Transmit_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	4a46      	ldr	r2, [pc, #280]	; (800344c <HAL_I2C_Master_Transmit_DMA+0x1d0>)
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	4a45      	ldr	r2, [pc, #276]	; (8003450 <HAL_I2C_Master_Transmit_DMA+0x1d4>)
 800333c:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	2200      	movs	r2, #0
 800334c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3328      	adds	r3, #40	; 0x28
 800335a:	461a      	mov	r2, r3
                                         hi2c->XferSize);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8003360:	f7ff fa00 	bl	8002764 <HAL_DMA_Start_IT>
 8003364:	4603      	mov	r3, r0
 8003366:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d138      	bne.n	80033e0 <HAL_I2C_Master_Transmit_DMA+0x164>
 800336e:	e013      	b.n	8003398 <HAL_I2C_Master_Transmit_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003384:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2200      	movs	r2, #0
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e050      	b.n	800343a <HAL_I2C_Master_Transmit_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	b2da      	uxtb	r2, r3
 800339e:	8979      	ldrh	r1, [r7, #10]
 80033a0:	4b2c      	ldr	r3, [pc, #176]	; (8003454 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f001 f9d6 	bl	8004758 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b0:	b29a      	uxth	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80033c6:	2110      	movs	r1, #16
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f001 f9f7 	bl	80047bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e029      	b.n	8003434 <HAL_I2C_Master_Transmit_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f4:	f043 0210 	orr.w	r2, r3, #16
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e018      	b.n	800343a <HAL_I2C_Master_Transmit_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a13      	ldr	r2, [pc, #76]	; (8003458 <HAL_I2C_Master_Transmit_DMA+0x1dc>)
 800340c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	b2da      	uxtb	r2, r3
 8003414:	8979      	ldrh	r1, [r7, #10]
 8003416:	4b0f      	ldr	r3, [pc, #60]	; (8003454 <HAL_I2C_Master_Transmit_DMA+0x1d8>)
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f001 f99a 	bl	8004758 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800342c:	2101      	movs	r1, #1
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f001 f9c4 	bl	80047bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2C_Master_Transmit_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	ffff0000 	.word	0xffff0000
 8003448:	080039a3 	.word	0x080039a3
 800344c:	08004613 	.word	0x08004613
 8003450:	080046a9 	.word	0x080046a9
 8003454:	80002000 	.word	0x80002000
 8003458:	0800354d 	.word	0x0800354d

0800345c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	699b      	ldr	r3, [r3, #24]
 800346a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003478:	2b00      	cmp	r3, #0
 800347a:	d005      	beq.n	8003488 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	68f9      	ldr	r1, [r7, #12]
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
  }
}
 8003488:	bf00      	nop
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80034ac:	bf00      	nop
 80034ae:	370c      	adds	r7, #12
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr

080034cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	460b      	mov	r3, r1
 80034d6:	70fb      	strb	r3, [r7, #3]
 80034d8:	4613      	mov	r3, r2
 80034da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003562:	2b01      	cmp	r3, #1
 8003564:	d101      	bne.n	800356a <I2C_Master_ISR_IT+0x1e>
 8003566:	2302      	movs	r3, #2
 8003568:	e114      	b.n	8003794 <I2C_Master_ISR_IT+0x248>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	091b      	lsrs	r3, r3, #4
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d013      	beq.n	80035a6 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	091b      	lsrs	r3, r3, #4
 8003582:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2210      	movs	r2, #16
 8003590:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003596:	f043 0204 	orr.w	r2, r3, #4
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f001 f813 	bl	80045ca <I2C_Flush_TXDR>
 80035a4:	e0e1      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035a6:	697b      	ldr	r3, [r7, #20]
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d023      	beq.n	80035fa <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	089b      	lsrs	r3, r3, #2
 80035b6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d01d      	beq.n	80035fa <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	b2d2      	uxtb	r2, r2
 80035d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e2:	3b01      	subs	r3, #1
 80035e4:	b29a      	uxth	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	3b01      	subs	r3, #1
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035f8:	e0b7      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b00      	cmp	r3, #0
 8003604:	d01e      	beq.n	8003644 <I2C_Master_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800360e:	2b00      	cmp	r3, #0
 8003610:	d018      	beq.n	8003644 <I2C_Master_ISR_IT+0xf8>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	781a      	ldrb	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29b      	uxth	r3, r3
 800363a:	3b01      	subs	r3, #1
 800363c:	b29a      	uxth	r2, r3
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003642:	e092      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	09db      	lsrs	r3, r3, #7
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d05d      	beq.n	800370c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	099b      	lsrs	r3, r3, #6
 8003654:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003658:	2b00      	cmp	r3, #0
 800365a:	d057      	beq.n	800370c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d040      	beq.n	80036e8 <I2C_Master_ISR_IT+0x19c>
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366a:	2b00      	cmp	r3, #0
 800366c:	d13c      	bne.n	80036e8 <I2C_Master_ISR_IT+0x19c>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	b29b      	uxth	r3, r3
 8003676:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800367a:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003680:	b29b      	uxth	r3, r3
 8003682:	2bff      	cmp	r3, #255	; 0xff
 8003684:	d90e      	bls.n	80036a4 <I2C_Master_ISR_IT+0x158>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	22ff      	movs	r2, #255	; 0xff
 800368a:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	b2da      	uxtb	r2, r3
 8003692:	8a79      	ldrh	r1, [r7, #18]
 8003694:	2300      	movs	r3, #0
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f001 f85b 	bl	8004758 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036a2:	e032      	b.n	800370a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a8:	b29a      	uxth	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b6:	d00b      	beq.n	80036d0 <I2C_Master_ISR_IT+0x184>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	8a79      	ldrh	r1, [r7, #18]
 80036c4:	2000      	movs	r0, #0
 80036c6:	9000      	str	r0, [sp, #0]
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f001 f845 	bl	8004758 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036ce:	e01c      	b.n	800370a <I2C_Master_ISR_IT+0x1be>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	8a79      	ldrh	r1, [r7, #18]
 80036d8:	2300      	movs	r3, #0
 80036da:	9300      	str	r3, [sp, #0]
 80036dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f001 f839 	bl	8004758 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036e6:	e010      	b.n	800370a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036f6:	d003      	beq.n	8003700 <I2C_Master_ISR_IT+0x1b4>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 fba9 	bl	8003e50 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036fe:	e034      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003700:	2140      	movs	r1, #64	; 0x40
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fe6a 	bl	80043dc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003708:	e02f      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
 800370a:	e02e      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	099b      	lsrs	r3, r3, #6
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d028      	beq.n	800376a <I2C_Master_ISR_IT+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	099b      	lsrs	r3, r3, #6
 800371c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003720:	2b00      	cmp	r3, #0
 8003722:	d022      	beq.n	800376a <I2C_Master_ISR_IT+0x21e>
  {
    if (hi2c->XferCount == 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800373c:	d015      	beq.n	800376a <I2C_Master_ISR_IT+0x21e>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003742:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003746:	d108      	bne.n	800375a <I2C_Master_ISR_IT+0x20e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	e007      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 fb78 	bl	8003e50 <I2C_ITMasterSeqCplt>
 8003760:	e003      	b.n	800376a <I2C_Master_ISR_IT+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003762:	2140      	movs	r1, #64	; 0x40
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 fe39 	bl	80043dc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d009      	beq.n	800378a <I2C_Master_ISR_IT+0x23e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800377e:	2b00      	cmp	r3, #0
 8003780:	d003      	beq.n	800378a <I2C_Master_ISR_IT+0x23e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003782:	6979      	ldr	r1, [r7, #20]
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 fbff 	bl	8003f88 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003792:	2300      	movs	r3, #0
}
 8003794:	4618      	mov	r0, r3
 8003796:	3718      	adds	r7, #24
 8003798:	46bd      	mov	sp, r7
 800379a:	bd80      	pop	{r7, pc}

0800379c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	60f8      	str	r0, [r7, #12]
 80037a4:	60b9      	str	r1, [r7, #8]
 80037a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <I2C_Slave_ISR_IT+0x24>
 80037bc:	2302      	movs	r3, #2
 80037be:	e0ec      	b.n	800399a <I2C_Slave_ISR_IT+0x1fe>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	f003 0301 	and.w	r3, r3, #1
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d009      	beq.n	80037e8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	095b      	lsrs	r3, r3, #5
 80037d8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80037e0:	6939      	ldr	r1, [r7, #16]
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fc9a 	bl	800411c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d04d      	beq.n	8003890 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	091b      	lsrs	r3, r3, #4
 80037f8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d047      	beq.n	8003890 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d128      	bne.n	800385c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b28      	cmp	r3, #40	; 0x28
 8003814:	d108      	bne.n	8003828 <I2C_Slave_ISR_IT+0x8c>
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800381c:	d104      	bne.n	8003828 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800381e:	6939      	ldr	r1, [r7, #16]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fd85 	bl	8004330 <I2C_ITListenCplt>
 8003826:	e032      	b.n	800388e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800382e:	b2db      	uxtb	r3, r3
 8003830:	2b29      	cmp	r3, #41	; 0x29
 8003832:	d10e      	bne.n	8003852 <I2C_Slave_ISR_IT+0xb6>
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800383a:	d00a      	beq.n	8003852 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2210      	movs	r2, #16
 8003842:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fec0 	bl	80045ca <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fb3d 	bl	8003eca <I2C_ITSlaveSeqCplt>
 8003850:	e01d      	b.n	800388e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2210      	movs	r2, #16
 8003858:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800385a:	e096      	b.n	800398a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	2210      	movs	r2, #16
 8003862:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	f043 0204 	orr.w	r2, r3, #4
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d004      	beq.n	8003880 <I2C_Slave_ISR_IT+0xe4>
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800387c:	f040 8085 	bne.w	800398a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003884:	4619      	mov	r1, r3
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fda8 	bl	80043dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800388c:	e07d      	b.n	800398a <I2C_Slave_ISR_IT+0x1ee>
 800388e:	e07c      	b.n	800398a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	089b      	lsrs	r3, r3, #2
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	d030      	beq.n	80038fe <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	089b      	lsrs	r3, r3, #2
 80038a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d02a      	beq.n	80038fe <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d018      	beq.n	80038e4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d14f      	bne.n	800398e <I2C_Slave_ISR_IT+0x1f2>
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038f4:	d04b      	beq.n	800398e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fae7 	bl	8003eca <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80038fc:	e047      	b.n	800398e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	08db      	lsrs	r3, r3, #3
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003912:	2b00      	cmp	r3, #0
 8003914:	d004      	beq.n	8003920 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fa15 	bl	8003d48 <I2C_ITAddrCplt>
 800391e:	e037      	b.n	8003990 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d031      	beq.n	8003990 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	085b      	lsrs	r3, r3, #1
 8003930:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003934:	2b00      	cmp	r3, #0
 8003936:	d02b      	beq.n	8003990 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d018      	beq.n	8003974 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	1c5a      	adds	r2, r3, #1
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396a:	3b01      	subs	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	851a      	strh	r2, [r3, #40]	; 0x28
 8003972:	e00d      	b.n	8003990 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800397a:	d002      	beq.n	8003982 <I2C_Slave_ISR_IT+0x1e6>
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 faa1 	bl	8003eca <I2C_ITSlaveSeqCplt>
 8003988:	e002      	b.n	8003990 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800398a:	bf00      	nop
 800398c:	e000      	b.n	8003990 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800398e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80039a2:	b580      	push	{r7, lr}
 80039a4:	b088      	sub	sp, #32
 80039a6:	af02      	add	r7, sp, #8
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <I2C_Master_ISR_DMA+0x1a>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e0e1      	b.n	8003b80 <I2C_Master_ISR_DMA+0x1de>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	091b      	lsrs	r3, r3, #4
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d017      	beq.n	8003a00 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	091b      	lsrs	r3, r3, #4
 80039d4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d011      	beq.n	8003a00 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2210      	movs	r2, #16
 80039e2:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f043 0204 	orr.w	r2, r3, #4
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80039f0:	2120      	movs	r1, #32
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 fee2 	bl	80047bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 fde6 	bl	80045ca <I2C_Flush_TXDR>
 80039fe:	e0ba      	b.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	09db      	lsrs	r3, r3, #7
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d072      	beq.n	8003af2 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	099b      	lsrs	r3, r3, #6
 8003a10:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d06c      	beq.n	8003af2 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a26:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d04e      	beq.n	8003ad0 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a3e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a44:	b29b      	uxth	r3, r3
 8003a46:	2bff      	cmp	r3, #255	; 0xff
 8003a48:	d906      	bls.n	8003a58 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	22ff      	movs	r2, #255	; 0xff
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8003a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a54:	617b      	str	r3, [r7, #20]
 8003a56:	e010      	b.n	8003a7a <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5c:	b29a      	uxth	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6a:	d003      	beq.n	8003a74 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a70:	617b      	str	r3, [r7, #20]
 8003a72:	e002      	b.n	8003a7a <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003a74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a78:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7e:	b2da      	uxtb	r2, r3
 8003a80:	8a79      	ldrh	r1, [r7, #18]
 8003a82:	2300      	movs	r3, #0
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 fe65 	bl	8004758 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b22      	cmp	r3, #34	; 0x22
 8003aaa:	d108      	bne.n	8003abe <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003aba:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003abc:	e05b      	b.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003acc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003ace:	e052      	b.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ade:	d003      	beq.n	8003ae8 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003ae0:	68f8      	ldr	r0, [r7, #12]
 8003ae2:	f000 f9b5 	bl	8003e50 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003ae6:	e046      	b.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003ae8:	2140      	movs	r1, #64	; 0x40
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fc76 	bl	80043dc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003af0:	e041      	b.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d029      	beq.n	8003b52 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d023      	beq.n	8003b52 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d119      	bne.n	8003b48 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b22:	d027      	beq.n	8003b74 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b2c:	d108      	bne.n	8003b40 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003b3e:	e019      	b.n	8003b74 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003b40:	68f8      	ldr	r0, [r7, #12]
 8003b42:	f000 f985 	bl	8003e50 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003b46:	e015      	b.n	8003b74 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b48:	2140      	movs	r1, #64	; 0x40
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fc46 	bl	80043dc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b50:	e010      	b.n	8003b74 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d005      	beq.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003b6a:	68b9      	ldr	r1, [r7, #8]
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa0b 	bl	8003f88 <I2C_ITMasterCplt>
 8003b72:	e000      	b.n	8003b76 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8003b74:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3718      	adds	r7, #24
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b088      	sub	sp, #32
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	60b9      	str	r1, [r7, #8]
 8003b92:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b98:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d101      	bne.n	8003bac <I2C_Slave_ISR_DMA+0x24>
 8003ba8:	2302      	movs	r3, #2
 8003baa:	e0c9      	b.n	8003d40 <I2C_Slave_ISR_DMA+0x1b8>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	095b      	lsrs	r3, r3, #5
 8003bc4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 faa4 	bl	800411c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 809a 	beq.w	8003d16 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 8093 	beq.w	8003d16 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0b9b      	lsrs	r3, r3, #14
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d105      	bne.n	8003c08 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	0bdb      	lsrs	r3, r3, #15
 8003c00:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d07f      	beq.n	8003d08 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	0bdb      	lsrs	r3, r3, #15
 8003c14:	f003 0301 	and.w	r3, r3, #1
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d007      	beq.n	8003c2c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00d      	beq.n	8003c50 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	0b9b      	lsrs	r3, r3, #14
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d128      	bne.n	8003ca8 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b28      	cmp	r3, #40	; 0x28
 8003c60:	d108      	bne.n	8003c74 <I2C_Slave_ISR_DMA+0xec>
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c68:	d104      	bne.n	8003c74 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003c6a:	68b9      	ldr	r1, [r7, #8]
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fb5f 	bl	8004330 <I2C_ITListenCplt>
 8003c72:	e048      	b.n	8003d06 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b29      	cmp	r3, #41	; 0x29
 8003c7e:	d10e      	bne.n	8003c9e <I2C_Slave_ISR_DMA+0x116>
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c86:	d00a      	beq.n	8003c9e <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2210      	movs	r2, #16
 8003c8e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8003c90:	68f8      	ldr	r0, [r7, #12]
 8003c92:	f000 fc9a 	bl	80045ca <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 f917 	bl	8003eca <I2C_ITSlaveSeqCplt>
 8003c9c:	e033      	b.n	8003d06 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2210      	movs	r2, #16
 8003ca4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8003ca6:	e034      	b.n	8003d12 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2210      	movs	r2, #16
 8003cae:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc2:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d003      	beq.n	8003cd2 <I2C_Slave_ISR_DMA+0x14a>
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cd0:	d11f      	bne.n	8003d12 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cd2:	7dfb      	ldrb	r3, [r7, #23]
 8003cd4:	2b21      	cmp	r3, #33	; 0x21
 8003cd6:	d002      	beq.n	8003cde <I2C_Slave_ISR_DMA+0x156>
 8003cd8:	7dfb      	ldrb	r3, [r7, #23]
 8003cda:	2b29      	cmp	r3, #41	; 0x29
 8003cdc:	d103      	bne.n	8003ce6 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2221      	movs	r2, #33	; 0x21
 8003ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce4:	e008      	b.n	8003cf8 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	2b22      	cmp	r3, #34	; 0x22
 8003cea:	d002      	beq.n	8003cf2 <I2C_Slave_ISR_DMA+0x16a>
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	2b2a      	cmp	r3, #42	; 0x2a
 8003cf0:	d102      	bne.n	8003cf8 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2222      	movs	r2, #34	; 0x22
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 fb6c 	bl	80043dc <I2C_ITError>
      if (treatdmanack == 1U)
 8003d04:	e005      	b.n	8003d12 <I2C_Slave_ISR_DMA+0x18a>
 8003d06:	e004      	b.n	8003d12 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2210      	movs	r2, #16
 8003d0e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d10:	e011      	b.n	8003d36 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8003d12:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003d14:	e00f      	b.n	8003d36 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	08db      	lsrs	r3, r3, #3
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d009      	beq.n	8003d36 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	08db      	lsrs	r3, r3, #3
 8003d26:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	68f8      	ldr	r0, [r7, #12]
 8003d32:	f000 f809 	bl	8003d48 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3720      	adds	r7, #32
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d5e:	2b28      	cmp	r3, #40	; 0x28
 8003d60:	d16a      	bne.n	8003e38 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	0c1b      	lsrs	r3, r3, #16
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f003 0301 	and.w	r3, r3, #1
 8003d70:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	0c1b      	lsrs	r3, r3, #16
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d80:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d8e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d9c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d138      	bne.n	8003e18 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003da6:	897b      	ldrh	r3, [r7, #10]
 8003da8:	09db      	lsrs	r3, r3, #7
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	89bb      	ldrh	r3, [r7, #12]
 8003dae:	4053      	eors	r3, r2
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f003 0306 	and.w	r3, r3, #6
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d11c      	bne.n	8003df4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003dba:	897b      	ldrh	r3, [r7, #10]
 8003dbc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dc2:	1c5a      	adds	r2, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d13b      	bne.n	8003e48 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	2208      	movs	r2, #8
 8003ddc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003de6:	89ba      	ldrh	r2, [r7, #12]
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	4619      	mov	r1, r3
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f7ff fb6d 	bl	80034cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003df2:	e029      	b.n	8003e48 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003df4:	893b      	ldrh	r3, [r7, #8]
 8003df6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fd41 	bl	8004884 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e0a:	89ba      	ldrh	r2, [r7, #12]
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff fb5b 	bl	80034cc <HAL_I2C_AddrCallback>
}
 8003e16:	e017      	b.n	8003e48 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fd31 	bl	8004884 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e2a:	89ba      	ldrh	r2, [r7, #12]
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f7ff fb4b 	bl	80034cc <HAL_I2C_AddrCallback>
}
 8003e36:	e007      	b.n	8003e48 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	2208      	movs	r2, #8
 8003e3e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e48:	bf00      	nop
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b21      	cmp	r3, #33	; 0x21
 8003e6a:	d115      	bne.n	8003e98 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2211      	movs	r2, #17
 8003e78:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e80:	2101      	movs	r1, #1
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fcfe 	bl	8004884 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7fd f97f 	bl	8001194 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e96:	e014      	b.n	8003ec2 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2212      	movs	r2, #18
 8003ea4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003eac:	2102      	movs	r1, #2
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 fce8 	bl	8004884 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff fae7 	bl	8003490 <HAL_I2C_MasterRxCpltCallback>
}
 8003ec2:	bf00      	nop
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	0b9b      	lsrs	r3, r3, #14
 8003ee6:	f003 0301 	and.w	r3, r3, #1
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d008      	beq.n	8003f00 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	e00d      	b.n	8003f1c <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	0bdb      	lsrs	r3, r3, #15
 8003f04:	f003 0301 	and.w	r3, r3, #1
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d007      	beq.n	8003f1c <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f1a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b29      	cmp	r3, #41	; 0x29
 8003f26:	d112      	bne.n	8003f4e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2228      	movs	r2, #40	; 0x28
 8003f2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2221      	movs	r2, #33	; 0x21
 8003f34:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f36:	2101      	movs	r1, #1
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 fca3 	bl	8004884 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f7ff faac 	bl	80034a4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f4c:	e017      	b.n	8003f7e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b2a      	cmp	r3, #42	; 0x2a
 8003f58:	d111      	bne.n	8003f7e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2228      	movs	r2, #40	; 0x28
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2222      	movs	r2, #34	; 0x22
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f68:	2102      	movs	r1, #2
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fc8a 	bl	8004884 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fa9d 	bl	80034b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8003f7e:	bf00      	nop
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b21      	cmp	r3, #33	; 0x21
 8003fa8:	d107      	bne.n	8003fba <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003faa:	2101      	movs	r1, #1
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fc69 	bl	8004884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2211      	movs	r2, #17
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8003fb8:	e00c      	b.n	8003fd4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b22      	cmp	r3, #34	; 0x22
 8003fc4:	d106      	bne.n	8003fd4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f000 fc5b 	bl	8004884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2212      	movs	r2, #18
 8003fd2:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	4b4d      	ldr	r3, [pc, #308]	; (8004114 <I2C_ITMasterCplt+0x18c>)
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a4a      	ldr	r2, [pc, #296]	; (8004118 <I2C_ITMasterCplt+0x190>)
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	091b      	lsrs	r3, r3, #4
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d009      	beq.n	8004010 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2210      	movs	r2, #16
 8004002:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004008:	f043 0204 	orr.w	r2, r3, #4
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b60      	cmp	r3, #96	; 0x60
 800401a:	d10b      	bne.n	8004034 <I2C_ITMasterCplt+0xac>
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	089b      	lsrs	r3, r3, #2
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b00      	cmp	r3, #0
 8004026:	d005      	beq.n	8004034 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	b2db      	uxtb	r3, r3
 8004030:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8004032:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fac8 	bl	80045ca <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403e:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d002      	beq.n	8004052 <I2C_ITMasterCplt+0xca>
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d006      	beq.n	8004060 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4619      	mov	r1, r3
 8004058:	6878      	ldr	r0, [r7, #4]
 800405a:	f000 f9bf 	bl	80043dc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800405e:	e054      	b.n	800410a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004066:	b2db      	uxtb	r3, r3
 8004068:	2b21      	cmp	r3, #33	; 0x21
 800406a:	d124      	bne.n	80040b6 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2220      	movs	r2, #32
 8004070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b40      	cmp	r3, #64	; 0x40
 8004084:	d10b      	bne.n	800409e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fa30 	bl	80034fc <HAL_I2C_MemTxCpltCallback>
}
 800409c:	e035      	b.n	800410a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd f870 	bl	8001194 <HAL_I2C_MasterTxCpltCallback>
}
 80040b4:	e029      	b.n	800410a <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	2b22      	cmp	r3, #34	; 0x22
 80040c0:	d123      	bne.n	800410a <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2220      	movs	r2, #32
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040d6:	b2db      	uxtb	r3, r3
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d10b      	bne.n	80040f4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f7ff fa0f 	bl	8003510 <HAL_I2C_MemRxCpltCallback>
}
 80040f2:	e00a      	b.n	800410a <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f7ff f9c3 	bl	8003490 <HAL_I2C_MasterRxCpltCallback>
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	fe00e800 	.word	0xfe00e800
 8004118:	ffff0000 	.word	0xffff0000

0800411c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	2220      	movs	r2, #32
 8004140:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b21      	cmp	r3, #33	; 0x21
 8004146:	d002      	beq.n	800414e <I2C_ITSlaveCplt+0x32>
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b29      	cmp	r3, #41	; 0x29
 800414c:	d108      	bne.n	8004160 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800414e:	f248 0101 	movw	r1, #32769	; 0x8001
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f000 fb96 	bl	8004884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2221      	movs	r2, #33	; 0x21
 800415c:	631a      	str	r2, [r3, #48]	; 0x30
 800415e:	e00d      	b.n	800417c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004160:	7bfb      	ldrb	r3, [r7, #15]
 8004162:	2b22      	cmp	r3, #34	; 0x22
 8004164:	d002      	beq.n	800416c <I2C_ITSlaveCplt+0x50>
 8004166:	7bfb      	ldrb	r3, [r7, #15]
 8004168:	2b2a      	cmp	r3, #42	; 0x2a
 800416a:	d107      	bne.n	800417c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800416c:	f248 0102 	movw	r1, #32770	; 0x8002
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 fb87 	bl	8004884 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2222      	movs	r2, #34	; 0x22
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800418a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6859      	ldr	r1, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b64      	ldr	r3, [pc, #400]	; (8004328 <I2C_ITSlaveCplt+0x20c>)
 8004198:	400b      	ands	r3, r1
 800419a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 fa14 	bl	80045ca <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	0b9b      	lsrs	r3, r3, #14
 80041a6:	f003 0301 	and.w	r3, r3, #1
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d013      	beq.n	80041d6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041bc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d020      	beq.n	8004208 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	b29a      	uxth	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041d4:	e018      	b.n	8004208 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	0bdb      	lsrs	r3, r3, #15
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d012      	beq.n	8004208 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041f0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d006      	beq.n	8004208 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	b29a      	uxth	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f023 0304 	bic.w	r3, r3, #4
 800421a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	1c5a      	adds	r2, r3, #1
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	2b00      	cmp	r3, #0
 800423a:	d00c      	beq.n	8004256 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800427e:	2b00      	cmp	r3, #0
 8004280:	d010      	beq.n	80042a4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	4619      	mov	r1, r3
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f000 f8a7 	bl	80043dc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b28      	cmp	r3, #40	; 0x28
 8004298:	d141      	bne.n	800431e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800429a:	6979      	ldr	r1, [r7, #20]
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f847 	bl	8004330 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042a2:	e03c      	b.n	800431e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ac:	d014      	beq.n	80042d8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fe0b 	bl	8003eca <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a1d      	ldr	r2, [pc, #116]	; (800432c <I2C_ITSlaveCplt+0x210>)
 80042b8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f7ff f909 	bl	80034e8 <HAL_I2C_ListenCpltCallback>
}
 80042d6:	e022      	b.n	800431e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b22      	cmp	r3, #34	; 0x22
 80042e2:	d10e      	bne.n	8004302 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff f8dc 	bl	80034b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8004300:	e00d      	b.n	800431e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff f8c3 	bl	80034a4 <HAL_I2C_SlaveTxCpltCallback>
}
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	fe00e800 	.word	0xfe00e800
 800432c:	ffff0000 	.word	0xffff0000

08004330 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a26      	ldr	r2, [pc, #152]	; (80043d8 <I2C_ITListenCplt+0xa8>)
 800433e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	089b      	lsrs	r3, r3, #2
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d022      	beq.n	80043ae <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d012      	beq.n	80043ae <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	3b01      	subs	r3, #1
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a6:	f043 0204 	orr.w	r2, r3, #4
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80043ae:	f248 0103 	movw	r1, #32771	; 0x8003
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fa66 	bl	8004884 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2210      	movs	r2, #16
 80043be:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7ff f88d 	bl	80034e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80043ce:	bf00      	nop
 80043d0:	3708      	adds	r7, #8
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	ffff0000 	.word	0xffff0000

080043dc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043ec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a5d      	ldr	r2, [pc, #372]	; (8004570 <I2C_ITError+0x194>)
 80043fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	2b28      	cmp	r3, #40	; 0x28
 8004412:	d005      	beq.n	8004420 <I2C_ITError+0x44>
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b29      	cmp	r3, #41	; 0x29
 8004418:	d002      	beq.n	8004420 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b2a      	cmp	r3, #42	; 0x2a
 800441e:	d10b      	bne.n	8004438 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004420:	2103      	movs	r1, #3
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 fa2e 	bl	8004884 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2228      	movs	r2, #40	; 0x28
 800442c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a50      	ldr	r2, [pc, #320]	; (8004574 <I2C_ITError+0x198>)
 8004434:	635a      	str	r2, [r3, #52]	; 0x34
 8004436:	e011      	b.n	800445c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004438:	f248 0103 	movw	r1, #32771	; 0x8003
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa21 	bl	8004884 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b60      	cmp	r3, #96	; 0x60
 800444c:	d003      	beq.n	8004456 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004460:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	2b00      	cmp	r3, #0
 8004468:	d039      	beq.n	80044de <I2C_ITError+0x102>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b11      	cmp	r3, #17
 800446e:	d002      	beq.n	8004476 <I2C_ITError+0x9a>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b21      	cmp	r3, #33	; 0x21
 8004474:	d133      	bne.n	80044de <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004480:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004484:	d107      	bne.n	8004496 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004494:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449a:	4618      	mov	r0, r3
 800449c:	f7fe fb6e 	bl	8002b7c <HAL_DMA_GetState>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d017      	beq.n	80044d6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044aa:	4a33      	ldr	r2, [pc, #204]	; (8004578 <I2C_ITError+0x19c>)
 80044ac:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe f9b2 	bl	8002824 <HAL_DMA_Abort_IT>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d04d      	beq.n	8004562 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d0:	4610      	mov	r0, r2
 80044d2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044d4:	e045      	b.n	8004562 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f000 f850 	bl	800457c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044dc:	e041      	b.n	8004562 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d039      	beq.n	800455a <I2C_ITError+0x17e>
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2b12      	cmp	r3, #18
 80044ea:	d002      	beq.n	80044f2 <I2C_ITError+0x116>
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b22      	cmp	r3, #34	; 0x22
 80044f0:	d133      	bne.n	800455a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004500:	d107      	bne.n	8004512 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004510:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	4618      	mov	r0, r3
 8004518:	f7fe fb30 	bl	8002b7c <HAL_DMA_GetState>
 800451c:	4603      	mov	r3, r0
 800451e:	2b01      	cmp	r3, #1
 8004520:	d017      	beq.n	8004552 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004526:	4a14      	ldr	r2, [pc, #80]	; (8004578 <I2C_ITError+0x19c>)
 8004528:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	4618      	mov	r0, r3
 8004538:	f7fe f974 	bl	8002824 <HAL_DMA_Abort_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d011      	beq.n	8004566 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800454c:	4610      	mov	r0, r2
 800454e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004550:	e009      	b.n	8004566 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f812 	bl	800457c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004558:	e005      	b.n	8004566 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f80e 	bl	800457c <I2C_TreatErrorCallback>
  }
}
 8004560:	e002      	b.n	8004568 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004562:	bf00      	nop
 8004564:	e000      	b.n	8004568 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004566:	bf00      	nop
}
 8004568:	bf00      	nop
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	ffff0000 	.word	0xffff0000
 8004574:	0800379d 	.word	0x0800379d
 8004578:	0800471d 	.word	0x0800471d

0800457c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b60      	cmp	r3, #96	; 0x60
 800458e:	d10e      	bne.n	80045ae <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fe ffc6 	bl	8003538 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80045ac:	e009      	b.n	80045c2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fe ffb1 	bl	8003524 <HAL_I2C_ErrorCallback>
}
 80045c2:	bf00      	nop
 80045c4:	3708      	adds	r7, #8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b02      	cmp	r3, #2
 80045de:	d103      	bne.n	80045e8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2200      	movs	r2, #0
 80045e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d007      	beq.n	8004606 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f042 0201 	orr.w	r2, r2, #1
 8004604:	619a      	str	r2, [r3, #24]
  }
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b084      	sub	sp, #16
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800462e:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800463a:	2120      	movs	r1, #32
 800463c:	68f8      	ldr	r0, [r7, #12]
 800463e:	f000 f8bd 	bl	80047bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8004642:	e02d      	b.n	80046a0 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800464c:	441a      	add	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	2bff      	cmp	r3, #255	; 0xff
 800465a:	d903      	bls.n	8004664 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	22ff      	movs	r2, #255	; 0xff
 8004660:	851a      	strh	r2, [r3, #40]	; 0x28
 8004662:	e004      	b.n	800466e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004676:	4619      	mov	r1, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3328      	adds	r3, #40	; 0x28
 800467e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8004684:	f7fe f86e 	bl	8002764 <HAL_DMA_Start_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d004      	beq.n	8004698 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800468e:	2110      	movs	r1, #16
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff fea3 	bl	80043dc <I2C_ITError>
}
 8004696:	e003      	b.n	80046a0 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8004698:	2140      	movs	r1, #64	; 0x40
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 f88e 	bl	80047bc <I2C_Enable_IRQ>
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b084      	sub	sp, #16
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d007      	beq.n	80046d2 <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 80046ce:	2301      	movs	r3, #1
 80046d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d007      	beq.n	80046ea <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 80046e6:	2301      	movs	r3, #1
 80046e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	f7fe fa54 	bl	8002b98 <HAL_DMA_GetError>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d00e      	beq.n	8004714 <I2C_DMAError+0x6c>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00b      	beq.n	8004714 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800470a:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800470c:	2110      	movs	r1, #16
 800470e:	68b8      	ldr	r0, [r7, #8]
 8004710:	f7ff fe64 	bl	80043dc <I2C_ITError>
  }
}
 8004714:	bf00      	nop
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	2200      	movs	r2, #0
 8004738:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004746:	2200      	movs	r2, #0
 8004748:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f7ff ff16 	bl	800457c <I2C_TreatErrorCallback>
}
 8004750:	bf00      	nop
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	460b      	mov	r3, r1
 8004764:	817b      	strh	r3, [r7, #10]
 8004766:	4613      	mov	r3, r2
 8004768:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800476a:	897b      	ldrh	r3, [r7, #10]
 800476c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004770:	7a7b      	ldrb	r3, [r7, #9]
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004778:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800477e:	6a3b      	ldr	r3, [r7, #32]
 8004780:	4313      	orrs	r3, r2
 8004782:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004786:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	0d5b      	lsrs	r3, r3, #21
 8004792:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004796:	4b08      	ldr	r3, [pc, #32]	; (80047b8 <I2C_TransferConfig+0x60>)
 8004798:	430b      	orrs	r3, r1
 800479a:	43db      	mvns	r3, r3
 800479c:	ea02 0103 	and.w	r1, r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	697a      	ldr	r2, [r7, #20]
 80047a6:	430a      	orrs	r2, r1
 80047a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80047aa:	bf00      	nop
 80047ac:	371c      	adds	r7, #28
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	03ff63ff 	.word	0x03ff63ff

080047bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d0:	4a2a      	ldr	r2, [pc, #168]	; (800487c <I2C_Enable_IRQ+0xc0>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d004      	beq.n	80047e0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80047da:	4a29      	ldr	r2, [pc, #164]	; (8004880 <I2C_Enable_IRQ+0xc4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d11d      	bne.n	800481c <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da03      	bge.n	80047f0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047ee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047f0:	887b      	ldrh	r3, [r7, #2]
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d103      	bne.n	80047fe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047fc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	2b20      	cmp	r3, #32
 8004802:	d103      	bne.n	800480c <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800480a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800480c:	887b      	ldrh	r3, [r7, #2]
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	d125      	bne.n	800485e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004818:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800481a:	e020      	b.n	800485e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800481c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004820:	2b00      	cmp	r3, #0
 8004822:	da03      	bge.n	800482c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800482a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800482c:	887b      	ldrh	r3, [r7, #2]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800483c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800483e:	887b      	ldrh	r3, [r7, #2]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800484e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004850:	887b      	ldrh	r3, [r7, #2]
 8004852:	2b20      	cmp	r3, #32
 8004854:	d103      	bne.n	800485e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f043 0320 	orr.w	r3, r3, #32
 800485c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6819      	ldr	r1, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	430a      	orrs	r2, r1
 800486c:	601a      	str	r2, [r3, #0]
}
 800486e:	bf00      	nop
 8004870:	3714      	adds	r7, #20
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	080039a3 	.word	0x080039a3
 8004880:	08003b89 	.word	0x08003b89

08004884 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004884:	b480      	push	{r7}
 8004886:	b085      	sub	sp, #20
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	460b      	mov	r3, r1
 800488e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004894:	887b      	ldrh	r3, [r7, #2]
 8004896:	f003 0301 	and.w	r3, r3, #1
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00f      	beq.n	80048be <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80048a4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048b2:	2b28      	cmp	r3, #40	; 0x28
 80048b4:	d003      	beq.n	80048be <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048be:	887b      	ldrh	r3, [r7, #2]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00f      	beq.n	80048e8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048dc:	2b28      	cmp	r3, #40	; 0x28
 80048de:	d003      	beq.n	80048e8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	da03      	bge.n	80048f8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048f8:	887b      	ldrh	r3, [r7, #2]
 80048fa:	2b10      	cmp	r3, #16
 80048fc:	d103      	bne.n	8004906 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004904:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	2b20      	cmp	r3, #32
 800490a:	d103      	bne.n	8004914 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f043 0320 	orr.w	r3, r3, #32
 8004912:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004914:	887b      	ldrh	r3, [r7, #2]
 8004916:	2b40      	cmp	r3, #64	; 0x40
 8004918:	d103      	bne.n	8004922 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004920:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	43da      	mvns	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	400a      	ands	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
}
 8004934:	bf00      	nop
 8004936:	3714      	adds	r7, #20
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b20      	cmp	r3, #32
 8004954:	d138      	bne.n	80049c8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495c:	2b01      	cmp	r3, #1
 800495e:	d101      	bne.n	8004964 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004960:	2302      	movs	r3, #2
 8004962:	e032      	b.n	80049ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2224      	movs	r2, #36	; 0x24
 8004970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0201 	bic.w	r2, r2, #1
 8004982:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004992:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6819      	ldr	r1, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	430a      	orrs	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f042 0201 	orr.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2220      	movs	r2, #32
 80049b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d139      	bne.n	8004a60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d101      	bne.n	80049fa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049f6:	2302      	movs	r3, #2
 80049f8:	e033      	b.n	8004a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2201      	movs	r2, #1
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2224      	movs	r2, #36	; 0x24
 8004a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0201 	bic.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	021b      	lsls	r3, r3, #8
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 0201 	orr.w	r2, r2, #1
 8004a4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	e000      	b.n	8004a62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a60:	2302      	movs	r3, #2
  }
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
	...

08004a70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b082      	sub	sp, #8
 8004a74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a76:	2300      	movs	r3, #0
 8004a78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a7a:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a84:	6413      	str	r3, [r2, #64]	; 0x40
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8e:	603b      	str	r3, [r7, #0]
 8004a90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a92:	4b1e      	ldr	r3, [pc, #120]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1d      	ldr	r2, [pc, #116]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a9e:	f7fd fc71 	bl	8002384 <HAL_GetTick>
 8004aa2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aa4:	e009      	b.n	8004aba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004aa6:	f7fd fc6d 	bl	8002384 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004ab4:	d901      	bls.n	8004aba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e022      	b.n	8004b00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004aba:	4b14      	ldr	r3, [pc, #80]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac6:	d1ee      	bne.n	8004aa6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004ac8:	4b10      	ldr	r3, [pc, #64]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ad2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ad4:	f7fd fc56 	bl	8002384 <HAL_GetTick>
 8004ad8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004ada:	e009      	b.n	8004af0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004adc:	f7fd fc52 	bl	8002384 <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aea:	d901      	bls.n	8004af0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e007      	b.n	8004b00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004af0:	4b06      	ldr	r3, [pc, #24]	; (8004b0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004afc:	d1ee      	bne.n	8004adc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	40007000 	.word	0x40007000

08004b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b086      	sub	sp, #24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e29b      	b.n	800505e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 8087 	beq.w	8004c42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004b34:	4b96      	ldr	r3, [pc, #600]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 030c 	and.w	r3, r3, #12
 8004b3c:	2b04      	cmp	r3, #4
 8004b3e:	d00c      	beq.n	8004b5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b40:	4b93      	ldr	r3, [pc, #588]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 030c 	and.w	r3, r3, #12
 8004b48:	2b08      	cmp	r3, #8
 8004b4a:	d112      	bne.n	8004b72 <HAL_RCC_OscConfig+0x62>
 8004b4c:	4b90      	ldr	r3, [pc, #576]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b58:	d10b      	bne.n	8004b72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b5a:	4b8d      	ldr	r3, [pc, #564]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d06c      	beq.n	8004c40 <HAL_RCC_OscConfig+0x130>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d168      	bne.n	8004c40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e275      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7a:	d106      	bne.n	8004b8a <HAL_RCC_OscConfig+0x7a>
 8004b7c:	4b84      	ldr	r3, [pc, #528]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a83      	ldr	r2, [pc, #524]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	e02e      	b.n	8004be8 <HAL_RCC_OscConfig+0xd8>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d10c      	bne.n	8004bac <HAL_RCC_OscConfig+0x9c>
 8004b92:	4b7f      	ldr	r3, [pc, #508]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a7e      	ldr	r2, [pc, #504]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b9c:	6013      	str	r3, [r2, #0]
 8004b9e:	4b7c      	ldr	r3, [pc, #496]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a7b      	ldr	r2, [pc, #492]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004ba4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ba8:	6013      	str	r3, [r2, #0]
 8004baa:	e01d      	b.n	8004be8 <HAL_RCC_OscConfig+0xd8>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xc0>
 8004bb6:	4b76      	ldr	r3, [pc, #472]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a75      	ldr	r2, [pc, #468]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	4b73      	ldr	r3, [pc, #460]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a72      	ldr	r2, [pc, #456]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e00b      	b.n	8004be8 <HAL_RCC_OscConfig+0xd8>
 8004bd0:	4b6f      	ldr	r3, [pc, #444]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a6e      	ldr	r2, [pc, #440]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4b6c      	ldr	r3, [pc, #432]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a6b      	ldr	r2, [pc, #428]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d013      	beq.n	8004c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fbc8 	bl	8002384 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bf8:	f7fd fbc4 	bl	8002384 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b64      	cmp	r3, #100	; 0x64
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e229      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0a:	4b61      	ldr	r3, [pc, #388]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0xe8>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fbb4 	bl	8002384 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fd fbb0 	bl	8002384 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e215      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c32:	4b57      	ldr	r3, [pc, #348]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1f0      	bne.n	8004c20 <HAL_RCC_OscConfig+0x110>
 8004c3e:	e000      	b.n	8004c42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d069      	beq.n	8004d22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c4e:	4b50      	ldr	r3, [pc, #320]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d00b      	beq.n	8004c72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c5a:	4b4d      	ldr	r3, [pc, #308]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	f003 030c 	and.w	r3, r3, #12
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d11c      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x190>
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d116      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c72:	4b47      	ldr	r3, [pc, #284]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_RCC_OscConfig+0x17a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d001      	beq.n	8004c8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e1e9      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	493d      	ldr	r1, [pc, #244]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c9e:	e040      	b.n	8004d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d023      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ca8:	4b39      	ldr	r3, [pc, #228]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a38      	ldr	r2, [pc, #224]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004cae:	f043 0301 	orr.w	r3, r3, #1
 8004cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cb4:	f7fd fb66 	bl	8002384 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cbc:	f7fd fb62 	bl	8002384 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e1c7      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cce:	4b30      	ldr	r3, [pc, #192]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0302 	and.w	r3, r3, #2
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b2d      	ldr	r3, [pc, #180]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4929      	ldr	r1, [pc, #164]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
 8004cee:	e018      	b.n	8004d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cf0:	4b27      	ldr	r3, [pc, #156]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004cf6:	f023 0301 	bic.w	r3, r3, #1
 8004cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fd fb42 	bl	8002384 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d04:	f7fd fb3e 	bl	8002384 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e1a3      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	4b1e      	ldr	r3, [pc, #120]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d038      	beq.n	8004da0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d019      	beq.n	8004d6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d36:	4b16      	ldr	r3, [pc, #88]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3a:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d42:	f7fd fb1f 	bl	8002384 <HAL_GetTick>
 8004d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4a:	f7fd fb1b 	bl	8002384 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e180      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d5c:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d60:	f003 0302 	and.w	r3, r3, #2
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d0f0      	beq.n	8004d4a <HAL_RCC_OscConfig+0x23a>
 8004d68:	e01a      	b.n	8004da0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d6a:	4b09      	ldr	r3, [pc, #36]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d6e:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <HAL_RCC_OscConfig+0x280>)
 8004d70:	f023 0301 	bic.w	r3, r3, #1
 8004d74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d76:	f7fd fb05 	bl	8002384 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	e00a      	b.n	8004d94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7fd fb01 	bl	8002384 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d903      	bls.n	8004d94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e166      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
 8004d90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d94:	4b92      	ldr	r3, [pc, #584]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004d96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1ee      	bne.n	8004d7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	f000 80a4 	beq.w	8004ef6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dae:	4b8c      	ldr	r3, [pc, #560]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d10d      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dba:	4b89      	ldr	r3, [pc, #548]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	4a88      	ldr	r2, [pc, #544]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc6:	4b86      	ldr	r3, [pc, #536]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004dd6:	4b83      	ldr	r3, [pc, #524]	; (8004fe4 <HAL_RCC_OscConfig+0x4d4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d118      	bne.n	8004e14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004de2:	4b80      	ldr	r3, [pc, #512]	; (8004fe4 <HAL_RCC_OscConfig+0x4d4>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a7f      	ldr	r2, [pc, #508]	; (8004fe4 <HAL_RCC_OscConfig+0x4d4>)
 8004de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dee:	f7fd fac9 	bl	8002384 <HAL_GetTick>
 8004df2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df4:	e008      	b.n	8004e08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df6:	f7fd fac5 	bl	8002384 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b64      	cmp	r3, #100	; 0x64
 8004e02:	d901      	bls.n	8004e08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e12a      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e08:	4b76      	ldr	r3, [pc, #472]	; (8004fe4 <HAL_RCC_OscConfig+0x4d4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d106      	bne.n	8004e2a <HAL_RCC_OscConfig+0x31a>
 8004e1c:	4b70      	ldr	r3, [pc, #448]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	4a6f      	ldr	r2, [pc, #444]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e22:	f043 0301 	orr.w	r3, r3, #1
 8004e26:	6713      	str	r3, [r2, #112]	; 0x70
 8004e28:	e02d      	b.n	8004e86 <HAL_RCC_OscConfig+0x376>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCC_OscConfig+0x33c>
 8004e32:	4b6b      	ldr	r3, [pc, #428]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e36:	4a6a      	ldr	r2, [pc, #424]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e38:	f023 0301 	bic.w	r3, r3, #1
 8004e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e3e:	4b68      	ldr	r3, [pc, #416]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e42:	4a67      	ldr	r2, [pc, #412]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4a:	e01c      	b.n	8004e86 <HAL_RCC_OscConfig+0x376>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b05      	cmp	r3, #5
 8004e52:	d10c      	bne.n	8004e6e <HAL_RCC_OscConfig+0x35e>
 8004e54:	4b62      	ldr	r3, [pc, #392]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e58:	4a61      	ldr	r2, [pc, #388]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e5a:	f043 0304 	orr.w	r3, r3, #4
 8004e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004e60:	4b5f      	ldr	r3, [pc, #380]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e64:	4a5e      	ldr	r2, [pc, #376]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e66:	f043 0301 	orr.w	r3, r3, #1
 8004e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e6c:	e00b      	b.n	8004e86 <HAL_RCC_OscConfig+0x376>
 8004e6e:	4b5c      	ldr	r3, [pc, #368]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e72:	4a5b      	ldr	r2, [pc, #364]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	6713      	str	r3, [r2, #112]	; 0x70
 8004e7a:	4b59      	ldr	r3, [pc, #356]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	4a58      	ldr	r2, [pc, #352]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004e80:	f023 0304 	bic.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d015      	beq.n	8004eba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e8e:	f7fd fa79 	bl	8002384 <HAL_GetTick>
 8004e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e94:	e00a      	b.n	8004eac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e96:	f7fd fa75 	bl	8002384 <HAL_GetTick>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	1ad3      	subs	r3, r2, r3
 8004ea0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d901      	bls.n	8004eac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e0d8      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eac:	4b4c      	ldr	r3, [pc, #304]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0ee      	beq.n	8004e96 <HAL_RCC_OscConfig+0x386>
 8004eb8:	e014      	b.n	8004ee4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eba:	f7fd fa63 	bl	8002384 <HAL_GetTick>
 8004ebe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec0:	e00a      	b.n	8004ed8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ec2:	f7fd fa5f 	bl	8002384 <HAL_GetTick>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d901      	bls.n	8004ed8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	e0c2      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ed8:	4b41      	ldr	r3, [pc, #260]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1ee      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ee4:	7dfb      	ldrb	r3, [r7, #23]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d105      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eea:	4b3d      	ldr	r3, [pc, #244]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eee:	4a3c      	ldr	r2, [pc, #240]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004ef0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80ae 	beq.w	800505c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f00:	4b37      	ldr	r3, [pc, #220]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	f003 030c 	and.w	r3, r3, #12
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d06d      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d14b      	bne.n	8004fac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f14:	4b32      	ldr	r3, [pc, #200]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a31      	ldr	r2, [pc, #196]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004f1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd fa30 	bl	8002384 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f28:	f7fd fa2c 	bl	8002384 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e091      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f3a:	4b29      	ldr	r3, [pc, #164]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1f0      	bne.n	8004f28 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	431a      	orrs	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	019b      	lsls	r3, r3, #6
 8004f56:	431a      	orrs	r2, r3
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f5c:	085b      	lsrs	r3, r3, #1
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	041b      	lsls	r3, r3, #16
 8004f62:	431a      	orrs	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f68:	061b      	lsls	r3, r3, #24
 8004f6a:	431a      	orrs	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f70:	071b      	lsls	r3, r3, #28
 8004f72:	491b      	ldr	r1, [pc, #108]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f78:	4b19      	ldr	r3, [pc, #100]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fd f9fe 	bl	8002384 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f8c:	f7fd f9fa 	bl	8002384 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b02      	cmp	r3, #2
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e05f      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9e:	4b10      	ldr	r3, [pc, #64]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d0f0      	beq.n	8004f8c <HAL_RCC_OscConfig+0x47c>
 8004faa:	e057      	b.n	800505c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fac:	4b0c      	ldr	r3, [pc, #48]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a0b      	ldr	r2, [pc, #44]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004fb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb8:	f7fd f9e4 	bl	8002384 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fc0:	f7fd f9e0 	bl	8002384 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e045      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd2:	4b03      	ldr	r3, [pc, #12]	; (8004fe0 <HAL_RCC_OscConfig+0x4d0>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x4b0>
 8004fde:	e03d      	b.n	800505c <HAL_RCC_OscConfig+0x54c>
 8004fe0:	40023800 	.word	0x40023800
 8004fe4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004fe8:	4b1f      	ldr	r3, [pc, #124]	; (8005068 <HAL_RCC_OscConfig+0x558>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d030      	beq.n	8005058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005000:	429a      	cmp	r2, r3
 8005002:	d129      	bne.n	8005058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800500e:	429a      	cmp	r2, r3
 8005010:	d122      	bne.n	8005058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005012:	68fa      	ldr	r2, [r7, #12]
 8005014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005018:	4013      	ands	r3, r2
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800501e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005020:	4293      	cmp	r3, r2
 8005022:	d119      	bne.n	8005058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	3b01      	subs	r3, #1
 8005032:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005034:	429a      	cmp	r2, r3
 8005036:	d10f      	bne.n	8005058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005044:	429a      	cmp	r2, r3
 8005046:	d107      	bne.n	8005058 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005052:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	40023800 	.word	0x40023800

0800506c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005076:	2300      	movs	r3, #0
 8005078:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0d0      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005084:	4b6a      	ldr	r3, [pc, #424]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d910      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b67      	ldr	r3, [pc, #412]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f023 020f 	bic.w	r2, r3, #15
 800509a:	4965      	ldr	r1, [pc, #404]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	4313      	orrs	r3, r2
 80050a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b63      	ldr	r3, [pc, #396]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0b8      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050cc:	4b59      	ldr	r3, [pc, #356]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a58      	ldr	r2, [pc, #352]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80050d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80050d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e4:	4b53      	ldr	r3, [pc, #332]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a52      	ldr	r2, [pc, #328]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80050ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f0:	4b50      	ldr	r3, [pc, #320]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	494d      	ldr	r1, [pc, #308]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d040      	beq.n	8005190 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005116:	4b47      	ldr	r3, [pc, #284]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d115      	bne.n	800514e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e07f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d107      	bne.n	800513e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800512e:	4b41      	ldr	r3, [pc, #260]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d109      	bne.n	800514e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e073      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513e:	4b3d      	ldr	r3, [pc, #244]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e06b      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800514e:	4b39      	ldr	r3, [pc, #228]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f023 0203 	bic.w	r2, r3, #3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	4936      	ldr	r1, [pc, #216]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 800515c:	4313      	orrs	r3, r2
 800515e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005160:	f7fd f910 	bl	8002384 <HAL_GetTick>
 8005164:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005166:	e00a      	b.n	800517e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005168:	f7fd f90c 	bl	8002384 <HAL_GetTick>
 800516c:	4602      	mov	r2, r0
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	f241 3288 	movw	r2, #5000	; 0x1388
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e053      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800517e:	4b2d      	ldr	r3, [pc, #180]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 020c 	and.w	r2, r3, #12
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	429a      	cmp	r2, r3
 800518e:	d1eb      	bne.n	8005168 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005190:	4b27      	ldr	r3, [pc, #156]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	683a      	ldr	r2, [r7, #0]
 800519a:	429a      	cmp	r2, r3
 800519c:	d210      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800519e:	4b24      	ldr	r3, [pc, #144]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f023 020f 	bic.w	r2, r3, #15
 80051a6:	4922      	ldr	r1, [pc, #136]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b20      	ldr	r3, [pc, #128]	; (8005230 <HAL_RCC_ClockConfig+0x1c4>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e032      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4916      	ldr	r1, [pc, #88]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	490e      	ldr	r1, [pc, #56]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051fe:	f000 f821 	bl	8005244 <HAL_RCC_GetSysClockFreq>
 8005202:	4602      	mov	r2, r0
 8005204:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_RCC_ClockConfig+0x1c8>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	490a      	ldr	r1, [pc, #40]	; (8005238 <HAL_RCC_ClockConfig+0x1cc>)
 8005210:	5ccb      	ldrb	r3, [r1, r3]
 8005212:	fa22 f303 	lsr.w	r3, r2, r3
 8005216:	4a09      	ldr	r2, [pc, #36]	; (800523c <HAL_RCC_ClockConfig+0x1d0>)
 8005218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800521a:	4b09      	ldr	r3, [pc, #36]	; (8005240 <HAL_RCC_ClockConfig+0x1d4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd f86c 	bl	80022fc <HAL_InitTick>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023c00 	.word	0x40023c00
 8005234:	40023800 	.word	0x40023800
 8005238:	08007b30 	.word	0x08007b30
 800523c:	2000004c 	.word	0x2000004c
 8005240:	20000050 	.word	0x20000050

08005244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005244:	b5b0      	push	{r4, r5, r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800524a:	2100      	movs	r1, #0
 800524c:	6079      	str	r1, [r7, #4]
 800524e:	2100      	movs	r1, #0
 8005250:	60f9      	str	r1, [r7, #12]
 8005252:	2100      	movs	r1, #0
 8005254:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8005256:	2100      	movs	r1, #0
 8005258:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800525a:	4952      	ldr	r1, [pc, #328]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800525c:	6889      	ldr	r1, [r1, #8]
 800525e:	f001 010c 	and.w	r1, r1, #12
 8005262:	2908      	cmp	r1, #8
 8005264:	d00d      	beq.n	8005282 <HAL_RCC_GetSysClockFreq+0x3e>
 8005266:	2908      	cmp	r1, #8
 8005268:	f200 8094 	bhi.w	8005394 <HAL_RCC_GetSysClockFreq+0x150>
 800526c:	2900      	cmp	r1, #0
 800526e:	d002      	beq.n	8005276 <HAL_RCC_GetSysClockFreq+0x32>
 8005270:	2904      	cmp	r1, #4
 8005272:	d003      	beq.n	800527c <HAL_RCC_GetSysClockFreq+0x38>
 8005274:	e08e      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005276:	4b4c      	ldr	r3, [pc, #304]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005278:	60bb      	str	r3, [r7, #8]
      break;
 800527a:	e08e      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800527c:	4b4b      	ldr	r3, [pc, #300]	; (80053ac <HAL_RCC_GetSysClockFreq+0x168>)
 800527e:	60bb      	str	r3, [r7, #8]
      break;
 8005280:	e08b      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005282:	4948      	ldr	r1, [pc, #288]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x160>)
 8005284:	6849      	ldr	r1, [r1, #4]
 8005286:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800528a:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800528c:	4945      	ldr	r1, [pc, #276]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800528e:	6849      	ldr	r1, [r1, #4]
 8005290:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8005294:	2900      	cmp	r1, #0
 8005296:	d024      	beq.n	80052e2 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005298:	4942      	ldr	r1, [pc, #264]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800529a:	6849      	ldr	r1, [r1, #4]
 800529c:	0989      	lsrs	r1, r1, #6
 800529e:	4608      	mov	r0, r1
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	f240 14ff 	movw	r4, #511	; 0x1ff
 80052a8:	f04f 0500 	mov.w	r5, #0
 80052ac:	ea00 0204 	and.w	r2, r0, r4
 80052b0:	ea01 0305 	and.w	r3, r1, r5
 80052b4:	493d      	ldr	r1, [pc, #244]	; (80053ac <HAL_RCC_GetSysClockFreq+0x168>)
 80052b6:	fb01 f003 	mul.w	r0, r1, r3
 80052ba:	2100      	movs	r1, #0
 80052bc:	fb01 f102 	mul.w	r1, r1, r2
 80052c0:	1844      	adds	r4, r0, r1
 80052c2:	493a      	ldr	r1, [pc, #232]	; (80053ac <HAL_RCC_GetSysClockFreq+0x168>)
 80052c4:	fba2 0101 	umull	r0, r1, r2, r1
 80052c8:	1863      	adds	r3, r4, r1
 80052ca:	4619      	mov	r1, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	461a      	mov	r2, r3
 80052d0:	f04f 0300 	mov.w	r3, #0
 80052d4:	f7fa ffb0 	bl	8000238 <__aeabi_uldivmod>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4613      	mov	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
 80052e0:	e04a      	b.n	8005378 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e2:	4b30      	ldr	r3, [pc, #192]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x160>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	099b      	lsrs	r3, r3, #6
 80052e8:	461a      	mov	r2, r3
 80052ea:	f04f 0300 	mov.w	r3, #0
 80052ee:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	ea02 0400 	and.w	r4, r2, r0
 80052fa:	ea03 0501 	and.w	r5, r3, r1
 80052fe:	4620      	mov	r0, r4
 8005300:	4629      	mov	r1, r5
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	014b      	lsls	r3, r1, #5
 800530c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005310:	0142      	lsls	r2, r0, #5
 8005312:	4610      	mov	r0, r2
 8005314:	4619      	mov	r1, r3
 8005316:	1b00      	subs	r0, r0, r4
 8005318:	eb61 0105 	sbc.w	r1, r1, r5
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	018b      	lsls	r3, r1, #6
 8005326:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800532a:	0182      	lsls	r2, r0, #6
 800532c:	1a12      	subs	r2, r2, r0
 800532e:	eb63 0301 	sbc.w	r3, r3, r1
 8005332:	f04f 0000 	mov.w	r0, #0
 8005336:	f04f 0100 	mov.w	r1, #0
 800533a:	00d9      	lsls	r1, r3, #3
 800533c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005340:	00d0      	lsls	r0, r2, #3
 8005342:	4602      	mov	r2, r0
 8005344:	460b      	mov	r3, r1
 8005346:	1912      	adds	r2, r2, r4
 8005348:	eb45 0303 	adc.w	r3, r5, r3
 800534c:	f04f 0000 	mov.w	r0, #0
 8005350:	f04f 0100 	mov.w	r1, #0
 8005354:	0299      	lsls	r1, r3, #10
 8005356:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800535a:	0290      	lsls	r0, r2, #10
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	4610      	mov	r0, r2
 8005362:	4619      	mov	r1, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	461a      	mov	r2, r3
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	f7fa ff64 	bl	8000238 <__aeabi_uldivmod>
 8005370:	4602      	mov	r2, r0
 8005372:	460b      	mov	r3, r1
 8005374:	4613      	mov	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x160>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	0c1b      	lsrs	r3, r3, #16
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	3301      	adds	r3, #1
 8005384:	005b      	lsls	r3, r3, #1
 8005386:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	60bb      	str	r3, [r7, #8]
      break;
 8005392:	e002      	b.n	800539a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005394:	4b04      	ldr	r3, [pc, #16]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x164>)
 8005396:	60bb      	str	r3, [r7, #8]
      break;
 8005398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800539a:	68bb      	ldr	r3, [r7, #8]
}
 800539c:	4618      	mov	r0, r3
 800539e:	3710      	adds	r7, #16
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bdb0      	pop	{r4, r5, r7, pc}
 80053a4:	40023800 	.word	0x40023800
 80053a8:	00f42400 	.word	0x00f42400
 80053ac:	017d7840 	.word	0x017d7840

080053b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b088      	sub	sp, #32
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053bc:	2300      	movs	r3, #0
 80053be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053c4:	2300      	movs	r3, #0
 80053c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d012      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80053d8:	4b69      	ldr	r3, [pc, #420]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4a68      	ldr	r2, [pc, #416]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80053e2:	6093      	str	r3, [r2, #8]
 80053e4:	4b66      	ldr	r3, [pc, #408]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ec:	4964      	ldr	r1, [pc, #400]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80053fa:	2301      	movs	r3, #1
 80053fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d017      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800540a:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005410:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005418:	4959      	ldr	r1, [pc, #356]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541a:	4313      	orrs	r3, r2
 800541c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005424:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005428:	d101      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800542a:	2301      	movs	r3, #1
 800542c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005436:	2301      	movs	r3, #1
 8005438:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d017      	beq.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005446:	4b4e      	ldr	r3, [pc, #312]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800544c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	494a      	ldr	r1, [pc, #296]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005464:	d101      	bne.n	800546a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005466:	2301      	movs	r3, #1
 8005468:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005472:	2301      	movs	r3, #1
 8005474:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005482:	2301      	movs	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 808b 	beq.w	80055aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005494:	4b3a      	ldr	r3, [pc, #232]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005498:	4a39      	ldr	r2, [pc, #228]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800549e:	6413      	str	r3, [r2, #64]	; 0x40
 80054a0:	4b37      	ldr	r3, [pc, #220]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054ac:	4b35      	ldr	r3, [pc, #212]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a34      	ldr	r2, [pc, #208]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054b8:	f7fc ff64 	bl	8002384 <HAL_GetTick>
 80054bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054be:	e008      	b.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054c0:	f7fc ff60 	bl	8002384 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b64      	cmp	r3, #100	; 0x64
 80054cc:	d901      	bls.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e38f      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054d2:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d0f0      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80054de:	4b28      	ldr	r3, [pc, #160]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d035      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d02e      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054fc:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005504:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005506:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005510:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005516:	4a1a      	ldr	r2, [pc, #104]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005518:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800551c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800551e:	4a18      	ldr	r2, [pc, #96]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005524:	4b16      	ldr	r3, [pc, #88]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d114      	bne.n	800555a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fc ff28 	bl	8002384 <HAL_GetTick>
 8005534:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005536:	e00a      	b.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005538:	f7fc ff24 	bl	8002384 <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	f241 3288 	movw	r2, #5000	; 0x1388
 8005546:	4293      	cmp	r3, r2
 8005548:	d901      	bls.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e351      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554e:	4b0c      	ldr	r3, [pc, #48]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	f003 0302 	and.w	r3, r3, #2
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ee      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800555e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005562:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005566:	d111      	bne.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005568:	4b05      	ldr	r3, [pc, #20]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005576:	400b      	ands	r3, r1
 8005578:	4901      	ldr	r1, [pc, #4]	; (8005580 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557a:	4313      	orrs	r3, r2
 800557c:	608b      	str	r3, [r1, #8]
 800557e:	e00b      	b.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005580:	40023800 	.word	0x40023800
 8005584:	40007000 	.word	0x40007000
 8005588:	0ffffcff 	.word	0x0ffffcff
 800558c:	4bb3      	ldr	r3, [pc, #716]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4ab2      	ldr	r2, [pc, #712]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005596:	6093      	str	r3, [r2, #8]
 8005598:	4bb0      	ldr	r3, [pc, #704]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800559a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a4:	49ad      	ldr	r1, [pc, #692]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 0310 	and.w	r3, r3, #16
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d010      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055b6:	4ba9      	ldr	r3, [pc, #676]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055bc:	4aa7      	ldr	r2, [pc, #668]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055c6:	4ba5      	ldr	r3, [pc, #660]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d0:	49a2      	ldr	r1, [pc, #648]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00a      	beq.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055e4:	4b9d      	ldr	r3, [pc, #628]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055f2:	499a      	ldr	r1, [pc, #616]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80055f4:	4313      	orrs	r3, r2
 80055f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00a      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005606:	4b95      	ldr	r3, [pc, #596]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005614:	4991      	ldr	r1, [pc, #580]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005616:	4313      	orrs	r3, r2
 8005618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005628:	4b8c      	ldr	r3, [pc, #560]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005636:	4989      	ldr	r1, [pc, #548]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005638:	4313      	orrs	r3, r2
 800563a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800564a:	4b84      	ldr	r3, [pc, #528]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800564c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005650:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005658:	4980      	ldr	r1, [pc, #512]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800566c:	4b7b      	ldr	r3, [pc, #492]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800566e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005672:	f023 0203 	bic.w	r2, r3, #3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800567a:	4978      	ldr	r1, [pc, #480]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800567c:	4313      	orrs	r3, r2
 800567e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800568e:	4b73      	ldr	r3, [pc, #460]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	f023 020c 	bic.w	r2, r3, #12
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800569c:	496f      	ldr	r1, [pc, #444]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056b0:	4b6a      	ldr	r3, [pc, #424]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056be:	4967      	ldr	r1, [pc, #412]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056c0:	4313      	orrs	r3, r2
 80056c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056d2:	4b62      	ldr	r3, [pc, #392]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e0:	495e      	ldr	r1, [pc, #376]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056e2:	4313      	orrs	r3, r2
 80056e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00a      	beq.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056f4:	4b59      	ldr	r3, [pc, #356]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80056f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005702:	4956      	ldr	r1, [pc, #344]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005704:	4313      	orrs	r3, r2
 8005706:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005716:	4b51      	ldr	r3, [pc, #324]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800571c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005724:	494d      	ldr	r1, [pc, #308]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005726:	4313      	orrs	r3, r2
 8005728:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00a      	beq.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005738:	4b48      	ldr	r3, [pc, #288]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800573a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	4945      	ldr	r1, [pc, #276]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005748:	4313      	orrs	r3, r2
 800574a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800575a:	4b40      	ldr	r3, [pc, #256]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800575c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005760:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005768:	493c      	ldr	r1, [pc, #240]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800576a:	4313      	orrs	r3, r2
 800576c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00a      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800577c:	4b37      	ldr	r3, [pc, #220]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800577e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005782:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578a:	4934      	ldr	r1, [pc, #208]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800578c:	4313      	orrs	r3, r2
 800578e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d011      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800579e:	4b2f      	ldr	r3, [pc, #188]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057ac:	492b      	ldr	r1, [pc, #172]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057bc:	d101      	bne.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057be:	2301      	movs	r3, #1
 80057c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0308 	and.w	r3, r3, #8
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057ce:	2301      	movs	r3, #1
 80057d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057de:	4b1f      	ldr	r3, [pc, #124]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ec:	491b      	ldr	r1, [pc, #108]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005800:	4b16      	ldr	r3, [pc, #88]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005810:	4912      	ldr	r1, [pc, #72]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005812:	4313      	orrs	r3, r2
 8005814:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005824:	4b0d      	ldr	r3, [pc, #52]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005834:	4909      	ldr	r1, [pc, #36]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00f      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800584a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800584e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005858:	e002      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800585a:	bf00      	nop
 800585c:	40023800 	.word	0x40023800
 8005860:	4986      	ldr	r1, [pc, #536]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005862:	4313      	orrs	r3, r2
 8005864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00b      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005874:	4b81      	ldr	r3, [pc, #516]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005876:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800587a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005884:	497d      	ldr	r1, [pc, #500]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	2b01      	cmp	r3, #1
 8005890:	d006      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 80d6 	beq.w	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058a0:	4b76      	ldr	r3, [pc, #472]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a75      	ldr	r2, [pc, #468]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058ac:	f7fc fd6a 	bl	8002384 <HAL_GetTick>
 80058b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058b4:	f7fc fd66 	bl	8002384 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	; 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e195      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c6:	4b6d      	ldr	r3, [pc, #436]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d021      	beq.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d11d      	bne.n	8005922 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058e6:	4b65      	ldr	r3, [pc, #404]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058ec:	0c1b      	lsrs	r3, r3, #16
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058f4:	4b61      	ldr	r3, [pc, #388]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80058f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058fa:	0e1b      	lsrs	r3, r3, #24
 80058fc:	f003 030f 	and.w	r3, r3, #15
 8005900:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	019a      	lsls	r2, r3, #6
 8005908:	693b      	ldr	r3, [r7, #16]
 800590a:	041b      	lsls	r3, r3, #16
 800590c:	431a      	orrs	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	061b      	lsls	r3, r3, #24
 8005912:	431a      	orrs	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	071b      	lsls	r3, r3, #28
 800591a:	4958      	ldr	r1, [pc, #352]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800591c:	4313      	orrs	r3, r2
 800591e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d004      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005936:	d00a      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005940:	2b00      	cmp	r3, #0
 8005942:	d02e      	beq.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800594c:	d129      	bne.n	80059a2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800594e:	4b4b      	ldr	r3, [pc, #300]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005950:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005954:	0c1b      	lsrs	r3, r3, #16
 8005956:	f003 0303 	and.w	r3, r3, #3
 800595a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800595c:	4b47      	ldr	r3, [pc, #284]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800595e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005962:	0f1b      	lsrs	r3, r3, #28
 8005964:	f003 0307 	and.w	r3, r3, #7
 8005968:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	019a      	lsls	r2, r3, #6
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	041b      	lsls	r3, r3, #16
 8005974:	431a      	orrs	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	061b      	lsls	r3, r3, #24
 800597c:	431a      	orrs	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	071b      	lsls	r3, r3, #28
 8005982:	493e      	ldr	r1, [pc, #248]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800598a:	4b3c      	ldr	r3, [pc, #240]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800598c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005990:	f023 021f 	bic.w	r2, r3, #31
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	3b01      	subs	r3, #1
 800599a:	4938      	ldr	r1, [pc, #224]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800599c:	4313      	orrs	r3, r2
 800599e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d01d      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059ae:	4b33      	ldr	r3, [pc, #204]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059b4:	0e1b      	lsrs	r3, r3, #24
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059bc:	4b2f      	ldr	r3, [pc, #188]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059c2:	0f1b      	lsrs	r3, r3, #28
 80059c4:	f003 0307 	and.w	r3, r3, #7
 80059c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	019a      	lsls	r2, r3, #6
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	041b      	lsls	r3, r3, #16
 80059d6:	431a      	orrs	r2, r3
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	061b      	lsls	r3, r3, #24
 80059dc:	431a      	orrs	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	071b      	lsls	r3, r3, #28
 80059e2:	4926      	ldr	r1, [pc, #152]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d011      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	019a      	lsls	r2, r3, #6
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	691b      	ldr	r3, [r3, #16]
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	431a      	orrs	r2, r3
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	061b      	lsls	r3, r3, #24
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	071b      	lsls	r3, r3, #28
 8005a12:	491a      	ldr	r1, [pc, #104]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a1a:	4b18      	ldr	r3, [pc, #96]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a26:	f7fc fcad 	bl	8002384 <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a2e:	f7fc fca9 	bl	8002384 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b64      	cmp	r3, #100	; 0x64
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e0d8      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a40:	4b0e      	ldr	r3, [pc, #56]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a4c:	69bb      	ldr	r3, [r7, #24]
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	f040 80ce 	bne.w	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a54:	4b09      	ldr	r3, [pc, #36]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a08      	ldr	r2, [pc, #32]	; (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a60:	f7fc fc90 	bl	8002384 <HAL_GetTick>
 8005a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a66:	e00b      	b.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a68:	f7fc fc8c 	bl	8002384 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b64      	cmp	r3, #100	; 0x64
 8005a74:	d904      	bls.n	8005a80 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e0bb      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005a7a:	bf00      	nop
 8005a7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a80:	4b5e      	ldr	r3, [pc, #376]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a8c:	d0ec      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d02e      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d12a      	bne.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005ab6:	4b51      	ldr	r3, [pc, #324]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005abc:	0c1b      	lsrs	r3, r3, #16
 8005abe:	f003 0303 	and.w	r3, r3, #3
 8005ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ac4:	4b4d      	ldr	r3, [pc, #308]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aca:	0f1b      	lsrs	r3, r3, #28
 8005acc:	f003 0307 	and.w	r3, r3, #7
 8005ad0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	695b      	ldr	r3, [r3, #20]
 8005ad6:	019a      	lsls	r2, r3, #6
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	431a      	orrs	r2, r3
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	061b      	lsls	r3, r3, #24
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	071b      	lsls	r3, r3, #28
 8005aea:	4944      	ldr	r1, [pc, #272]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005af2:	4b42      	ldr	r3, [pc, #264]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b00:	3b01      	subs	r3, #1
 8005b02:	021b      	lsls	r3, r3, #8
 8005b04:	493d      	ldr	r1, [pc, #244]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d022      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b20:	d11d      	bne.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b22:	4b36      	ldr	r3, [pc, #216]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	0e1b      	lsrs	r3, r3, #24
 8005b2a:	f003 030f 	and.w	r3, r3, #15
 8005b2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b30:	4b32      	ldr	r3, [pc, #200]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	0f1b      	lsrs	r3, r3, #28
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	019a      	lsls	r2, r3, #6
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	431a      	orrs	r2, r3
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	061b      	lsls	r3, r3, #24
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	071b      	lsls	r3, r3, #28
 8005b56:	4929      	ldr	r1, [pc, #164]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f003 0308 	and.w	r3, r3, #8
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d028      	beq.n	8005bbc <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b6a:	4b24      	ldr	r3, [pc, #144]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b70:	0e1b      	lsrs	r3, r3, #24
 8005b72:	f003 030f 	and.w	r3, r3, #15
 8005b76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b78:	4b20      	ldr	r3, [pc, #128]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	0c1b      	lsrs	r3, r3, #16
 8005b80:	f003 0303 	and.w	r3, r3, #3
 8005b84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	019a      	lsls	r2, r3, #6
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	041b      	lsls	r3, r3, #16
 8005b90:	431a      	orrs	r2, r3
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	061b      	lsls	r3, r3, #24
 8005b96:	431a      	orrs	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	69db      	ldr	r3, [r3, #28]
 8005b9c:	071b      	lsls	r3, r3, #28
 8005b9e:	4917      	ldr	r1, [pc, #92]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005ba6:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb4:	4911      	ldr	r1, [pc, #68]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bbc:	4b0f      	ldr	r3, [pc, #60]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a0e      	ldr	r2, [pc, #56]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bc8:	f7fc fbdc 	bl	8002384 <HAL_GetTick>
 8005bcc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bce:	e008      	b.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005bd0:	f7fc fbd8 	bl	8002384 <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	; 0x64
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e007      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005be2:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bee:	d1ef      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3720      	adds	r7, #32
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
 8005bfa:	bf00      	nop
 8005bfc:	40023800 	.word	0x40023800

08005c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e09d      	b.n	8005d4e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d108      	bne.n	8005c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c22:	d009      	beq.n	8005c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
 8005c2a:	e005      	b.n	8005c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fb fcaa 	bl	80015ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c78:	d902      	bls.n	8005c80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
 8005c7e:	e002      	b.n	8005c86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005c84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005c8e:	d007      	beq.n	8005ca0 <HAL_SPI_Init+0xa0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c98:	d002      	beq.n	8005ca0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cb0:	431a      	orrs	r2, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	431a      	orrs	r2, r3
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	431a      	orrs	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	699b      	ldr	r3, [r3, #24]
 8005cca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	69db      	ldr	r3, [r3, #28]
 8005cd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cd8:	431a      	orrs	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce2:	ea42 0103 	orr.w	r1, r2, r3
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	699b      	ldr	r3, [r3, #24]
 8005cfa:	0c1b      	lsrs	r3, r3, #16
 8005cfc:	f003 0204 	and.w	r2, r3, #4
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d04:	f003 0310 	and.w	r3, r3, #16
 8005d08:	431a      	orrs	r2, r3
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0e:	f003 0308 	and.w	r3, r3, #8
 8005d12:	431a      	orrs	r2, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d1c:	ea42 0103 	orr.w	r1, r2, r3
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	430a      	orrs	r2, r1
 8005d2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	69da      	ldr	r2, [r3, #28]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d4c:	2300      	movs	r3, #0
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b08a      	sub	sp, #40	; 0x28
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	60f8      	str	r0, [r7, #12]
 8005d5e:	60b9      	str	r1, [r7, #8]
 8005d60:	607a      	str	r2, [r7, #4]
 8005d62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d64:	2301      	movs	r3, #1
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d101      	bne.n	8005d7c <HAL_SPI_TransmitReceive+0x26>
 8005d78:	2302      	movs	r3, #2
 8005d7a:	e1fb      	b.n	8006174 <HAL_SPI_TransmitReceive+0x41e>
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2201      	movs	r2, #1
 8005d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d84:	f7fc fafe 	bl	8002384 <HAL_GetTick>
 8005d88:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d90:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005d98:	887b      	ldrh	r3, [r7, #2]
 8005d9a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005d9c:	887b      	ldrh	r3, [r7, #2]
 8005d9e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005da0:	7efb      	ldrb	r3, [r7, #27]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d00e      	beq.n	8005dc4 <HAL_SPI_TransmitReceive+0x6e>
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dac:	d106      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <HAL_SPI_TransmitReceive+0x66>
 8005db6:	7efb      	ldrb	r3, [r7, #27]
 8005db8:	2b04      	cmp	r3, #4
 8005dba:	d003      	beq.n	8005dc4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005dbc:	2302      	movs	r3, #2
 8005dbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005dc2:	e1cd      	b.n	8006160 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d005      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x80>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d002      	beq.n	8005dd6 <HAL_SPI_TransmitReceive+0x80>
 8005dd0:	887b      	ldrh	r3, [r7, #2]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d103      	bne.n	8005dde <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ddc:	e1c0      	b.n	8006160 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	d003      	beq.n	8005df2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2205      	movs	r2, #5
 8005dee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2200      	movs	r2, #0
 8005df6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	887a      	ldrh	r2, [r7, #2]
 8005e02:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	887a      	ldrh	r2, [r7, #2]
 8005e0a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	887a      	ldrh	r2, [r7, #2]
 8005e1e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e34:	d802      	bhi.n	8005e3c <HAL_SPI_TransmitReceive+0xe6>
 8005e36:	8a3b      	ldrh	r3, [r7, #16]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d908      	bls.n	8005e4e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e4a:	605a      	str	r2, [r3, #4]
 8005e4c:	e007      	b.n	8005e5e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e68:	2b40      	cmp	r3, #64	; 0x40
 8005e6a:	d007      	beq.n	8005e7c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e84:	d97c      	bls.n	8005f80 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d002      	beq.n	8005e94 <HAL_SPI_TransmitReceive+0x13e>
 8005e8e:	8a7b      	ldrh	r3, [r7, #18]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d169      	bne.n	8005f68 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e98:	881a      	ldrh	r2, [r3, #0]
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	1c9a      	adds	r2, r3, #2
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005eb8:	e056      	b.n	8005f68 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	d11b      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x1aa>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d016      	beq.n	8005f00 <HAL_SPI_TransmitReceive+0x1aa>
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d113      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005edc:	881a      	ldrh	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee8:	1c9a      	adds	r2, r3, #2
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005efc:	2300      	movs	r3, #0
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d11c      	bne.n	8005f48 <HAL_SPI_TransmitReceive+0x1f2>
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	b292      	uxth	r2, r2
 8005f26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2c:	1c9a      	adds	r2, r3, #2
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	b29a      	uxth	r2, r3
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f44:	2301      	movs	r3, #1
 8005f46:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f48:	f7fc fa1c 	bl	8002384 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d807      	bhi.n	8005f68 <HAL_SPI_TransmitReceive+0x212>
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f5e:	d003      	beq.n	8005f68 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005f66:	e0fb      	b.n	8006160 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1a3      	bne.n	8005eba <HAL_SPI_TransmitReceive+0x164>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d19d      	bne.n	8005eba <HAL_SPI_TransmitReceive+0x164>
 8005f7e:	e0df      	b.n	8006140 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d003      	beq.n	8005f90 <HAL_SPI_TransmitReceive+0x23a>
 8005f88:	8a7b      	ldrh	r3, [r7, #18]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	f040 80cb 	bne.w	8006126 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d912      	bls.n	8005fc0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	881a      	ldrh	r2, [r3, #0]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005faa:	1c9a      	adds	r2, r3, #2
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	3b02      	subs	r3, #2
 8005fb8:	b29a      	uxth	r2, r3
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fbe:	e0b2      	b.n	8006126 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	330c      	adds	r3, #12
 8005fca:	7812      	ldrb	r2, [r2, #0]
 8005fcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	1c5a      	adds	r2, r3, #1
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fe6:	e09e      	b.n	8006126 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 0302 	and.w	r3, r3, #2
 8005ff2:	2b02      	cmp	r3, #2
 8005ff4:	d134      	bne.n	8006060 <HAL_SPI_TransmitReceive+0x30a>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d02f      	beq.n	8006060 <HAL_SPI_TransmitReceive+0x30a>
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	2b01      	cmp	r3, #1
 8006004:	d12c      	bne.n	8006060 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b01      	cmp	r3, #1
 800600e:	d912      	bls.n	8006036 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	881a      	ldrh	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	1c9a      	adds	r2, r3, #2
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800602a:	b29b      	uxth	r3, r3
 800602c:	3b02      	subs	r3, #2
 800602e:	b29a      	uxth	r2, r3
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006034:	e012      	b.n	800605c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	330c      	adds	r3, #12
 8006040:	7812      	ldrb	r2, [r2, #0]
 8006042:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	1c5a      	adds	r2, r3, #1
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	3b01      	subs	r3, #1
 8006056:	b29a      	uxth	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800605c:	2300      	movs	r3, #0
 800605e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b01      	cmp	r3, #1
 800606c:	d148      	bne.n	8006100 <HAL_SPI_TransmitReceive+0x3aa>
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d042      	beq.n	8006100 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b01      	cmp	r3, #1
 8006084:	d923      	bls.n	80060ce <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006090:	b292      	uxth	r2, r2
 8006092:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006098:	1c9a      	adds	r2, r3, #2
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b02      	subs	r3, #2
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d81f      	bhi.n	80060fc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060ca:	605a      	str	r2, [r3, #4]
 80060cc:	e016      	b.n	80060fc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f103 020c 	add.w	r2, r3, #12
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060da:	7812      	ldrb	r2, [r2, #0]
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	3b01      	subs	r3, #1
 80060f4:	b29a      	uxth	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80060fc:	2301      	movs	r3, #1
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006100:	f7fc f940 	bl	8002384 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610c:	429a      	cmp	r2, r3
 800610e:	d803      	bhi.n	8006118 <HAL_SPI_TransmitReceive+0x3c2>
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d102      	bne.n	800611e <HAL_SPI_TransmitReceive+0x3c8>
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006124:	e01c      	b.n	8006160 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	2b00      	cmp	r3, #0
 800612e:	f47f af5b 	bne.w	8005fe8 <HAL_SPI_TransmitReceive+0x292>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006138:	b29b      	uxth	r3, r3
 800613a:	2b00      	cmp	r3, #0
 800613c:	f47f af54 	bne.w	8005fe8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006140:	69fa      	ldr	r2, [r7, #28]
 8006142:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f937 	bl	80063b8 <SPI_EndRxTxTransaction>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d006      	beq.n	800615e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2220      	movs	r2, #32
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
 800615c:	e000      	b.n	8006160 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800615e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006170:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006174:	4618      	mov	r0, r3
 8006176:	3728      	adds	r7, #40	; 0x28
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b088      	sub	sp, #32
 8006180:	af00      	add	r7, sp, #0
 8006182:	60f8      	str	r0, [r7, #12]
 8006184:	60b9      	str	r1, [r7, #8]
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	4613      	mov	r3, r2
 800618a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800618c:	f7fc f8fa 	bl	8002384 <HAL_GetTick>
 8006190:	4602      	mov	r2, r0
 8006192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006194:	1a9b      	subs	r3, r3, r2
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	4413      	add	r3, r2
 800619a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800619c:	f7fc f8f2 	bl	8002384 <HAL_GetTick>
 80061a0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061a2:	4b39      	ldr	r3, [pc, #228]	; (8006288 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	015b      	lsls	r3, r3, #5
 80061a8:	0d1b      	lsrs	r3, r3, #20
 80061aa:	69fa      	ldr	r2, [r7, #28]
 80061ac:	fb02 f303 	mul.w	r3, r2, r3
 80061b0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061b2:	e054      	b.n	800625e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d050      	beq.n	800625e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061bc:	f7fc f8e2 	bl	8002384 <HAL_GetTick>
 80061c0:	4602      	mov	r2, r0
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	1ad3      	subs	r3, r2, r3
 80061c6:	69fa      	ldr	r2, [r7, #28]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d902      	bls.n	80061d2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d13d      	bne.n	800624e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061e0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061ea:	d111      	bne.n	8006210 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f4:	d004      	beq.n	8006200 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061fe:	d107      	bne.n	8006210 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800620e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006214:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006218:	d10f      	bne.n	800623a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006228:	601a      	str	r2, [r3, #0]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006238:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2201      	movs	r2, #1
 800623e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800624a:	2303      	movs	r3, #3
 800624c:	e017      	b.n	800627e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006254:	2300      	movs	r3, #0
 8006256:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	3b01      	subs	r3, #1
 800625c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689a      	ldr	r2, [r3, #8]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4013      	ands	r3, r2
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	429a      	cmp	r2, r3
 800626c:	bf0c      	ite	eq
 800626e:	2301      	moveq	r3, #1
 8006270:	2300      	movne	r3, #0
 8006272:	b2db      	uxtb	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	79fb      	ldrb	r3, [r7, #7]
 8006278:	429a      	cmp	r2, r3
 800627a:	d19b      	bne.n	80061b4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800627c:	2300      	movs	r3, #0
}
 800627e:	4618      	mov	r0, r3
 8006280:	3720      	adds	r7, #32
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000004c 	.word	0x2000004c

0800628c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
 8006298:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800629a:	2300      	movs	r3, #0
 800629c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800629e:	f7fc f871 	bl	8002384 <HAL_GetTick>
 80062a2:	4602      	mov	r2, r0
 80062a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	4413      	add	r3, r2
 80062ac:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80062ae:	f7fc f869 	bl	8002384 <HAL_GetTick>
 80062b2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	330c      	adds	r3, #12
 80062ba:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80062bc:	4b3d      	ldr	r3, [pc, #244]	; (80063b4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	00da      	lsls	r2, r3, #3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	0d1b      	lsrs	r3, r3, #20
 80062cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062ce:	fb02 f303 	mul.w	r3, r2, r3
 80062d2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80062d4:	e060      	b.n	8006398 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80062dc:	d107      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x62>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80062ec:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f4:	d050      	beq.n	8006398 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80062f6:	f7fc f845 	bl	8002384 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	429a      	cmp	r2, r3
 8006304:	d902      	bls.n	800630c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006308:	2b00      	cmp	r3, #0
 800630a:	d13d      	bne.n	8006388 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800631a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006324:	d111      	bne.n	800634a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800632e:	d004      	beq.n	800633a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006338:	d107      	bne.n	800634a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	681a      	ldr	r2, [r3, #0]
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006348:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006352:	d10f      	bne.n	8006374 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006362:	601a      	str	r2, [r3, #0]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006372:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e010      	b.n	80063aa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800638e:	2300      	movs	r3, #0
 8006390:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	3b01      	subs	r3, #1
 8006396:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	689a      	ldr	r2, [r3, #8]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d196      	bne.n	80062d6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3728      	adds	r7, #40	; 0x28
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	2000004c 	.word	0x2000004c

080063b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b088      	sub	sp, #32
 80063bc:	af02      	add	r7, sp, #8
 80063be:	60f8      	str	r0, [r7, #12]
 80063c0:	60b9      	str	r1, [r7, #8]
 80063c2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	2200      	movs	r2, #0
 80063cc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f7ff ff5b 	bl	800628c <SPI_WaitFifoStateUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d007      	beq.n	80063ec <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063e0:	f043 0220 	orr.w	r2, r3, #32
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e046      	b.n	800647a <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063ec:	4b25      	ldr	r3, [pc, #148]	; (8006484 <SPI_EndRxTxTransaction+0xcc>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a25      	ldr	r2, [pc, #148]	; (8006488 <SPI_EndRxTxTransaction+0xd0>)
 80063f2:	fba2 2303 	umull	r2, r3, r2, r3
 80063f6:	0d5b      	lsrs	r3, r3, #21
 80063f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80063fc:	fb02 f303 	mul.w	r3, r2, r3
 8006400:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800640a:	d112      	bne.n	8006432 <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2200      	movs	r2, #0
 8006414:	2180      	movs	r1, #128	; 0x80
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f7ff feb0 	bl	800617c <SPI_WaitFlagStateUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d016      	beq.n	8006450 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006426:	f043 0220 	orr.w	r2, r3, #32
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e023      	b.n	800647a <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	3b01      	subs	r3, #1
 800643c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006448:	2b80      	cmp	r3, #128	; 0x80
 800644a:	d0f2      	beq.n	8006432 <SPI_EndRxTxTransaction+0x7a>
 800644c:	e000      	b.n	8006450 <SPI_EndRxTxTransaction+0x98>
        break;
 800644e:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	2200      	movs	r2, #0
 8006458:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f7ff ff15 	bl	800628c <SPI_WaitFifoStateUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e000      	b.n	800647a <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3718      	adds	r7, #24
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	2000004c 	.word	0x2000004c
 8006488:	165e9f81 	.word	0x165e9f81

0800648c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d101      	bne.n	800649e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800649a:	2301      	movs	r3, #1
 800649c:	e049      	b.n	8006532 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d106      	bne.n	80064b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f7fb fe62 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f000 fdde 	bl	800708c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2201      	movs	r2, #1
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2201      	movs	r2, #1
 800650c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2201      	movs	r2, #1
 8006524:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2201      	movs	r2, #1
 800652c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800653c:	b480      	push	{r7}
 800653e:	b085      	sub	sp, #20
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	d001      	beq.n	8006554 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e054      	b.n	80065fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0201 	orr.w	r2, r2, #1
 800656a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a26      	ldr	r2, [pc, #152]	; (800660c <HAL_TIM_Base_Start_IT+0xd0>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d022      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657e:	d01d      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a22      	ldr	r2, [pc, #136]	; (8006610 <HAL_TIM_Base_Start_IT+0xd4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d018      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a21      	ldr	r2, [pc, #132]	; (8006614 <HAL_TIM_Base_Start_IT+0xd8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d013      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a1f      	ldr	r2, [pc, #124]	; (8006618 <HAL_TIM_Base_Start_IT+0xdc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d00e      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a1e      	ldr	r2, [pc, #120]	; (800661c <HAL_TIM_Base_Start_IT+0xe0>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d009      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a1c      	ldr	r2, [pc, #112]	; (8006620 <HAL_TIM_Base_Start_IT+0xe4>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d004      	beq.n	80065bc <HAL_TIM_Base_Start_IT+0x80>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a1b      	ldr	r2, [pc, #108]	; (8006624 <HAL_TIM_Base_Start_IT+0xe8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d115      	bne.n	80065e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	689a      	ldr	r2, [r3, #8]
 80065c2:	4b19      	ldr	r3, [pc, #100]	; (8006628 <HAL_TIM_Base_Start_IT+0xec>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	2b06      	cmp	r3, #6
 80065cc:	d015      	beq.n	80065fa <HAL_TIM_Base_Start_IT+0xbe>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d4:	d011      	beq.n	80065fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e6:	e008      	b.n	80065fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0201 	orr.w	r2, r2, #1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	e000      	b.n	80065fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	40010000 	.word	0x40010000
 8006610:	40000400 	.word	0x40000400
 8006614:	40000800 	.word	0x40000800
 8006618:	40000c00 	.word	0x40000c00
 800661c:	40010400 	.word	0x40010400
 8006620:	40014000 	.word	0x40014000
 8006624:	40001800 	.word	0x40001800
 8006628:	00010007 	.word	0x00010007

0800662c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	68da      	ldr	r2, [r3, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6a1a      	ldr	r2, [r3, #32]
 800664a:	f241 1311 	movw	r3, #4369	; 0x1111
 800664e:	4013      	ands	r3, r2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d10f      	bne.n	8006674 <HAL_TIM_Base_Stop_IT+0x48>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6a1a      	ldr	r2, [r3, #32]
 800665a:	f240 4344 	movw	r3, #1092	; 0x444
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d107      	bne.n	8006674 <HAL_TIM_Base_Stop_IT+0x48>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f022 0201 	bic.w	r2, r2, #1
 8006672:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800667c:	2300      	movs	r3, #0
}
 800667e:	4618      	mov	r0, r3
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006688:	4770      	bx	lr

0800668a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b082      	sub	sp, #8
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e049      	b.n	8006730 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d106      	bne.n	80066b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 f841 	bl	8006738 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2202      	movs	r2, #2
 80066ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	3304      	adds	r3, #4
 80066c6:	4619      	mov	r1, r3
 80066c8:	4610      	mov	r0, r2
 80066ca:	f000 fcdf 	bl	800708c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d109      	bne.n	8006770 <HAL_TIM_PWM_Start+0x24>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b01      	cmp	r3, #1
 8006766:	bf14      	ite	ne
 8006768:	2301      	movne	r3, #1
 800676a:	2300      	moveq	r3, #0
 800676c:	b2db      	uxtb	r3, r3
 800676e:	e03c      	b.n	80067ea <HAL_TIM_PWM_Start+0x9e>
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	2b04      	cmp	r3, #4
 8006774:	d109      	bne.n	800678a <HAL_TIM_PWM_Start+0x3e>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	bf14      	ite	ne
 8006782:	2301      	movne	r3, #1
 8006784:	2300      	moveq	r3, #0
 8006786:	b2db      	uxtb	r3, r3
 8006788:	e02f      	b.n	80067ea <HAL_TIM_PWM_Start+0x9e>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b08      	cmp	r3, #8
 800678e:	d109      	bne.n	80067a4 <HAL_TIM_PWM_Start+0x58>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b01      	cmp	r3, #1
 800679a:	bf14      	ite	ne
 800679c:	2301      	movne	r3, #1
 800679e:	2300      	moveq	r3, #0
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	e022      	b.n	80067ea <HAL_TIM_PWM_Start+0x9e>
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b0c      	cmp	r3, #12
 80067a8:	d109      	bne.n	80067be <HAL_TIM_PWM_Start+0x72>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	bf14      	ite	ne
 80067b6:	2301      	movne	r3, #1
 80067b8:	2300      	moveq	r3, #0
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e015      	b.n	80067ea <HAL_TIM_PWM_Start+0x9e>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b10      	cmp	r3, #16
 80067c2:	d109      	bne.n	80067d8 <HAL_TIM_PWM_Start+0x8c>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	bf14      	ite	ne
 80067d0:	2301      	movne	r3, #1
 80067d2:	2300      	moveq	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	e008      	b.n	80067ea <HAL_TIM_PWM_Start+0x9e>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b01      	cmp	r3, #1
 80067e2:	bf14      	ite	ne
 80067e4:	2301      	movne	r3, #1
 80067e6:	2300      	moveq	r3, #0
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d001      	beq.n	80067f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e092      	b.n	8006918 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <HAL_TIM_PWM_Start+0xb6>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2202      	movs	r2, #2
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006800:	e023      	b.n	800684a <HAL_TIM_PWM_Start+0xfe>
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	2b04      	cmp	r3, #4
 8006806:	d104      	bne.n	8006812 <HAL_TIM_PWM_Start+0xc6>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2202      	movs	r2, #2
 800680c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006810:	e01b      	b.n	800684a <HAL_TIM_PWM_Start+0xfe>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b08      	cmp	r3, #8
 8006816:	d104      	bne.n	8006822 <HAL_TIM_PWM_Start+0xd6>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2202      	movs	r2, #2
 800681c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006820:	e013      	b.n	800684a <HAL_TIM_PWM_Start+0xfe>
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b0c      	cmp	r3, #12
 8006826:	d104      	bne.n	8006832 <HAL_TIM_PWM_Start+0xe6>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006830:	e00b      	b.n	800684a <HAL_TIM_PWM_Start+0xfe>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b10      	cmp	r3, #16
 8006836:	d104      	bne.n	8006842 <HAL_TIM_PWM_Start+0xf6>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006840:	e003      	b.n	800684a <HAL_TIM_PWM_Start+0xfe>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2202      	movs	r2, #2
 8006846:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2201      	movs	r2, #1
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	4618      	mov	r0, r3
 8006854:	f000 ffb2 	bl	80077bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a30      	ldr	r2, [pc, #192]	; (8006920 <HAL_TIM_PWM_Start+0x1d4>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d004      	beq.n	800686c <HAL_TIM_PWM_Start+0x120>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a2f      	ldr	r2, [pc, #188]	; (8006924 <HAL_TIM_PWM_Start+0x1d8>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d101      	bne.n	8006870 <HAL_TIM_PWM_Start+0x124>
 800686c:	2301      	movs	r3, #1
 800686e:	e000      	b.n	8006872 <HAL_TIM_PWM_Start+0x126>
 8006870:	2300      	movs	r3, #0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d007      	beq.n	8006886 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006884:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a25      	ldr	r2, [pc, #148]	; (8006920 <HAL_TIM_PWM_Start+0x1d4>)
 800688c:	4293      	cmp	r3, r2
 800688e:	d022      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x18a>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006898:	d01d      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x18a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a22      	ldr	r2, [pc, #136]	; (8006928 <HAL_TIM_PWM_Start+0x1dc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d018      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x18a>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a20      	ldr	r2, [pc, #128]	; (800692c <HAL_TIM_PWM_Start+0x1e0>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d013      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x18a>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a1f      	ldr	r2, [pc, #124]	; (8006930 <HAL_TIM_PWM_Start+0x1e4>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d00e      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x18a>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4a19      	ldr	r2, [pc, #100]	; (8006924 <HAL_TIM_PWM_Start+0x1d8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d009      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x18a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	4a1b      	ldr	r2, [pc, #108]	; (8006934 <HAL_TIM_PWM_Start+0x1e8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d004      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x18a>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a19      	ldr	r2, [pc, #100]	; (8006938 <HAL_TIM_PWM_Start+0x1ec>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d115      	bne.n	8006902 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	4b17      	ldr	r3, [pc, #92]	; (800693c <HAL_TIM_PWM_Start+0x1f0>)
 80068de:	4013      	ands	r3, r2
 80068e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b06      	cmp	r3, #6
 80068e6:	d015      	beq.n	8006914 <HAL_TIM_PWM_Start+0x1c8>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068ee:	d011      	beq.n	8006914 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006900:	e008      	b.n	8006914 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f042 0201 	orr.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
 8006912:	e000      	b.n	8006916 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006914:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3710      	adds	r7, #16
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}
 8006920:	40010000 	.word	0x40010000
 8006924:	40010400 	.word	0x40010400
 8006928:	40000400 	.word	0x40000400
 800692c:	40000800 	.word	0x40000800
 8006930:	40000c00 	.word	0x40000c00
 8006934:	40014000 	.word	0x40014000
 8006938:	40001800 	.word	0x40001800
 800693c:	00010007 	.word	0x00010007

08006940 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
 8006948:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2200      	movs	r2, #0
 8006950:	6839      	ldr	r1, [r7, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 ff32 	bl	80077bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a36      	ldr	r2, [pc, #216]	; (8006a38 <HAL_TIM_PWM_Stop+0xf8>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d004      	beq.n	800696c <HAL_TIM_PWM_Stop+0x2c>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a35      	ldr	r2, [pc, #212]	; (8006a3c <HAL_TIM_PWM_Stop+0xfc>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d101      	bne.n	8006970 <HAL_TIM_PWM_Stop+0x30>
 800696c:	2301      	movs	r3, #1
 800696e:	e000      	b.n	8006972 <HAL_TIM_PWM_Stop+0x32>
 8006970:	2300      	movs	r3, #0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d017      	beq.n	80069a6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	6a1a      	ldr	r2, [r3, #32]
 800697c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006980:	4013      	ands	r3, r2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10f      	bne.n	80069a6 <HAL_TIM_PWM_Stop+0x66>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	f240 4344 	movw	r3, #1092	; 0x444
 8006990:	4013      	ands	r3, r2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d107      	bne.n	80069a6 <HAL_TIM_PWM_Stop+0x66>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80069a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	f241 1311 	movw	r3, #4369	; 0x1111
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10f      	bne.n	80069d6 <HAL_TIM_PWM_Stop+0x96>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	6a1a      	ldr	r2, [r3, #32]
 80069bc:	f240 4344 	movw	r3, #1092	; 0x444
 80069c0:	4013      	ands	r3, r2
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d107      	bne.n	80069d6 <HAL_TIM_PWM_Stop+0x96>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f022 0201 	bic.w	r2, r2, #1
 80069d4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_PWM_Stop+0xa6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e4:	e023      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xee>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b04      	cmp	r3, #4
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_PWM_Stop+0xb6>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f4:	e01b      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xee>
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d104      	bne.n	8006a06 <HAL_TIM_PWM_Stop+0xc6>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a04:	e013      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xee>
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	2b0c      	cmp	r3, #12
 8006a0a:	d104      	bne.n	8006a16 <HAL_TIM_PWM_Stop+0xd6>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a14:	e00b      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xee>
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	2b10      	cmp	r3, #16
 8006a1a:	d104      	bne.n	8006a26 <HAL_TIM_PWM_Stop+0xe6>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a24:	e003      	b.n	8006a2e <HAL_TIM_PWM_Stop+0xee>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	40010000 	.word	0x40010000
 8006a3c:	40010400 	.word	0x40010400

08006a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d122      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d11b      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0202 	mvn.w	r2, #2
 8006a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fae4 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fad6 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fae7 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d122      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d11b      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0204 	mvn.w	r2, #4
 8006ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 faba 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 8006adc:	e005      	b.n	8006aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 faac 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fabd 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d122      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d11b      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0208 	mvn.w	r2, #8
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2204      	movs	r2, #4
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fa90 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fa82 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fa93 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d122      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d11b      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0210 	mvn.w	r2, #16
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa66 	bl	8007050 <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa58 	bl	800703c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa69 	bl	8007064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0201 	mvn.w	r2, #1
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fb fb4c 	bl	800225c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b80      	cmp	r3, #128	; 0x80
 8006bd0:	d10e      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 ff22 	bl	8007a34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bfa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bfe:	d10e      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b80      	cmp	r3, #128	; 0x80
 8006c0c:	d107      	bne.n	8006c1e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 ff15 	bl	8007a48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	691b      	ldr	r3, [r3, #16]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d10e      	bne.n	8006c4a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c36:	2b40      	cmp	r3, #64	; 0x40
 8006c38:	d107      	bne.n	8006c4a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 fa17 	bl	8007078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	f003 0320 	and.w	r3, r3, #32
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d10e      	bne.n	8006c76 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68db      	ldr	r3, [r3, #12]
 8006c5e:	f003 0320 	and.w	r3, r3, #32
 8006c62:	2b20      	cmp	r3, #32
 8006c64:	d107      	bne.n	8006c76 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f06f 0220 	mvn.w	r2, #32
 8006c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 fed5 	bl	8007a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d101      	bne.n	8006c9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c9a:	2302      	movs	r3, #2
 8006c9c:	e0ff      	b.n	8006e9e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b14      	cmp	r3, #20
 8006caa:	f200 80f0 	bhi.w	8006e8e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006cae:	a201      	add	r2, pc, #4	; (adr r2, 8006cb4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cb4:	08006d09 	.word	0x08006d09
 8006cb8:	08006e8f 	.word	0x08006e8f
 8006cbc:	08006e8f 	.word	0x08006e8f
 8006cc0:	08006e8f 	.word	0x08006e8f
 8006cc4:	08006d49 	.word	0x08006d49
 8006cc8:	08006e8f 	.word	0x08006e8f
 8006ccc:	08006e8f 	.word	0x08006e8f
 8006cd0:	08006e8f 	.word	0x08006e8f
 8006cd4:	08006d8b 	.word	0x08006d8b
 8006cd8:	08006e8f 	.word	0x08006e8f
 8006cdc:	08006e8f 	.word	0x08006e8f
 8006ce0:	08006e8f 	.word	0x08006e8f
 8006ce4:	08006dcb 	.word	0x08006dcb
 8006ce8:	08006e8f 	.word	0x08006e8f
 8006cec:	08006e8f 	.word	0x08006e8f
 8006cf0:	08006e8f 	.word	0x08006e8f
 8006cf4:	08006e0d 	.word	0x08006e0d
 8006cf8:	08006e8f 	.word	0x08006e8f
 8006cfc:	08006e8f 	.word	0x08006e8f
 8006d00:	08006e8f 	.word	0x08006e8f
 8006d04:	08006e4d 	.word	0x08006e4d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68b9      	ldr	r1, [r7, #8]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f000 fa5c 	bl	80071cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f042 0208 	orr.w	r2, r2, #8
 8006d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	699a      	ldr	r2, [r3, #24]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0204 	bic.w	r2, r2, #4
 8006d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6999      	ldr	r1, [r3, #24]
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	691a      	ldr	r2, [r3, #16]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	430a      	orrs	r2, r1
 8006d44:	619a      	str	r2, [r3, #24]
      break;
 8006d46:	e0a5      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 faae 	bl	80072b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	021a      	lsls	r2, r3, #8
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	430a      	orrs	r2, r1
 8006d86:	619a      	str	r2, [r3, #24]
      break;
 8006d88:	e084      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	68b9      	ldr	r1, [r7, #8]
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 fb05 	bl	80073a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	69da      	ldr	r2, [r3, #28]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f042 0208 	orr.w	r2, r2, #8
 8006da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	69da      	ldr	r2, [r3, #28]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0204 	bic.w	r2, r2, #4
 8006db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	69d9      	ldr	r1, [r3, #28]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	691a      	ldr	r2, [r3, #16]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	61da      	str	r2, [r3, #28]
      break;
 8006dc8:	e064      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fb5b 	bl	800748c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69d9      	ldr	r1, [r3, #28]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	021a      	lsls	r2, r3, #8
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	61da      	str	r2, [r3, #28]
      break;
 8006e0a:	e043      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	68b9      	ldr	r1, [r7, #8]
 8006e12:	4618      	mov	r0, r3
 8006e14:	f000 fb92 	bl	800753c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f042 0208 	orr.w	r2, r2, #8
 8006e26:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 0204 	bic.w	r2, r2, #4
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	691a      	ldr	r2, [r3, #16]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e4a:	e023      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68b9      	ldr	r1, [r7, #8]
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fbc4 	bl	80075e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e76:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	021a      	lsls	r2, r3, #8
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e8c:	e002      	b.n	8006e94 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	75fb      	strb	r3, [r7, #23]
      break;
 8006e92:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3718      	adds	r7, #24
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop

08006ea8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d101      	bne.n	8006ec4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ec0:	2302      	movs	r3, #2
 8006ec2:	e0b4      	b.n	800702e <HAL_TIM_ConfigClockSource+0x186>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006edc:	68ba      	ldr	r2, [r7, #8]
 8006ede:	4b56      	ldr	r3, [pc, #344]	; (8007038 <HAL_TIM_ConfigClockSource+0x190>)
 8006ee0:	4013      	ands	r3, r2
 8006ee2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efc:	d03e      	beq.n	8006f7c <HAL_TIM_ConfigClockSource+0xd4>
 8006efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f02:	f200 8087 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0a:	f000 8086 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x172>
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d87f      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f14:	2b70      	cmp	r3, #112	; 0x70
 8006f16:	d01a      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0xa6>
 8006f18:	2b70      	cmp	r3, #112	; 0x70
 8006f1a:	d87b      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f1c:	2b60      	cmp	r3, #96	; 0x60
 8006f1e:	d050      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x11a>
 8006f20:	2b60      	cmp	r3, #96	; 0x60
 8006f22:	d877      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f24:	2b50      	cmp	r3, #80	; 0x50
 8006f26:	d03c      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0xfa>
 8006f28:	2b50      	cmp	r3, #80	; 0x50
 8006f2a:	d873      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d058      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x13a>
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d86f      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d064      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d86b      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d060      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d867      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d05c      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d05a      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x15a>
 8006f4c:	e062      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6899      	ldr	r1, [r3, #8]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	f000 fc0d 	bl	800777c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	609a      	str	r2, [r3, #8]
      break;
 8006f7a:	e04f      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6899      	ldr	r1, [r3, #8]
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	f000 fbf6 	bl	800777c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f9e:	609a      	str	r2, [r3, #8]
      break;
 8006fa0:	e03c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f000 fb6a 	bl	8007688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2150      	movs	r1, #80	; 0x50
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fbc3 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8006fc0:	e02c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6859      	ldr	r1, [r3, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f000 fb89 	bl	80076e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2160      	movs	r1, #96	; 0x60
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fbb3 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8006fe0:	e01c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6859      	ldr	r1, [r3, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f000 fb4a 	bl	8007688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2140      	movs	r1, #64	; 0x40
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fba3 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8007000:	e00c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f000 fb9a 	bl	8007746 <TIM_ITRx_SetConfig>
      break;
 8007012:	e003      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
      break;
 8007018:	e000      	b.n	800701c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800701a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	fffeff88 	.word	0xfffeff88

0800703c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007050:	b480      	push	{r7}
 8007052:	b083      	sub	sp, #12
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007058:	bf00      	nop
 800705a:	370c      	adds	r7, #12
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800706c:	bf00      	nop
 800706e:	370c      	adds	r7, #12
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007080:	bf00      	nop
 8007082:	370c      	adds	r7, #12
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800708c:	b480      	push	{r7}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
 8007094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a40      	ldr	r2, [pc, #256]	; (80071a0 <TIM_Base_SetConfig+0x114>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d013      	beq.n	80070cc <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070aa:	d00f      	beq.n	80070cc <TIM_Base_SetConfig+0x40>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a3d      	ldr	r2, [pc, #244]	; (80071a4 <TIM_Base_SetConfig+0x118>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d00b      	beq.n	80070cc <TIM_Base_SetConfig+0x40>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a3c      	ldr	r2, [pc, #240]	; (80071a8 <TIM_Base_SetConfig+0x11c>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d007      	beq.n	80070cc <TIM_Base_SetConfig+0x40>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4a3b      	ldr	r2, [pc, #236]	; (80071ac <TIM_Base_SetConfig+0x120>)
 80070c0:	4293      	cmp	r3, r2
 80070c2:	d003      	beq.n	80070cc <TIM_Base_SetConfig+0x40>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a3a      	ldr	r2, [pc, #232]	; (80071b0 <TIM_Base_SetConfig+0x124>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d108      	bne.n	80070de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2f      	ldr	r2, [pc, #188]	; (80071a0 <TIM_Base_SetConfig+0x114>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d02b      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070ec:	d027      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a2c      	ldr	r2, [pc, #176]	; (80071a4 <TIM_Base_SetConfig+0x118>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d023      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a2b      	ldr	r2, [pc, #172]	; (80071a8 <TIM_Base_SetConfig+0x11c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d01f      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a2a      	ldr	r2, [pc, #168]	; (80071ac <TIM_Base_SetConfig+0x120>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d01b      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a29      	ldr	r2, [pc, #164]	; (80071b0 <TIM_Base_SetConfig+0x124>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d017      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a28      	ldr	r2, [pc, #160]	; (80071b4 <TIM_Base_SetConfig+0x128>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d013      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a27      	ldr	r2, [pc, #156]	; (80071b8 <TIM_Base_SetConfig+0x12c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00f      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a26      	ldr	r2, [pc, #152]	; (80071bc <TIM_Base_SetConfig+0x130>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00b      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <TIM_Base_SetConfig+0x134>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d007      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a24      	ldr	r2, [pc, #144]	; (80071c4 <TIM_Base_SetConfig+0x138>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d003      	beq.n	800713e <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a23      	ldr	r2, [pc, #140]	; (80071c8 <TIM_Base_SetConfig+0x13c>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d108      	bne.n	8007150 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007144:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	68db      	ldr	r3, [r3, #12]
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	4313      	orrs	r3, r2
 800715c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a0a      	ldr	r2, [pc, #40]	; (80071a0 <TIM_Base_SetConfig+0x114>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d003      	beq.n	8007184 <TIM_Base_SetConfig+0xf8>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a0c      	ldr	r2, [pc, #48]	; (80071b0 <TIM_Base_SetConfig+0x124>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d103      	bne.n	800718c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	691a      	ldr	r2, [r3, #16]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	615a      	str	r2, [r3, #20]
}
 8007192:	bf00      	nop
 8007194:	3714      	adds	r7, #20
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	40010000 	.word	0x40010000
 80071a4:	40000400 	.word	0x40000400
 80071a8:	40000800 	.word	0x40000800
 80071ac:	40000c00 	.word	0x40000c00
 80071b0:	40010400 	.word	0x40010400
 80071b4:	40014000 	.word	0x40014000
 80071b8:	40014400 	.word	0x40014400
 80071bc:	40014800 	.word	0x40014800
 80071c0:	40001800 	.word	0x40001800
 80071c4:	40001c00 	.word	0x40001c00
 80071c8:	40002000 	.word	0x40002000

080071cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b087      	sub	sp, #28
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071f4:	68fa      	ldr	r2, [r7, #12]
 80071f6:	4b2b      	ldr	r3, [pc, #172]	; (80072a4 <TIM_OC1_SetConfig+0xd8>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f023 0303 	bic.w	r3, r3, #3
 8007202:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	4313      	orrs	r3, r2
 800720c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f023 0302 	bic.w	r3, r3, #2
 8007214:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	4313      	orrs	r3, r2
 800721e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a21      	ldr	r2, [pc, #132]	; (80072a8 <TIM_OC1_SetConfig+0xdc>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d003      	beq.n	8007230 <TIM_OC1_SetConfig+0x64>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a20      	ldr	r2, [pc, #128]	; (80072ac <TIM_OC1_SetConfig+0xe0>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10c      	bne.n	800724a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	f023 0308 	bic.w	r3, r3, #8
 8007236:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f023 0304 	bic.w	r3, r3, #4
 8007248:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a16      	ldr	r2, [pc, #88]	; (80072a8 <TIM_OC1_SetConfig+0xdc>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d003      	beq.n	800725a <TIM_OC1_SetConfig+0x8e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a15      	ldr	r2, [pc, #84]	; (80072ac <TIM_OC1_SetConfig+0xe0>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d111      	bne.n	800727e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007260:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007268:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	4313      	orrs	r3, r2
 8007272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4313      	orrs	r3, r2
 800727c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	697a      	ldr	r2, [r7, #20]
 8007296:	621a      	str	r2, [r3, #32]
}
 8007298:	bf00      	nop
 800729a:	371c      	adds	r7, #28
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr
 80072a4:	fffeff8f 	.word	0xfffeff8f
 80072a8:	40010000 	.word	0x40010000
 80072ac:	40010400 	.word	0x40010400

080072b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b087      	sub	sp, #28
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	f023 0210 	bic.w	r2, r3, #16
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6a1b      	ldr	r3, [r3, #32]
 80072ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	4b2e      	ldr	r3, [pc, #184]	; (8007394 <TIM_OC2_SetConfig+0xe4>)
 80072dc:	4013      	ands	r3, r2
 80072de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	021b      	lsls	r3, r3, #8
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0320 	bic.w	r3, r3, #32
 80072fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	4a23      	ldr	r2, [pc, #140]	; (8007398 <TIM_OC2_SetConfig+0xe8>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d003      	beq.n	8007318 <TIM_OC2_SetConfig+0x68>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a22      	ldr	r2, [pc, #136]	; (800739c <TIM_OC2_SetConfig+0xec>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10d      	bne.n	8007334 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a18      	ldr	r2, [pc, #96]	; (8007398 <TIM_OC2_SetConfig+0xe8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d003      	beq.n	8007344 <TIM_OC2_SetConfig+0x94>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a17      	ldr	r2, [pc, #92]	; (800739c <TIM_OC2_SetConfig+0xec>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d113      	bne.n	800736c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800734a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007352:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	009b      	lsls	r3, r3, #2
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	693a      	ldr	r2, [r7, #16]
 8007370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	621a      	str	r2, [r3, #32]
}
 8007386:	bf00      	nop
 8007388:	371c      	adds	r7, #28
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	feff8fff 	.word	0xfeff8fff
 8007398:	40010000 	.word	0x40010000
 800739c:	40010400 	.word	0x40010400

080073a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b087      	sub	sp, #28
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
 80073ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a1b      	ldr	r3, [r3, #32]
 80073ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	69db      	ldr	r3, [r3, #28]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	4b2d      	ldr	r3, [pc, #180]	; (8007480 <TIM_OC3_SetConfig+0xe0>)
 80073cc:	4013      	ands	r3, r2
 80073ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f023 0303 	bic.w	r3, r3, #3
 80073d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68fa      	ldr	r2, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	021b      	lsls	r3, r3, #8
 80073f0:	697a      	ldr	r2, [r7, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	4a22      	ldr	r2, [pc, #136]	; (8007484 <TIM_OC3_SetConfig+0xe4>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d003      	beq.n	8007406 <TIM_OC3_SetConfig+0x66>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	4a21      	ldr	r2, [pc, #132]	; (8007488 <TIM_OC3_SetConfig+0xe8>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d10d      	bne.n	8007422 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800740c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a17      	ldr	r2, [pc, #92]	; (8007484 <TIM_OC3_SetConfig+0xe4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d003      	beq.n	8007432 <TIM_OC3_SetConfig+0x92>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <TIM_OC3_SetConfig+0xe8>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d113      	bne.n	800745a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007438:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007440:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	695b      	ldr	r3, [r3, #20]
 8007446:	011b      	lsls	r3, r3, #4
 8007448:	693a      	ldr	r2, [r7, #16]
 800744a:	4313      	orrs	r3, r2
 800744c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	693a      	ldr	r2, [r7, #16]
 800745e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	621a      	str	r2, [r3, #32]
}
 8007474:	bf00      	nop
 8007476:	371c      	adds	r7, #28
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	fffeff8f 	.word	0xfffeff8f
 8007484:	40010000 	.word	0x40010000
 8007488:	40010400 	.word	0x40010400

0800748c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800748c:	b480      	push	{r7}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6a1b      	ldr	r3, [r3, #32]
 800749a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69db      	ldr	r3, [r3, #28]
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	4b1e      	ldr	r3, [pc, #120]	; (8007530 <TIM_OC4_SetConfig+0xa4>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	031b      	lsls	r3, r3, #12
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a13      	ldr	r2, [pc, #76]	; (8007534 <TIM_OC4_SetConfig+0xa8>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d003      	beq.n	80074f4 <TIM_OC4_SetConfig+0x68>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a12      	ldr	r2, [pc, #72]	; (8007538 <TIM_OC4_SetConfig+0xac>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d109      	bne.n	8007508 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	695b      	ldr	r3, [r3, #20]
 8007500:	019b      	lsls	r3, r3, #6
 8007502:	697a      	ldr	r2, [r7, #20]
 8007504:	4313      	orrs	r3, r2
 8007506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	693a      	ldr	r2, [r7, #16]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr
 800752e:	bf00      	nop
 8007530:	feff8fff 	.word	0xfeff8fff
 8007534:	40010000 	.word	0x40010000
 8007538:	40010400 	.word	0x40010400

0800753c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800753c:	b480      	push	{r7}
 800753e:	b087      	sub	sp, #28
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
 800754a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4b1b      	ldr	r3, [pc, #108]	; (80075d4 <TIM_OC5_SetConfig+0x98>)
 8007568:	4013      	ands	r3, r2
 800756a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	4313      	orrs	r3, r2
 8007574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800757c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	041b      	lsls	r3, r3, #16
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	4a12      	ldr	r2, [pc, #72]	; (80075d8 <TIM_OC5_SetConfig+0x9c>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d003      	beq.n	800759a <TIM_OC5_SetConfig+0x5e>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a11      	ldr	r2, [pc, #68]	; (80075dc <TIM_OC5_SetConfig+0xa0>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d109      	bne.n	80075ae <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	021b      	lsls	r3, r3, #8
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685a      	ldr	r2, [r3, #4]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	621a      	str	r2, [r3, #32]
}
 80075c8:	bf00      	nop
 80075ca:	371c      	adds	r7, #28
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr
 80075d4:	fffeff8f 	.word	0xfffeff8f
 80075d8:	40010000 	.word	0x40010000
 80075dc:	40010400 	.word	0x40010400

080075e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6a1b      	ldr	r3, [r3, #32]
 80075ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4b1c      	ldr	r3, [pc, #112]	; (800767c <TIM_OC6_SetConfig+0x9c>)
 800760c:	4013      	ands	r3, r2
 800760e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	021b      	lsls	r3, r3, #8
 8007616:	68fa      	ldr	r2, [r7, #12]
 8007618:	4313      	orrs	r3, r2
 800761a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	051b      	lsls	r3, r3, #20
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	4313      	orrs	r3, r2
 800762e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a13      	ldr	r2, [pc, #76]	; (8007680 <TIM_OC6_SetConfig+0xa0>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_OC6_SetConfig+0x60>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a12      	ldr	r2, [pc, #72]	; (8007684 <TIM_OC6_SetConfig+0xa4>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d109      	bne.n	8007654 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007646:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	695b      	ldr	r3, [r3, #20]
 800764c:	029b      	lsls	r3, r3, #10
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4313      	orrs	r3, r2
 8007652:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68fa      	ldr	r2, [r7, #12]
 800765e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	685a      	ldr	r2, [r3, #4]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	621a      	str	r2, [r3, #32]
}
 800766e:	bf00      	nop
 8007670:	371c      	adds	r7, #28
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	feff8fff 	.word	0xfeff8fff
 8007680:	40010000 	.word	0x40010000
 8007684:	40010400 	.word	0x40010400

08007688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6a1b      	ldr	r3, [r3, #32]
 800769e:	f023 0201 	bic.w	r2, r3, #1
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	011b      	lsls	r3, r3, #4
 80076b8:	693a      	ldr	r2, [r7, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	f023 030a 	bic.w	r3, r3, #10
 80076c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	697a      	ldr	r2, [r7, #20]
 80076d8:	621a      	str	r2, [r3, #32]
}
 80076da:	bf00      	nop
 80076dc:	371c      	adds	r7, #28
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e6:	b480      	push	{r7}
 80076e8:	b087      	sub	sp, #28
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f023 0210 	bic.w	r2, r3, #16
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	031b      	lsls	r3, r3, #12
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	4313      	orrs	r3, r2
 800771a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	4313      	orrs	r3, r2
 800772c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	693a      	ldr	r2, [r7, #16]
 8007738:	621a      	str	r2, [r3, #32]
}
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007746:	b480      	push	{r7}
 8007748:	b085      	sub	sp, #20
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
 800774e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800775c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800775e:	683a      	ldr	r2, [r7, #0]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4313      	orrs	r3, r2
 8007764:	f043 0307 	orr.w	r3, r3, #7
 8007768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	609a      	str	r2, [r3, #8]
}
 8007770:	bf00      	nop
 8007772:	3714      	adds	r7, #20
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	021a      	lsls	r2, r3, #8
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	431a      	orrs	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	371c      	adds	r7, #28
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 031f 	and.w	r3, r3, #31
 80077ce:	2201      	movs	r2, #1
 80077d0:	fa02 f303 	lsl.w	r3, r2, r3
 80077d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	6a1a      	ldr	r2, [r3, #32]
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	43db      	mvns	r3, r3
 80077de:	401a      	ands	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a1a      	ldr	r2, [r3, #32]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f003 031f 	and.w	r3, r3, #31
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	fa01 f303 	lsl.w	r3, r1, r3
 80077f4:	431a      	orrs	r2, r3
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	621a      	str	r2, [r3, #32]
}
 80077fa:	bf00      	nop
 80077fc:	371c      	adds	r7, #28
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
	...

08007808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007818:	2b01      	cmp	r3, #1
 800781a:	d101      	bne.n	8007820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800781c:	2302      	movs	r3, #2
 800781e:	e06d      	b.n	80078fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a30      	ldr	r2, [pc, #192]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d004      	beq.n	8007854 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a2f      	ldr	r2, [pc, #188]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d108      	bne.n	8007866 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800785a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	68fa      	ldr	r2, [r7, #12]
 8007862:	4313      	orrs	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800786c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4313      	orrs	r3, r2
 8007876:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a20      	ldr	r2, [pc, #128]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d022      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007892:	d01d      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d018      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a1c      	ldr	r2, [pc, #112]	; (8007914 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d013      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a1a      	ldr	r2, [pc, #104]	; (8007918 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d00e      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a15      	ldr	r2, [pc, #84]	; (800790c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d009      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	; (800791c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d004      	beq.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a15      	ldr	r2, [pc, #84]	; (8007920 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10c      	bne.n	80078ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3714      	adds	r7, #20
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	40010000 	.word	0x40010000
 800790c:	40010400 	.word	0x40010400
 8007910:	40000400 	.word	0x40000400
 8007914:	40000800 	.word	0x40000800
 8007918:	40000c00 	.word	0x40000c00
 800791c:	40014000 	.word	0x40014000
 8007920:	40001800 	.word	0x40001800

08007924 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007924:	b480      	push	{r7}
 8007926:	b085      	sub	sp, #20
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800792e:	2300      	movs	r3, #0
 8007930:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007938:	2b01      	cmp	r3, #1
 800793a:	d101      	bne.n	8007940 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800793c:	2302      	movs	r3, #2
 800793e:	e065      	b.n	8007a0c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	4313      	orrs	r3, r2
 8007954:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	4313      	orrs	r3, r2
 8007962:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	4313      	orrs	r3, r2
 8007970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	695b      	ldr	r3, [r3, #20]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	4313      	orrs	r3, r2
 80079b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a14      	ldr	r2, [pc, #80]	; (8007a1c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d115      	bne.n	80079fa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	051b      	lsls	r3, r3, #20
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	4313      	orrs	r3, r2
 80079ea:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	6a1b      	ldr	r3, [r3, #32]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68fa      	ldr	r2, [r7, #12]
 8007a00:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	40010000 	.word	0x40010000
 8007a1c:	40010400 	.word	0x40010400

08007a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007a28:	bf00      	nop
 8007a2a:	370c      	adds	r7, #12
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a32:	4770      	bx	lr

08007a34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b083      	sub	sp, #12
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007a3c:	bf00      	nop
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr

08007a48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a48:	b480      	push	{r7}
 8007a4a:	b083      	sub	sp, #12
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a50:	bf00      	nop
 8007a52:	370c      	adds	r7, #12
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <__libc_init_array>:
 8007a5c:	b570      	push	{r4, r5, r6, lr}
 8007a5e:	4d0d      	ldr	r5, [pc, #52]	; (8007a94 <__libc_init_array+0x38>)
 8007a60:	4c0d      	ldr	r4, [pc, #52]	; (8007a98 <__libc_init_array+0x3c>)
 8007a62:	1b64      	subs	r4, r4, r5
 8007a64:	10a4      	asrs	r4, r4, #2
 8007a66:	2600      	movs	r6, #0
 8007a68:	42a6      	cmp	r6, r4
 8007a6a:	d109      	bne.n	8007a80 <__libc_init_array+0x24>
 8007a6c:	4d0b      	ldr	r5, [pc, #44]	; (8007a9c <__libc_init_array+0x40>)
 8007a6e:	4c0c      	ldr	r4, [pc, #48]	; (8007aa0 <__libc_init_array+0x44>)
 8007a70:	f000 f820 	bl	8007ab4 <_init>
 8007a74:	1b64      	subs	r4, r4, r5
 8007a76:	10a4      	asrs	r4, r4, #2
 8007a78:	2600      	movs	r6, #0
 8007a7a:	42a6      	cmp	r6, r4
 8007a7c:	d105      	bne.n	8007a8a <__libc_init_array+0x2e>
 8007a7e:	bd70      	pop	{r4, r5, r6, pc}
 8007a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a84:	4798      	blx	r3
 8007a86:	3601      	adds	r6, #1
 8007a88:	e7ee      	b.n	8007a68 <__libc_init_array+0xc>
 8007a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a8e:	4798      	blx	r3
 8007a90:	3601      	adds	r6, #1
 8007a92:	e7f2      	b.n	8007a7a <__libc_init_array+0x1e>
 8007a94:	08007b50 	.word	0x08007b50
 8007a98:	08007b50 	.word	0x08007b50
 8007a9c:	08007b50 	.word	0x08007b50
 8007aa0:	08007b54 	.word	0x08007b54

08007aa4 <memset>:
 8007aa4:	4402      	add	r2, r0
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d100      	bne.n	8007aae <memset+0xa>
 8007aac:	4770      	bx	lr
 8007aae:	f803 1b01 	strb.w	r1, [r3], #1
 8007ab2:	e7f9      	b.n	8007aa8 <memset+0x4>

08007ab4 <_init>:
 8007ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab6:	bf00      	nop
 8007ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aba:	bc08      	pop	{r3}
 8007abc:	469e      	mov	lr, r3
 8007abe:	4770      	bx	lr

08007ac0 <_fini>:
 8007ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ac2:	bf00      	nop
 8007ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac6:	bc08      	pop	{r3}
 8007ac8:	469e      	mov	lr, r3
 8007aca:	4770      	bx	lr
